// Generated from OracleSQL.g4 by ANTLR 4.7



import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class OracleSQLParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, T__90=91, T__91=92, T__92=93, T__93=94, 
		T__94=95, T__95=96, T__96=97, T__97=98, T__98=99, T__99=100, T__100=101, 
		T__101=102, T__102=103, T__103=104, T__104=105, T__105=106, T__106=107, 
		T__107=108, T__108=109, T__109=110, T__110=111, T__111=112, T__112=113, 
		T__113=114, T__114=115, T__115=116, T__116=117, T__117=118, T__118=119, 
		T__119=120, T__120=121, T__121=122, T__122=123, T__123=124, T__124=125, 
		T__125=126, T__126=127, T__127=128, T__128=129, T__129=130, T__130=131, 
		T__131=132, T__132=133, T__133=134, T__134=135, T__135=136, T__136=137, 
		T__137=138, T__138=139, T__139=140, T__140=141, T__141=142, T__142=143, 
		T__143=144, T__144=145, T__145=146, T__146=147, T__147=148, T__148=149, 
		T__149=150, T__150=151, T__151=152, T__152=153, T__153=154, T__154=155, 
		T__155=156, T__156=157, T__157=158, T__158=159, T__159=160, T__160=161, 
		T__161=162, T__162=163, T__163=164, T__164=165, T__165=166, T__166=167, 
		T__167=168, T__168=169, T__169=170, T__170=171, T__171=172, T_UNKNOWN=173, 
		T_RESERVED=174, T_TABLE_ALIAS=175, T_COLUMN_ALIAS=176, T_COLUMN_NAME=177, 
		T_TABLE_NAME=178, T_SCHEMA_NAME=179, T_FUNCTION_NAME=180, T_PACKAGE_NAME=181, 
		T_DBLINK_NAME=182, T_BINDVAR_NAME=183, T_DECL=184, T_USE=185, T_WITH=186, 
		T_SELECT=187, T_SUBQUERY=188, T_TABLE_CAST=189, T_COLUMN_LIST=190, T_SELECT_COLUMN=191, 
		T_FROM=192, T_WHERE=193, T_HIERARCHICAL=194, T_GROUP_BY=195, T_MODEL=196, 
		T_UNION=197, T_ORDER_BY_CLAUSE=198, T_FOR_UPDATE_CLAUSE=199, T_OPERATOR_UNARY=200, 
		T_OPERATOR_BINARY=201, T_OPERATOR_PART=202, T_COND_OR=203, T_COND_OR_SEQ=204, 
		T_COND_AND=205, T_COND_AND_SEQ=206, T_COND_NOT=207, T_COND_EXISTS=208, 
		T_COND_IS=209, T_COND_COMPARISON=210, T_COND_GROUP_COMPARISON=211, T_COND_IN=212, 
		T_COND_IS_A_SET=213, T_COND_IS_ANY=214, T_COND_IS_EMPTY=215, T_COND_IS_OF_TYPE=216, 
		T_COND_IS_PRESENT=217, T_COND_LIKE=218, T_COND_MEMEBER=219, T_COND_BETWEEN=220, 
		T_COND_REGEXP_LIKE=221, T_COND_SUBMULTISET=222, T_COND_EQUALS_PATH=223, 
		T_COND_UNDER_PATH=224, T_COND_PAREN=225, QUOTED_STRING=226, QSTRING=227, 
		BINDVAR=228, ID=229, SEMI=230, COLON=231, DOUBLEDOT=232, DOT=233, COMMA=234, 
		ASTERISK=235, AT_SIGN=236, RPAREN=237, LPAREN=238, RBRACK=239, LBRACK=240, 
		PLUS=241, MINUS=242, DIVIDE=243, EQ=244, PERCENTAGE=245, LLABEL=246, RLABEL=247, 
		ASSIGN=248, ARROW=249, VERTBAR=250, DOUBLEVERTBAR=251, NOT_EQ=252, LTH=253, 
		LEQ=254, GTH=255, GEQ=256, NUMBER=257, QUOTE=258, WS=259, SL_COMMENT=260, 
		ML_COMMENT=261, TYPE_ATTR=262, ROWTYPE_ATTR=263, NOTFOUND_ATTR=264, FOUND_ATTR=265, 
		ISOPEN_ATTR=266, ROWCOUNT_ATTR=267, BULK_ROWCOUNT_ATTR=268, CHARSET_ATTR=269, 
		ZV=270;
	public static final int
		RULE_start_rule = 0, RULE_delete_statement = 1, RULE_merge_statement = 2, 
		RULE_merge_update_clause = 3, RULE_merge_insert_clause = 4, RULE_insert_statement = 5, 
		RULE_single_table_insert = 6, RULE_insert_into_clause = 7, RULE_values_clause = 8, 
		RULE_returning_clause = 9, RULE_multi_table_insert = 10, RULE_conditional_insert_clause = 11, 
		RULE_dml_table_expression_clause = 12, RULE_error_logging_clause = 13, 
		RULE_data_item = 14, RULE_update_statement = 15, RULE_update_set_clause = 16, 
		RULE_update_set_clause_part1 = 17, RULE_update_set_clause_part2 = 18, 
		RULE_select_statement = 19, RULE_subquery_factoring_clause = 20, RULE_subquery_factoring_clause_part_first = 21, 
		RULE_subquery_factoring_clause_part_next = 22, RULE_search_clause = 23, 
		RULE_cycle_clause = 24, RULE_select_list = 25, RULE_displayed_column_part_first = 26, 
		RULE_displayed_column_part_next = 27, RULE_displayed_column = 28, RULE_sql_expression = 29, 
		RULE_expr_add = 30, RULE_expr_mul = 31, RULE_expr_sign = 32, RULE_expr_expr = 33, 
		RULE_expr_paren = 34, RULE_nested_expression = 35, RULE_function_expression = 36, 
		RULE_call_parameters = 37, RULE_call_parameter = 38, RULE_parameter_name = 39, 
		RULE_special_function = 40, RULE_case_expression = 41, RULE_cursor_expression = 42, 
		RULE_simple_case_expression = 43, RULE_searched_case_expression = 44, 
		RULE_else_case_expression = 45, RULE_object_access_expression = 46, RULE_simple_expression = 47, 
		RULE_query_block = 48, RULE_subquery = 49, RULE_timestamp_expression = 50, 
		RULE_interval_x_to_y = 51, RULE_precision = 52, RULE_extract_datetime_expression = 53, 
		RULE_datetime_expression = 54, RULE_interval_expression = 55, RULE_special_expression = 56, 
		RULE_cluster_set_clause = 57, RULE_cast_expression = 58, RULE_datatype_name = 59, 
		RULE_boolean_literal = 60, RULE_t_alias = 61, RULE_c_alias = 62, RULE_column_spec = 63, 
		RULE_pseudo_column = 64, RULE_function_name = 65, RULE_function_spec = 66, 
		RULE_identifier = 67, RULE_bind_variable = 68, RULE_sql_identifier = 69, 
		RULE_table_reference_list = 70, RULE_table_reference = 71, RULE_query_table_expression = 72, 
		RULE_flashback_query_clause = 73, RULE_sample_clause = 74, RULE_partition_extension_clause = 75, 
		RULE_subquery_restricrion_clause = 76, RULE_table_collection_clause = 77, 
		RULE_join_clause = 78, RULE_inner_cross_join_clause = 79, RULE_outer_join_clause = 80, 
		RULE_query_partition_clause = 81, RULE_outer_join_type = 82, RULE_sample_percent = 83, 
		RULE_seed_value = 84, RULE_outer_join_sign = 85, RULE_table_name = 86, 
		RULE_schema_name = 87, RULE_package_name = 88, RULE_dblink_name = 89, 
		RULE_column_specs = 90, RULE_partition = 91, RULE_partition_key_value = 92, 
		RULE_subpartition_key_value = 93, RULE_constraint = 94, RULE_collection_expression = 95, 
		RULE_where_clause = 96, RULE_hierarchical_query_clause = 97, RULE_group_by_clause = 98, 
		RULE_group_by_exprs = 99, RULE_group_by_expr = 100, RULE_rollup_cube_clause = 101, 
		RULE_grouping_sets_clause = 102, RULE_grouping_sets_exprs = 103, RULE_grouping_sets_expr = 104, 
		RULE_sql_condition = 105, RULE_condition_or = 106, RULE_condition_and = 107, 
		RULE_condition_not = 108, RULE_condition_expr = 109, RULE_condition_exists = 110, 
		RULE_condition_is = 111, RULE_condition_comparison = 112, RULE_condition_group_comparison = 113, 
		RULE_condition_in = 114, RULE_condition_is_a_set = 115, RULE_condition_is_any = 116, 
		RULE_condition_is_empty = 117, RULE_condition_is_of_type = 118, RULE_condition_is_present = 119, 
		RULE_condition_like = 120, RULE_condition_memeber = 121, RULE_condition_between = 122, 
		RULE_condition_regexp_like = 123, RULE_condition_submultiset = 124, RULE_condition_equals_path = 125, 
		RULE_condition_under_path = 126, RULE_levels = 127, RULE_correlation_integer = 128, 
		RULE_path_string = 129, RULE_type_names = 130, RULE_integer = 131, RULE_column_name = 132, 
		RULE_nested_table = 133, RULE_nested_table_column_name = 134, RULE_sql_expressions = 135, 
		RULE_grouping_sets_expression_list = 136, RULE_grouping_expression_list = 137, 
		RULE_expression_list = 138, RULE_cell_reference = 139, RULE_condition_paren = 140, 
		RULE_model_clause = 141, RULE_cell_reference_options = 142, RULE_return_rows_clause = 143, 
		RULE_reference_model = 144, RULE_reference_model_name = 145, RULE_main_model = 146, 
		RULE_main_model_name = 147, RULE_model_column_clauses = 148, RULE_model_columns = 149, 
		RULE_model_column = 150, RULE_model_rules_clause = 151, RULE_model_rules_exprs = 152, 
		RULE_model_rules_expr = 153, RULE_cell_assignment = 154, RULE_cell_assignment_exprs = 155, 
		RULE_cell_assignment_expr = 156, RULE_measure_column = 157, RULE_single_column_for_loop = 158, 
		RULE_pattern = 159, RULE_literal = 160, RULE_literals = 161, RULE_multi_column_for_loop = 162, 
		RULE_bracket_literals = 163, RULE_bracket_literals_list = 164, RULE_union_clause = 165, 
		RULE_order_by_clause = 166, RULE_order_by_clause_part_first = 167, RULE_order_by_clause_part_next = 168, 
		RULE_analytic_function_name = 169, RULE_analytic_function_call = 170, 
		RULE_analytic_function = 171, RULE_count_function = 172, RULE_analytic_clause = 173, 
		RULE_windowing_clause_part = 174, RULE_windowing_clause = 175, RULE_aggregate_function_name = 176, 
		RULE_aggregate_function = 177, RULE_percent_rank_aggregate = 178, RULE_dense_rank_aggregate = 179, 
		RULE_percent_rank_analytic = 180, RULE_percent_cont_disc_analytic = 181, 
		RULE_dense_rank_analytic = 182, RULE_first_last = 183, RULE_listagg = 184, 
		RULE_for_update_clause = 185, RULE_for_update_clause_part_first = 186, 
		RULE_for_update_clause_part_next = 187, RULE_pivot_clause = 188, RULE_pivot_for_clause = 189, 
		RULE_pivot_in_clause = 190, RULE_unpivot_clause = 191, RULE_unpivot_in_clause = 192, 
		RULE_constant = 193, RULE_r_access = 194, RULE_r_add = 195, RULE_r_all = 196, 
		RULE_r_alter = 197, RULE_r_and = 198, RULE_r_any = 199, RULE_r_arraylen = 200, 
		RULE_r_as = 201, RULE_r_asc = 202, RULE_r_audit = 203, RULE_r_between = 204, 
		RULE_r_by = 205, RULE_r_case = 206, RULE_r_char = 207, RULE_r_check = 208, 
		RULE_r_cluster = 209, RULE_r_column = 210, RULE_r_comment = 211, RULE_r_compress = 212, 
		RULE_r_connect = 213, RULE_r_create = 214, RULE_r_current = 215, RULE_r_date = 216, 
		RULE_r_decimal = 217, RULE_r_default = 218, RULE_r_delete = 219, RULE_r_desc = 220, 
		RULE_r_distinct = 221, RULE_r_drop = 222, RULE_r_else = 223, RULE_r_exclusive = 224, 
		RULE_r_exists = 225, RULE_r_false = 226, RULE_r_file = 227, RULE_r_float = 228, 
		RULE_r_for = 229, RULE_r_from = 230, RULE_r_grant = 231, RULE_r_group = 232, 
		RULE_r_having = 233, RULE_r_identified = 234, RULE_r_immediate = 235, 
		RULE_r_in = 236, RULE_r_increment = 237, RULE_r_index = 238, RULE_r_initial = 239, 
		RULE_r_insert = 240, RULE_r_integer = 241, RULE_r_intersect = 242, RULE_r_into = 243, 
		RULE_r_is = 244, RULE_r_level = 245, RULE_r_like = 246, RULE_r_lock = 247, 
		RULE_r_long = 248, RULE_r_maxextents = 249, RULE_r_minus = 250, RULE_r_mode = 251, 
		RULE_r_modify = 252, RULE_r_noaudit = 253, RULE_r_nocompress = 254, RULE_r_not = 255, 
		RULE_r_notfound = 256, RULE_r_nowait = 257, RULE_r_null = 258, RULE_r_number = 259, 
		RULE_r_of = 260, RULE_r_offline = 261, RULE_r_on = 262, RULE_r_online = 263, 
		RULE_r_option = 264, RULE_r_or = 265, RULE_r_order = 266, RULE_r_pctfree = 267, 
		RULE_r_prior = 268, RULE_r_privileges = 269, RULE_r_public = 270, RULE_r_raw = 271, 
		RULE_r_rename = 272, RULE_r_resource = 273, RULE_r_revoke = 274, RULE_r_row = 275, 
		RULE_r_rowid = 276, RULE_r_rowlabel = 277, RULE_r_rownum = 278, RULE_r_rows = 279, 
		RULE_r_select = 280, RULE_r_session = 281, RULE_r_set = 282, RULE_r_share = 283, 
		RULE_r_size = 284, RULE_r_smallint = 285, RULE_r_sqlbuf = 286, RULE_r_start = 287, 
		RULE_r_successful = 288, RULE_r_synonym = 289, RULE_r_sysdate = 290, RULE_r_table = 291, 
		RULE_r_then = 292, RULE_r_to = 293, RULE_r_trigger = 294, RULE_r_true = 295, 
		RULE_r_uid = 296, RULE_r_union = 297, RULE_r_unique = 298, RULE_r_update = 299, 
		RULE_r_user = 300, RULE_r_validate = 301, RULE_r_values = 302, RULE_r_varchar = 303, 
		RULE_r_varchar2 = 304, RULE_r_view = 305, RULE_r_whenever = 306, RULE_r_where = 307, 
		RULE_r_with = 308, RULE_k_a = 309, RULE_k_at = 310, RULE_k_automatic = 311, 
		RULE_k_bfile = 312, RULE_k_binary_double = 313, RULE_k_binary_float = 314, 
		RULE_k_binary_integer = 315, RULE_k_blob = 316, RULE_k_block = 317, RULE_k_boolean = 318, 
		RULE_k_both = 319, RULE_k_breadth = 320, RULE_k_byte = 321, RULE_k_cast = 322, 
		RULE_k_character = 323, RULE_k_clob = 324, RULE_k_cluster_set = 325, RULE_k_connect_by_root = 326, 
		RULE_k_constraint = 327, RULE_k_count = 328, RULE_k_cross = 329, RULE_k_cube = 330, 
		RULE_k_cursor = 331, RULE_k_cycle = 332, RULE_k_day = 333, RULE_k_dbtimezone = 334, 
		RULE_k_dec = 335, RULE_k_decrement = 336, RULE_k_dense_rank = 337, RULE_k_depth = 338, 
		RULE_k_dimension = 339, RULE_k_double = 340, RULE_k_empty = 341, RULE_k_end = 342, 
		RULE_k_equals_path = 343, RULE_k_errors = 344, RULE_k_escape = 345, RULE_k_exclude = 346, 
		RULE_k_extract = 347, RULE_k_first = 348, RULE_k_following = 349, RULE_k_full = 350, 
		RULE_k_grouping = 351, RULE_k_hour = 352, RULE_k_ignore = 353, RULE_k_include = 354, 
		RULE_k_infinite = 355, RULE_k_inner = 356, RULE_k_int = 357, RULE_k_interval = 358, 
		RULE_k_iterate = 359, RULE_k_join = 360, RULE_k_keep = 361, RULE_k_last = 362, 
		RULE_k_leading = 363, RULE_k_left = 364, RULE_k_like2 = 365, RULE_k_like4 = 366, 
		RULE_k_likec = 367, RULE_k_limit = 368, RULE_k_listagg = 369, RULE_k_lnnvl = 370, 
		RULE_k_local = 371, RULE_k_locked = 372, RULE_k_log = 373, RULE_k_main = 374, 
		RULE_k_matched = 375, RULE_k_maxvalue = 376, RULE_k_measures = 377, RULE_k_member = 378, 
		RULE_k_merge = 379, RULE_k_minute = 380, RULE_k_mivalue = 381, RULE_k_mlslabel = 382, 
		RULE_k_model = 383, RULE_k_month = 384, RULE_k_multiset = 385, RULE_k_nan = 386, 
		RULE_k_national = 387, RULE_k_natural = 388, RULE_k_nav = 389, RULE_k_nchar = 390, 
		RULE_k_nclob = 391, RULE_k_nocycle = 392, RULE_k_nulls = 393, RULE_k_numeric = 394, 
		RULE_k_nvarchar = 395, RULE_k_nvarchar2 = 396, RULE_k_only = 397, RULE_k_outer = 398, 
		RULE_k_over = 399, RULE_k_partition = 400, RULE_k_percent_rank = 401, 
		RULE_k_percentile_cont = 402, RULE_k_percentile_disc = 403, RULE_k_pivot = 404, 
		RULE_k_pls_integer = 405, RULE_k_positive = 406, RULE_k_preceding = 407, 
		RULE_k_precision = 408, RULE_k_present = 409, RULE_k_range = 410, RULE_k_read = 411, 
		RULE_k_real = 412, RULE_k_reference = 413, RULE_k_regexp_like = 414, RULE_k_reject = 415, 
		RULE_k_respect = 416, RULE_k_return = 417, RULE_k_returning = 418, RULE_k_right = 419, 
		RULE_k_rollup = 420, RULE_k_rules = 421, RULE_k_sample = 422, RULE_k_scn = 423, 
		RULE_k_search = 424, RULE_k_second = 425, RULE_k_seed = 426, RULE_k_sequential = 427, 
		RULE_k_sessiontimezone = 428, RULE_k_sets = 429, RULE_k_siblings = 430, 
		RULE_k_single = 431, RULE_k_skip = 432, RULE_k_some = 433, RULE_k_sql = 434, 
		RULE_k_submultiset = 435, RULE_k_subpartition = 436, RULE_k_the = 437, 
		RULE_k_time = 438, RULE_k_timestamp = 439, RULE_k_timezone_hour = 440, 
		RULE_k_timezone_minute = 441, RULE_k_timezone_region = 442, RULE_k_timezone_abbr = 443, 
		RULE_k_to = 444, RULE_k_trailing = 445, RULE_k_trim = 446, RULE_k_type = 447, 
		RULE_k_unbounded = 448, RULE_k_under_path = 449, RULE_k_unlimited = 450, 
		RULE_k_unpivot = 451, RULE_k_until = 452, RULE_k_updated = 453, RULE_k_upsert = 454, 
		RULE_k_urowid = 455, RULE_k_using = 456, RULE_k_value = 457, RULE_k_varying = 458, 
		RULE_k_versions = 459, RULE_k_wait = 460, RULE_k_when = 461, RULE_k_within = 462, 
		RULE_k_xml = 463, RULE_k_year = 464, RULE_k_zone = 465, RULE_keyword = 466, 
		RULE_quoted_string = 467, RULE_doublevertbar = 468, RULE_not_equal = 469, 
		RULE_leq = 470, RULE_geq = 471;
	public static final String[] ruleNames = {
		"start_rule", "delete_statement", "merge_statement", "merge_update_clause", 
		"merge_insert_clause", "insert_statement", "single_table_insert", "insert_into_clause", 
		"values_clause", "returning_clause", "multi_table_insert", "conditional_insert_clause", 
		"dml_table_expression_clause", "error_logging_clause", "data_item", "update_statement", 
		"update_set_clause", "update_set_clause_part1", "update_set_clause_part2", 
		"select_statement", "subquery_factoring_clause", "subquery_factoring_clause_part_first", 
		"subquery_factoring_clause_part_next", "search_clause", "cycle_clause", 
		"select_list", "displayed_column_part_first", "displayed_column_part_next", 
		"displayed_column", "sql_expression", "expr_add", "expr_mul", "expr_sign", 
		"expr_expr", "expr_paren", "nested_expression", "function_expression", 
		"call_parameters", "call_parameter", "parameter_name", "special_function", 
		"case_expression", "cursor_expression", "simple_case_expression", "searched_case_expression", 
		"else_case_expression", "object_access_expression", "simple_expression", 
		"query_block", "subquery", "timestamp_expression", "interval_x_to_y", 
		"precision", "extract_datetime_expression", "datetime_expression", "interval_expression", 
		"special_expression", "cluster_set_clause", "cast_expression", "datatype_name", 
		"boolean_literal", "t_alias", "c_alias", "column_spec", "pseudo_column", 
		"function_name", "function_spec", "identifier", "bind_variable", "sql_identifier", 
		"table_reference_list", "table_reference", "query_table_expression", "flashback_query_clause", 
		"sample_clause", "partition_extension_clause", "subquery_restricrion_clause", 
		"table_collection_clause", "join_clause", "inner_cross_join_clause", "outer_join_clause", 
		"query_partition_clause", "outer_join_type", "sample_percent", "seed_value", 
		"outer_join_sign", "table_name", "schema_name", "package_name", "dblink_name", 
		"column_specs", "partition", "partition_key_value", "subpartition_key_value", 
		"constraint", "collection_expression", "where_clause", "hierarchical_query_clause", 
		"group_by_clause", "group_by_exprs", "group_by_expr", "rollup_cube_clause", 
		"grouping_sets_clause", "grouping_sets_exprs", "grouping_sets_expr", "sql_condition", 
		"condition_or", "condition_and", "condition_not", "condition_expr", "condition_exists", 
		"condition_is", "condition_comparison", "condition_group_comparison", 
		"condition_in", "condition_is_a_set", "condition_is_any", "condition_is_empty", 
		"condition_is_of_type", "condition_is_present", "condition_like", "condition_memeber", 
		"condition_between", "condition_regexp_like", "condition_submultiset", 
		"condition_equals_path", "condition_under_path", "levels", "correlation_integer", 
		"path_string", "type_names", "integer", "column_name", "nested_table", 
		"nested_table_column_name", "sql_expressions", "grouping_sets_expression_list", 
		"grouping_expression_list", "expression_list", "cell_reference", "condition_paren", 
		"model_clause", "cell_reference_options", "return_rows_clause", "reference_model", 
		"reference_model_name", "main_model", "main_model_name", "model_column_clauses", 
		"model_columns", "model_column", "model_rules_clause", "model_rules_exprs", 
		"model_rules_expr", "cell_assignment", "cell_assignment_exprs", "cell_assignment_expr", 
		"measure_column", "single_column_for_loop", "pattern", "literal", "literals", 
		"multi_column_for_loop", "bracket_literals", "bracket_literals_list", 
		"union_clause", "order_by_clause", "order_by_clause_part_first", "order_by_clause_part_next", 
		"analytic_function_name", "analytic_function_call", "analytic_function", 
		"count_function", "analytic_clause", "windowing_clause_part", "windowing_clause", 
		"aggregate_function_name", "aggregate_function", "percent_rank_aggregate", 
		"dense_rank_aggregate", "percent_rank_analytic", "percent_cont_disc_analytic", 
		"dense_rank_analytic", "first_last", "listagg", "for_update_clause", "for_update_clause_part_first", 
		"for_update_clause_part_next", "pivot_clause", "pivot_for_clause", "pivot_in_clause", 
		"unpivot_clause", "unpivot_in_clause", "constant", "r_access", "r_add", 
		"r_all", "r_alter", "r_and", "r_any", "r_arraylen", "r_as", "r_asc", "r_audit", 
		"r_between", "r_by", "r_case", "r_char", "r_check", "r_cluster", "r_column", 
		"r_comment", "r_compress", "r_connect", "r_create", "r_current", "r_date", 
		"r_decimal", "r_default", "r_delete", "r_desc", "r_distinct", "r_drop", 
		"r_else", "r_exclusive", "r_exists", "r_false", "r_file", "r_float", "r_for", 
		"r_from", "r_grant", "r_group", "r_having", "r_identified", "r_immediate", 
		"r_in", "r_increment", "r_index", "r_initial", "r_insert", "r_integer", 
		"r_intersect", "r_into", "r_is", "r_level", "r_like", "r_lock", "r_long", 
		"r_maxextents", "r_minus", "r_mode", "r_modify", "r_noaudit", "r_nocompress", 
		"r_not", "r_notfound", "r_nowait", "r_null", "r_number", "r_of", "r_offline", 
		"r_on", "r_online", "r_option", "r_or", "r_order", "r_pctfree", "r_prior", 
		"r_privileges", "r_public", "r_raw", "r_rename", "r_resource", "r_revoke", 
		"r_row", "r_rowid", "r_rowlabel", "r_rownum", "r_rows", "r_select", "r_session", 
		"r_set", "r_share", "r_size", "r_smallint", "r_sqlbuf", "r_start", "r_successful", 
		"r_synonym", "r_sysdate", "r_table", "r_then", "r_to", "r_trigger", "r_true", 
		"r_uid", "r_union", "r_unique", "r_update", "r_user", "r_validate", "r_values", 
		"r_varchar", "r_varchar2", "r_view", "r_whenever", "r_where", "r_with", 
		"k_a", "k_at", "k_automatic", "k_bfile", "k_binary_double", "k_binary_float", 
		"k_binary_integer", "k_blob", "k_block", "k_boolean", "k_both", "k_breadth", 
		"k_byte", "k_cast", "k_character", "k_clob", "k_cluster_set", "k_connect_by_root", 
		"k_constraint", "k_count", "k_cross", "k_cube", "k_cursor", "k_cycle", 
		"k_day", "k_dbtimezone", "k_dec", "k_decrement", "k_dense_rank", "k_depth", 
		"k_dimension", "k_double", "k_empty", "k_end", "k_equals_path", "k_errors", 
		"k_escape", "k_exclude", "k_extract", "k_first", "k_following", "k_full", 
		"k_grouping", "k_hour", "k_ignore", "k_include", "k_infinite", "k_inner", 
		"k_int", "k_interval", "k_iterate", "k_join", "k_keep", "k_last", "k_leading", 
		"k_left", "k_like2", "k_like4", "k_likec", "k_limit", "k_listagg", "k_lnnvl", 
		"k_local", "k_locked", "k_log", "k_main", "k_matched", "k_maxvalue", "k_measures", 
		"k_member", "k_merge", "k_minute", "k_mivalue", "k_mlslabel", "k_model", 
		"k_month", "k_multiset", "k_nan", "k_national", "k_natural", "k_nav", 
		"k_nchar", "k_nclob", "k_nocycle", "k_nulls", "k_numeric", "k_nvarchar", 
		"k_nvarchar2", "k_only", "k_outer", "k_over", "k_partition", "k_percent_rank", 
		"k_percentile_cont", "k_percentile_disc", "k_pivot", "k_pls_integer", 
		"k_positive", "k_preceding", "k_precision", "k_present", "k_range", "k_read", 
		"k_real", "k_reference", "k_regexp_like", "k_reject", "k_respect", "k_return", 
		"k_returning", "k_right", "k_rollup", "k_rules", "k_sample", "k_scn", 
		"k_search", "k_second", "k_seed", "k_sequential", "k_sessiontimezone", 
		"k_sets", "k_siblings", "k_single", "k_skip", "k_some", "k_sql", "k_submultiset", 
		"k_subpartition", "k_the", "k_time", "k_timestamp", "k_timezone_hour", 
		"k_timezone_minute", "k_timezone_region", "k_timezone_abbr", "k_to", "k_trailing", 
		"k_trim", "k_type", "k_unbounded", "k_under_path", "k_unlimited", "k_unpivot", 
		"k_until", "k_updated", "k_upsert", "k_urowid", "k_using", "k_value", 
		"k_varying", "k_versions", "k_wait", "k_when", "k_within", "k_xml", "k_year", 
		"k_zone", "keyword", "quoted_string", "doublevertbar", "not_equal", "leq", 
		"geq"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'ACCESS'", "'ADD'", "'ALL'", "'ALTER'", "'AND'", "'ANY'", "'ARRAYLEN'", 
		"'AS'", "'ASC'", "'AUDIT'", "'BETWEEN'", "'BY'", "'CASE'", "'CHAR'", "'CHECK'", 
		"'CLUSTER'", "'COLUMN'", "'COMMENT'", "'COMPRESS'", "'CONNECT'", "'CREATE'", 
		"'CURRENT'", "'DATE'", "'DECIMAL'", "'DEFAULT'", "'DELETE'", "'DESC'", 
		"'DISTINCT'", "'DROP'", "'ELSE'", "'EXCLUSIVE'", "'EXISTS'", "'FALSE'", 
		"'FILE'", "'FLOAT'", "'FOR'", "'FROM'", "'GRANT'", "'GROUP'", "'HAVING'", 
		"'IDENTIFIED'", "'IMMEDIATE'", "'IN'", "'INCREMENT'", "'INDEX'", "'INITIAL'", 
		"'INSERT'", "'INTEGER'", "'INTERSECT'", "'INTO'", "'IS'", "'LEVEL'", "'LIKE'", 
		"'LOCK'", "'LONG'", "'MAXEXTENTS'", "'MINUS'", "'MODE'", "'MODIFY'", "'NOAUDIT'", 
		"'NOCOMPRESS'", "'NOT'", "'NOTFOUND'", "'NOWAIT'", "'NULL'", "'NUMBER'", 
		"'OF'", "'OFFLINE'", "'ON'", "'ONLINE'", "'OPTION'", "'OR'", "'ORDER'", 
		"'PCTFREE'", "'PRIOR'", "'PRIVILEGES'", "'PUBLIC'", "'RAW'", "'RENAME'", 
		"'RESOURCE'", "'REVOKE'", "'ROW'", "'ROWID'", "'ROWLABEL'", "'ROWNUM'", 
		"'ROWS'", "'SELECT'", "'SESSION'", "'SET'", "'SHARE'", "'SIZE'", "'SMALLINT'", 
		"'SQLBUF'", "'START'", "'SUCCESSFUL'", "'SYNONYM'", "'SYSDATE'", "'TABLE'", 
		"'THEN'", "'TO'", "'TRIGGER'", "'TRUE'", "'UID'", "'UNION'", "'UNIQUE'", 
		"'UPDATE'", "'USER'", "'VALIDATE'", "'VALUES'", "'VARCHAR'", "'VARCHAR2'", 
		"'VIEW'", "'WHENEVER'", "'WHERE'", "'WITH'", "'AT'", "'CAST'", "'CLUSTER_SET'", 
		"'CONNECT_BY_ROOT'", "'COUNT'", "'CUBE'", "'CURSOR'", "'CYCLE'", "'DIMENSION'", 
		"'END'", "'ESCAPE'", "'EXTRACT'", "'FIRST'", "'FOLLOWING'", "'FULL'", 
		"'GROUPING'", "'IGNORE'", "'INFINITE'", "'INTERVAL'", "'JOIN'", "'LAST'", 
		"'LEFT'", "'LIKE2'", "'LIKE4'", "'LIKEC'", "'MAIN'", "'MEMBER'", "'MODEL'", 
		"'MULTISET'", "'NAN'", "'NAV'", "'NULLS'", "'OUTER'", "'PARTITION'", "'PIVOT'", 
		"'PRECEDING'", "'RANGE'", "'REFERENCE'", "'RESPECT'", "'RETURN'", "'RETURNING'", 
		"'RIGHT'", "'ROLLUP'", "'SEARCH'", "'SETS'", "'SOME'", "'SQL'", "'SUBMULTISET'", 
		"'THE'", "'TIMESTAMP'", "'UNBOUNDED'", "'UNPIVOT'", "'USING'", "'VERSIONS'", 
		"'WHEN'", "'!'", "'^'", "'t_unknown'", "'t_reserved'", "'t_table_alias'", 
		"'t_column_alias'", "'t_column_name'", "'t_table_name'", "'t_schema_name'", 
		"'t_function_name'", "'t_package_name'", "'t_dblink_name'", "'t_bindvar_name'", 
		"'t_decl'", "'t_use'", "'t_with'", "'t_select'", "'t_subquery'", "'t_table_cast'", 
		"'t_column_list'", "'t_select_column'", "'t_from'", "'t_where'", "'t_hierarchical'", 
		"'t_group_by'", "'t_model'", "'t_union'", "'t_order_by'", "'t_for_update'", 
		"'t_operator_unary'", "'t_operator_binary'", "'t_operator_part'", "'t_cond_or'", 
		"'t_cond_or_seq'", "'t_cond_and'", "'t_cond_and_seq'", "'t_cond_not'", 
		"'t_cond_exists'", "'t_cond_is'", "'t_cond_comparison'", "'t_cond_group_comparison'", 
		"'t_cond_in'", "'t_cond_is_a_set'", "'t_cond_is_any'", "'t_cond_is_empty'", 
		"'t_cond_is_of_type'", "'t_cond_is_present'", "'t_cond_like'", "'t_cond_memeber'", 
		"'t_cond_between'", "'t_cond_regexp_like'", "'t_cond_submultiset'", "'t_cond_equals_path'", 
		"'t_cond_under_path'", "'t_cond_paren'", null, null, null, null, "';'", 
		"':'", null, null, "','", "'*'", "'@'", "')'", "'('", "']'", "'['", "'+'", 
		"'-'", "'/'", "'='", "'%'", "'<<'", "'>>'", "':='", "'=>'", "'|'", "'||'", 
		null, "'<'", "'<='", "'>'", "'>='", null, "'''", null, null, null, "'%TYPE'", 
		"'%ROWTYPE'", "'%NOTFOUND'", "'%FOUND'", "'%ISOPEN'", "'%ROWCOUNT'", "'%BULK_ROWCOUNT'", 
		"'%CHARSET'", "'@!'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "T_UNKNOWN", "T_RESERVED", "T_TABLE_ALIAS", 
		"T_COLUMN_ALIAS", "T_COLUMN_NAME", "T_TABLE_NAME", "T_SCHEMA_NAME", "T_FUNCTION_NAME", 
		"T_PACKAGE_NAME", "T_DBLINK_NAME", "T_BINDVAR_NAME", "T_DECL", "T_USE", 
		"T_WITH", "T_SELECT", "T_SUBQUERY", "T_TABLE_CAST", "T_COLUMN_LIST", "T_SELECT_COLUMN", 
		"T_FROM", "T_WHERE", "T_HIERARCHICAL", "T_GROUP_BY", "T_MODEL", "T_UNION", 
		"T_ORDER_BY_CLAUSE", "T_FOR_UPDATE_CLAUSE", "T_OPERATOR_UNARY", "T_OPERATOR_BINARY", 
		"T_OPERATOR_PART", "T_COND_OR", "T_COND_OR_SEQ", "T_COND_AND", "T_COND_AND_SEQ", 
		"T_COND_NOT", "T_COND_EXISTS", "T_COND_IS", "T_COND_COMPARISON", "T_COND_GROUP_COMPARISON", 
		"T_COND_IN", "T_COND_IS_A_SET", "T_COND_IS_ANY", "T_COND_IS_EMPTY", "T_COND_IS_OF_TYPE", 
		"T_COND_IS_PRESENT", "T_COND_LIKE", "T_COND_MEMEBER", "T_COND_BETWEEN", 
		"T_COND_REGEXP_LIKE", "T_COND_SUBMULTISET", "T_COND_EQUALS_PATH", "T_COND_UNDER_PATH", 
		"T_COND_PAREN", "QUOTED_STRING", "QSTRING", "BINDVAR", "ID", "SEMI", "COLON", 
		"DOUBLEDOT", "DOT", "COMMA", "ASTERISK", "AT_SIGN", "RPAREN", "LPAREN", 
		"RBRACK", "LBRACK", "PLUS", "MINUS", "DIVIDE", "EQ", "PERCENTAGE", "LLABEL", 
		"RLABEL", "ASSIGN", "ARROW", "VERTBAR", "DOUBLEVERTBAR", "NOT_EQ", "LTH", 
		"LEQ", "GTH", "GEQ", "NUMBER", "QUOTE", "WS", "SL_COMMENT", "ML_COMMENT", 
		"TYPE_ATTR", "ROWTYPE_ATTR", "NOTFOUND_ATTR", "FOUND_ATTR", "ISOPEN_ATTR", 
		"ROWCOUNT_ATTR", "BULK_ROWCOUNT_ATTR", "CHARSET_ATTR", "ZV"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "OracleSQL.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }




	public OracleSQLParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class Start_ruleContext extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(OracleSQLParser.SEMI, 0); }
		public TerminalNode EOF() { return getToken(OracleSQLParser.EOF, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Start_ruleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_rule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterStart_rule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitStart_rule(this);
		}
	}

	public final Start_ruleContext start_rule() throws RecognitionException {
		Start_ruleContext _localctx = new Start_ruleContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_start_rule);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(949);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				setState(944);
				select_statement();
				}
				break;
			case 2:
				{
				setState(945);
				update_statement();
				}
				break;
			case 3:
				{
				setState(946);
				insert_statement();
				}
				break;
			case 4:
				{
				setState(947);
				merge_statement();
				}
				break;
			case 5:
				{
				setState(948);
				delete_statement();
				}
				break;
			}
			setState(951);
			_la = _input.LA(1);
			if ( !(_la==EOF || _la==SEMI) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statementContext extends ParserRuleContext {
		public R_deleteContext r_delete() {
			return getRuleContext(R_deleteContext.class,0);
		}
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public K_onlyContext k_only() {
			return getRuleContext(K_onlyContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public R_fromContext r_from() {
			return getRuleContext(R_fromContext.class,0);
		}
		public T_aliasContext t_alias() {
			return getRuleContext(T_aliasContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterDelete_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitDelete_statement(this);
		}
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_delete_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(953);
			r_delete();
			setState(955);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				setState(954);
				r_from();
				}
				break;
			}
			setState(963);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				setState(957);
				dml_table_expression_clause();
				}
				break;
			case 2:
				{
				setState(958);
				k_only();
				setState(959);
				match(LPAREN);
				setState(960);
				dml_table_expression_clause();
				setState(961);
				match(RPAREN);
				}
				break;
			}
			setState(966);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				setState(965);
				t_alias(T_DECL);
				}
				break;
			}
			setState(969);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				setState(968);
				where_clause();
				}
				break;
			}
			setState(972);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				setState(971);
				returning_clause();
				}
				break;
			}
			setState(975);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				setState(974);
				error_logging_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_statementContext extends ParserRuleContext {
		public K_mergeContext k_merge() {
			return getRuleContext(K_mergeContext.class,0);
		}
		public R_intoContext r_into() {
			return getRuleContext(R_intoContext.class,0);
		}
		public List<Table_nameContext> table_name() {
			return getRuleContexts(Table_nameContext.class);
		}
		public Table_nameContext table_name(int i) {
			return getRuleContext(Table_nameContext.class,i);
		}
		public K_usingContext k_using() {
			return getRuleContext(K_usingContext.class,0);
		}
		public R_onContext r_on() {
			return getRuleContext(R_onContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public Sql_conditionContext sql_condition() {
			return getRuleContext(Sql_conditionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<Schema_nameContext> schema_name() {
			return getRuleContexts(Schema_nameContext.class);
		}
		public Schema_nameContext schema_name(int i) {
			return getRuleContext(Schema_nameContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(OracleSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(OracleSQLParser.DOT, i);
		}
		public List<T_aliasContext> t_alias() {
			return getRuleContexts(T_aliasContext.class);
		}
		public T_aliasContext t_alias(int i) {
			return getRuleContext(T_aliasContext.class,i);
		}
		public Merge_update_clauseContext merge_update_clause() {
			return getRuleContext(Merge_update_clauseContext.class,0);
		}
		public Merge_insert_clauseContext merge_insert_clause() {
			return getRuleContext(Merge_insert_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterMerge_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitMerge_statement(this);
		}
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_merge_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(977);
			k_merge();
			setState(978);
			r_into();
			setState(982);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				setState(979);
				schema_name();
				setState(980);
				match(DOT);
				}
				break;
			}
			setState(984);
			table_name();
			setState(986);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__12 || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (T__82 - 83)) | (1L << (T__84 - 83)) | (1L << (T__115 - 83)) | (1L << (T__119 - 83)) | (1L << (T__120 - 83)) | (1L << (T__122 - 83)) | (1L << (T__125 - 83)) | (1L << (T__126 - 83)) | (1L << (T__127 - 83)) | (1L << (T__130 - 83)) | (1L << (T__132 - 83)) | (1L << (T__133 - 83)) | (1L << (T__135 - 83)) | (1L << (T__137 - 83)) | (1L << (T__138 - 83)) | (1L << (T__139 - 83)) | (1L << (T__141 - 83)) | (1L << (T__144 - 83)))) != 0) || ((((_la - 147)) & ~0x3f) == 0 && ((1L << (_la - 147)) & ((1L << (T__146 - 147)) | (1L << (T__147 - 147)) | (1L << (T__149 - 147)) | (1L << (T__152 - 147)) | (1L << (T__154 - 147)) | (1L << (T__157 - 147)) | (1L << (T__158 - 147)) | (1L << (T__161 - 147)) | (1L << (T__164 - 147)) | (1L << (T__166 - 147)) | (1L << (T__169 - 147)))) != 0) || _la==ID) {
				{
				setState(985);
				t_alias(T_DECL);
				}
			}

			setState(988);
			k_using();
			setState(996);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LPAREN:
				{
				setState(989);
				subquery();
				}
				break;
			case T__12:
			case T__82:
			case T__84:
			case T__115:
			case T__119:
			case T__120:
			case T__122:
			case T__125:
			case T__126:
			case T__127:
			case T__130:
			case T__132:
			case T__133:
			case T__135:
			case T__137:
			case T__138:
			case T__139:
			case T__141:
			case T__144:
			case T__146:
			case T__147:
			case T__149:
			case T__152:
			case T__154:
			case T__157:
			case T__158:
			case T__161:
			case T__164:
			case T__166:
			case T__169:
			case ID:
				{
				setState(993);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
				case 1:
					{
					setState(990);
					schema_name();
					setState(991);
					match(DOT);
					}
					break;
				}
				setState(995);
				table_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(999);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__12 || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (T__82 - 83)) | (1L << (T__84 - 83)) | (1L << (T__115 - 83)) | (1L << (T__119 - 83)) | (1L << (T__120 - 83)) | (1L << (T__122 - 83)) | (1L << (T__125 - 83)) | (1L << (T__126 - 83)) | (1L << (T__127 - 83)) | (1L << (T__130 - 83)) | (1L << (T__132 - 83)) | (1L << (T__133 - 83)) | (1L << (T__135 - 83)) | (1L << (T__137 - 83)) | (1L << (T__138 - 83)) | (1L << (T__139 - 83)) | (1L << (T__141 - 83)) | (1L << (T__144 - 83)))) != 0) || ((((_la - 147)) & ~0x3f) == 0 && ((1L << (_la - 147)) & ((1L << (T__146 - 147)) | (1L << (T__147 - 147)) | (1L << (T__149 - 147)) | (1L << (T__152 - 147)) | (1L << (T__154 - 147)) | (1L << (T__157 - 147)) | (1L << (T__158 - 147)) | (1L << (T__161 - 147)) | (1L << (T__164 - 147)) | (1L << (T__166 - 147)) | (1L << (T__169 - 147)))) != 0) || _la==ID) {
				{
				setState(998);
				t_alias(T_DECL);
				}
			}

			setState(1001);
			r_on();
			setState(1002);
			match(LPAREN);
			setState(1003);
			sql_condition();
			setState(1004);
			match(RPAREN);
			setState(1013);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				setState(1005);
				merge_update_clause();
				setState(1007);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
				case 1:
					{
					setState(1006);
					merge_insert_clause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(1009);
				merge_insert_clause();
				setState(1011);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
				case 1:
					{
					setState(1010);
					merge_update_clause();
					}
					break;
				}
				}
				break;
			}
			setState(1016);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
			case 1:
				{
				setState(1015);
				error_logging_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_update_clauseContext extends ParserRuleContext {
		public K_whenContext k_when() {
			return getRuleContext(K_whenContext.class,0);
		}
		public K_matchedContext k_matched() {
			return getRuleContext(K_matchedContext.class,0);
		}
		public R_thenContext r_then() {
			return getRuleContext(R_thenContext.class,0);
		}
		public R_updateContext r_update() {
			return getRuleContext(R_updateContext.class,0);
		}
		public R_setContext r_set() {
			return getRuleContext(R_setContext.class,0);
		}
		public List<Column_specContext> column_spec() {
			return getRuleContexts(Column_specContext.class);
		}
		public Column_specContext column_spec(int i) {
			return getRuleContext(Column_specContext.class,i);
		}
		public List<TerminalNode> EQ() { return getTokens(OracleSQLParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(OracleSQLParser.EQ, i);
		}
		public List<R_defaultContext> r_default() {
			return getRuleContexts(R_defaultContext.class);
		}
		public R_defaultContext r_default(int i) {
			return getRuleContext(R_defaultContext.class,i);
		}
		public List<Sql_expressionContext> sql_expression() {
			return getRuleContexts(Sql_expressionContext.class);
		}
		public Sql_expressionContext sql_expression(int i) {
			return getRuleContext(Sql_expressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public List<Where_clauseContext> where_clause() {
			return getRuleContexts(Where_clauseContext.class);
		}
		public Where_clauseContext where_clause(int i) {
			return getRuleContext(Where_clauseContext.class,i);
		}
		public R_deleteContext r_delete() {
			return getRuleContext(R_deleteContext.class,0);
		}
		public Merge_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterMerge_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitMerge_update_clause(this);
		}
	}

	public final Merge_update_clauseContext merge_update_clause() throws RecognitionException {
		Merge_update_clauseContext _localctx = new Merge_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_merge_update_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1018);
			k_when();
			setState(1019);
			k_matched();
			setState(1020);
			r_then();
			setState(1021);
			r_update();
			setState(1022);
			r_set();
			setState(1023);
			column_spec();
			setState(1024);
			match(EQ);
			setState(1027);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				setState(1025);
				r_default();
				}
				break;
			case 2:
				{
				setState(1026);
				sql_expression();
				}
				break;
			}
			setState(1038);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,18,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1029);
					match(COMMA);
					setState(1030);
					column_spec();
					setState(1031);
					match(EQ);
					setState(1034);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
					case 1:
						{
						setState(1032);
						r_default();
						}
						break;
					case 2:
						{
						setState(1033);
						sql_expression();
						}
						break;
					}
					}
					} 
				}
				setState(1040);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,18,_ctx);
			}
			setState(1042);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
			case 1:
				{
				setState(1041);
				where_clause();
				}
				break;
			}
			setState(1047);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {
			case 1:
				{
				setState(1044);
				r_delete();
				setState(1045);
				where_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_insert_clauseContext extends ParserRuleContext {
		public K_whenContext k_when() {
			return getRuleContext(K_whenContext.class,0);
		}
		public R_notContext r_not() {
			return getRuleContext(R_notContext.class,0);
		}
		public K_matchedContext k_matched() {
			return getRuleContext(K_matchedContext.class,0);
		}
		public R_thenContext r_then() {
			return getRuleContext(R_thenContext.class,0);
		}
		public R_insertContext r_insert() {
			return getRuleContext(R_insertContext.class,0);
		}
		public R_valuesContext r_values() {
			return getRuleContext(R_valuesContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(OracleSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(OracleSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(OracleSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(OracleSQLParser.RPAREN, i);
		}
		public List<R_defaultContext> r_default() {
			return getRuleContexts(R_defaultContext.class);
		}
		public R_defaultContext r_default(int i) {
			return getRuleContext(R_defaultContext.class,i);
		}
		public List<Sql_expressionContext> sql_expression() {
			return getRuleContexts(Sql_expressionContext.class);
		}
		public Sql_expressionContext sql_expression(int i) {
			return getRuleContext(Sql_expressionContext.class,i);
		}
		public Column_specsContext column_specs() {
			return getRuleContext(Column_specsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterMerge_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitMerge_insert_clause(this);
		}
	}

	public final Merge_insert_clauseContext merge_insert_clause() throws RecognitionException {
		Merge_insert_clauseContext _localctx = new Merge_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_merge_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1049);
			k_when();
			setState(1050);
			r_not();
			setState(1051);
			k_matched();
			setState(1052);
			r_then();
			setState(1053);
			r_insert();
			setState(1058);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LPAREN) {
				{
				setState(1054);
				match(LPAREN);
				setState(1055);
				column_specs();
				setState(1056);
				match(RPAREN);
				}
			}

			setState(1060);
			r_values();
			setState(1061);
			match(LPAREN);
			setState(1064);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				setState(1062);
				r_default();
				}
				break;
			case 2:
				{
				setState(1063);
				sql_expression();
				}
				break;
			}
			setState(1073);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1066);
				match(COMMA);
				setState(1069);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
				case 1:
					{
					setState(1067);
					r_default();
					}
					break;
				case 2:
					{
					setState(1068);
					sql_expression();
					}
					break;
				}
				}
				}
				setState(1075);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1076);
			match(RPAREN);
			setState(1078);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				setState(1077);
				where_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statementContext extends ParserRuleContext {
		public R_insertContext r_insert() {
			return getRuleContext(R_insertContext.class,0);
		}
		public Single_table_insertContext single_table_insert() {
			return getRuleContext(Single_table_insertContext.class,0);
		}
		public Multi_table_insertContext multi_table_insert() {
			return getRuleContext(Multi_table_insertContext.class,0);
		}
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitInsert_statement(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_insert_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1080);
			r_insert();
			setState(1083);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__49:
				{
				setState(1081);
				single_table_insert();
				}
				break;
			case T__2:
			case T__127:
			case T__169:
				{
				setState(1082);
				multi_table_insert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_table_insertContext extends ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public Single_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterSingle_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitSingle_table_insert(this);
		}
	}

	public final Single_table_insertContext single_table_insert() throws RecognitionException {
		Single_table_insertContext _localctx = new Single_table_insertContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_single_table_insert);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1085);
			insert_into_clause();
			setState(1092);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
			case 1:
				{
				setState(1086);
				values_clause();
				setState(1088);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
				case 1:
					{
					setState(1087);
					returning_clause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(1090);
				select_statement();
				}
				break;
			case 3:
				{
				setState(1091);
				subquery();
				}
				break;
			}
			setState(1095);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				setState(1094);
				error_logging_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_into_clauseContext extends ParserRuleContext {
		public R_intoContext r_into() {
			return getRuleContext(R_intoContext.class,0);
		}
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public T_aliasContext t_alias() {
			return getRuleContext(T_aliasContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public Column_specsContext column_specs() {
			return getRuleContext(Column_specsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public Insert_into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterInsert_into_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitInsert_into_clause(this);
		}
	}

	public final Insert_into_clauseContext insert_into_clause() throws RecognitionException {
		Insert_into_clauseContext _localctx = new Insert_into_clauseContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_insert_into_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1097);
			r_into();
			setState(1098);
			dml_table_expression_clause();
			setState(1100);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				setState(1099);
				t_alias(T_DECL);
				}
				break;
			}
			setState(1106);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				setState(1102);
				match(LPAREN);
				setState(1103);
				column_specs();
				setState(1104);
				match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Values_clauseContext extends ParserRuleContext {
		public R_valuesContext r_values() {
			return getRuleContext(R_valuesContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public List<R_defaultContext> r_default() {
			return getRuleContexts(R_defaultContext.class);
		}
		public R_defaultContext r_default(int i) {
			return getRuleContext(R_defaultContext.class,i);
		}
		public List<Sql_expressionContext> sql_expression() {
			return getRuleContexts(Sql_expressionContext.class);
		}
		public Sql_expressionContext sql_expression(int i) {
			return getRuleContext(Sql_expressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public Values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterValues_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitValues_clause(this);
		}
	}

	public final Values_clauseContext values_clause() throws RecognitionException {
		Values_clauseContext _localctx = new Values_clauseContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_values_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1108);
			r_values();
			setState(1109);
			match(LPAREN);
			setState(1112);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				setState(1110);
				r_default();
				}
				break;
			case 2:
				{
				setState(1111);
				sql_expression();
				}
				break;
			}
			setState(1121);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1114);
				match(COMMA);
				setState(1117);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
				case 1:
					{
					setState(1115);
					r_default();
					}
					break;
				case 2:
					{
					setState(1116);
					sql_expression();
					}
					break;
				}
				}
				}
				setState(1123);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1124);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Returning_clauseContext extends ParserRuleContext {
		public List<Sql_expressionContext> sql_expression() {
			return getRuleContexts(Sql_expressionContext.class);
		}
		public Sql_expressionContext sql_expression(int i) {
			return getRuleContext(Sql_expressionContext.class,i);
		}
		public R_intoContext r_into() {
			return getRuleContext(R_intoContext.class,0);
		}
		public List<Data_itemContext> data_item() {
			return getRuleContexts(Data_itemContext.class);
		}
		public Data_itemContext data_item(int i) {
			return getRuleContext(Data_itemContext.class,i);
		}
		public K_returnContext k_return() {
			return getRuleContext(K_returnContext.class,0);
		}
		public K_returningContext k_returning() {
			return getRuleContext(K_returningContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public Returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterReturning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitReturning_clause(this);
		}
	}

	public final Returning_clauseContext returning_clause() throws RecognitionException {
		Returning_clauseContext _localctx = new Returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_returning_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1128);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__154:
				{
				setState(1126);
				k_return();
				}
				break;
			case T__155:
				{
				setState(1127);
				k_returning();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1130);
			sql_expression();
			setState(1135);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1131);
				match(COMMA);
				setState(1132);
				sql_expression();
				}
				}
				setState(1137);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1138);
			r_into();
			setState(1139);
			data_item();
			setState(1144);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,37,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1140);
					match(COMMA);
					setState(1141);
					data_item();
					}
					} 
				}
				setState(1146);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,37,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_table_insertContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public R_allContext r_all() {
			return getRuleContext(R_allContext.class,0);
		}
		public Conditional_insert_clauseContext conditional_insert_clause() {
			return getRuleContext(Conditional_insert_clauseContext.class,0);
		}
		public List<Insert_into_clauseContext> insert_into_clause() {
			return getRuleContexts(Insert_into_clauseContext.class);
		}
		public Insert_into_clauseContext insert_into_clause(int i) {
			return getRuleContext(Insert_into_clauseContext.class,i);
		}
		public List<Values_clauseContext> values_clause() {
			return getRuleContexts(Values_clauseContext.class);
		}
		public Values_clauseContext values_clause(int i) {
			return getRuleContext(Values_clauseContext.class,i);
		}
		public List<Error_logging_clauseContext> error_logging_clause() {
			return getRuleContexts(Error_logging_clauseContext.class);
		}
		public Error_logging_clauseContext error_logging_clause(int i) {
			return getRuleContext(Error_logging_clauseContext.class,i);
		}
		public Multi_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterMulti_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitMulti_table_insert(this);
		}
	}

	public final Multi_table_insertContext multi_table_insert() throws RecognitionException {
		Multi_table_insertContext _localctx = new Multi_table_insertContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_multi_table_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1160);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
			case 1:
				{
				setState(1147);
				r_all();
				setState(1155); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1148);
					insert_into_clause();
					setState(1150);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
					case 1:
						{
						setState(1149);
						values_clause();
						}
						break;
					}
					setState(1153);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
					case 1:
						{
						setState(1152);
						error_logging_clause();
						}
						break;
					}
					}
					}
					setState(1157); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==T__49 );
				}
				break;
			case 2:
				{
				setState(1159);
				conditional_insert_clause();
				}
				break;
			}
			setState(1162);
			subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_clauseContext extends ParserRuleContext {
		public R_elseContext r_else() {
			return getRuleContext(R_elseContext.class,0);
		}
		public R_allContext r_all() {
			return getRuleContext(R_allContext.class,0);
		}
		public K_firstContext k_first() {
			return getRuleContext(K_firstContext.class,0);
		}
		public List<K_whenContext> k_when() {
			return getRuleContexts(K_whenContext.class);
		}
		public K_whenContext k_when(int i) {
			return getRuleContext(K_whenContext.class,i);
		}
		public List<Sql_conditionContext> sql_condition() {
			return getRuleContexts(Sql_conditionContext.class);
		}
		public Sql_conditionContext sql_condition(int i) {
			return getRuleContext(Sql_conditionContext.class,i);
		}
		public List<R_thenContext> r_then() {
			return getRuleContexts(R_thenContext.class);
		}
		public R_thenContext r_then(int i) {
			return getRuleContext(R_thenContext.class,i);
		}
		public List<Insert_into_clauseContext> insert_into_clause() {
			return getRuleContexts(Insert_into_clauseContext.class);
		}
		public Insert_into_clauseContext insert_into_clause(int i) {
			return getRuleContext(Insert_into_clauseContext.class,i);
		}
		public List<Values_clauseContext> values_clause() {
			return getRuleContexts(Values_clauseContext.class);
		}
		public Values_clauseContext values_clause(int i) {
			return getRuleContext(Values_clauseContext.class,i);
		}
		public Conditional_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterConditional_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitConditional_insert_clause(this);
		}
	}

	public final Conditional_insert_clauseContext conditional_insert_clause() throws RecognitionException {
		Conditional_insert_clauseContext _localctx = new Conditional_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_conditional_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1166);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__2:
				{
				setState(1164);
				r_all();
				}
				break;
			case T__127:
				{
				setState(1165);
				k_first();
				}
				break;
			case T__169:
				break;
			default:
				break;
			}
			setState(1179); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1168);
				k_when();
				setState(1169);
				sql_condition();
				setState(1170);
				r_then();
				setState(1175); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1171);
					insert_into_clause();
					setState(1173);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==T__108) {
						{
						setState(1172);
						values_clause();
						}
					}

					}
					}
					setState(1177); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==T__49 );
				}
				}
				setState(1181); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==T__169 );
			setState(1183);
			r_else();
			setState(1188); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1184);
				insert_into_clause();
				setState(1186);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__108) {
					{
					setState(1185);
					values_clause();
					}
				}

				}
				}
				setState(1190); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==T__49 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_table_expression_clauseContext extends ParserRuleContext {
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(OracleSQLParser.DOT, 0); }
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public TerminalNode AT_SIGN() { return getToken(OracleSQLParser.AT_SIGN, 0); }
		public Dblink_nameContext dblink_name() {
			return getRuleContext(Dblink_nameContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Subquery_restricrion_clauseContext subquery_restricrion_clause() {
			return getRuleContext(Subquery_restricrion_clauseContext.class,0);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public Table_collection_clauseContext table_collection_clause() {
			return getRuleContext(Table_collection_clauseContext.class,0);
		}
		public Dml_table_expression_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_table_expression_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterDml_table_expression_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitDml_table_expression_clause(this);
		}
	}

	public final Dml_table_expression_clauseContext dml_table_expression_clause() throws RecognitionException {
		Dml_table_expression_clauseContext _localctx = new Dml_table_expression_clauseContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_dml_table_expression_clause);
		int _la;
		try {
			setState(1219);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1195);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
				case 1:
					{
					setState(1192);
					schema_name();
					setState(1193);
					match(DOT);
					}
					break;
				}
				setState(1197);
				table_name();
				setState(1201);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
				case 1:
					{
					setState(1198);
					partition_extension_clause();
					}
					break;
				case 2:
					{
					setState(1199);
					match(AT_SIGN);
					setState(1200);
					dblink_name();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1203);
				subquery();
				setState(1205);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
				case 1:
					{
					setState(1204);
					subquery_restricrion_clause();
					}
					break;
				}
				setState(1209);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,51,_ctx) ) {
				case 1:
					{
					setState(1207);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(1208);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1211);
				match(LPAREN);
				setState(1212);
				subquery();
				setState(1214);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__114) {
					{
					setState(1213);
					subquery_restricrion_clause();
					}
				}

				setState(1216);
				match(RPAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1218);
				table_collection_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_clauseContext extends ParserRuleContext {
		public K_logContext k_log() {
			return getRuleContext(K_logContext.class,0);
		}
		public K_errorsContext k_errors() {
			return getRuleContext(K_errorsContext.class,0);
		}
		public R_intoContext r_into() {
			return getRuleContext(R_intoContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public Simple_expressionContext simple_expression() {
			return getRuleContext(Simple_expressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public K_rejectContext k_reject() {
			return getRuleContext(K_rejectContext.class,0);
		}
		public K_limitContext k_limit() {
			return getRuleContext(K_limitContext.class,0);
		}
		public TerminalNode NUMBER() { return getToken(OracleSQLParser.NUMBER, 0); }
		public K_unlimitedContext k_unlimited() {
			return getRuleContext(K_unlimitedContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(OracleSQLParser.DOT, 0); }
		public Error_logging_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterError_logging_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitError_logging_clause(this);
		}
	}

	public final Error_logging_clauseContext error_logging_clause() throws RecognitionException {
		Error_logging_clauseContext _localctx = new Error_logging_clauseContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_error_logging_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1221);
			k_log();
			setState(1222);
			k_errors();
			setState(1231);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
			case 1:
				{
				setState(1223);
				r_into();
				setState(1227);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
				case 1:
					{
					setState(1224);
					schema_name();
					setState(1225);
					match(DOT);
					}
					break;
				}
				setState(1229);
				table_name();
				}
				break;
			}
			setState(1237);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,56,_ctx) ) {
			case 1:
				{
				setState(1233);
				match(LPAREN);
				setState(1234);
				simple_expression();
				setState(1235);
				match(RPAREN);
				}
				break;
			}
			setState(1245);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
			case 1:
				{
				setState(1239);
				k_reject();
				setState(1240);
				k_limit();
				setState(1243);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
				case 1:
					{
					setState(1241);
					match(NUMBER);
					}
					break;
				case 2:
					{
					setState(1242);
					k_unlimited();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_itemContext extends ParserRuleContext {
		public Sql_identifierContext sql_identifier() {
			return getRuleContext(Sql_identifierContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Data_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterData_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitData_item(this);
		}
	}

	public final Data_itemContext data_item() throws RecognitionException {
		Data_itemContext _localctx = new Data_itemContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_data_item);
		try {
			setState(1249);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__12:
			case T__82:
			case T__84:
			case T__115:
			case T__119:
			case T__120:
			case T__122:
			case T__125:
			case T__126:
			case T__127:
			case T__130:
			case T__132:
			case T__133:
			case T__135:
			case T__137:
			case T__138:
			case T__139:
			case T__141:
			case T__144:
			case T__146:
			case T__147:
			case T__149:
			case T__152:
			case T__154:
			case T__157:
			case T__158:
			case T__161:
			case T__164:
			case T__166:
			case T__169:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1247);
				sql_identifier(T_UNKNOWN,0);
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(1248);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statementContext extends ParserRuleContext {
		public R_updateContext r_update() {
			return getRuleContext(R_updateContext.class,0);
		}
		public Update_set_clauseContext update_set_clause() {
			return getRuleContext(Update_set_clauseContext.class,0);
		}
		public K_onlyContext k_only() {
			return getRuleContext(K_onlyContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public T_aliasContext t_alias() {
			return getRuleContext(T_aliasContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterUpdate_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitUpdate_statement(this);
		}
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1251);
			r_update();
			setState(1258);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
			case 1:
				{
				setState(1252);
				k_only();
				setState(1253);
				match(LPAREN);
				setState(1254);
				dml_table_expression_clause();
				setState(1255);
				match(RPAREN);
				}
				break;
			case 2:
				{
				setState(1257);
				dml_table_expression_clause();
				}
				break;
			}
			setState(1261);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__12 || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (T__82 - 83)) | (1L << (T__84 - 83)) | (1L << (T__115 - 83)) | (1L << (T__119 - 83)) | (1L << (T__120 - 83)) | (1L << (T__122 - 83)) | (1L << (T__125 - 83)) | (1L << (T__126 - 83)) | (1L << (T__127 - 83)) | (1L << (T__130 - 83)) | (1L << (T__132 - 83)) | (1L << (T__133 - 83)) | (1L << (T__135 - 83)) | (1L << (T__137 - 83)) | (1L << (T__138 - 83)) | (1L << (T__139 - 83)) | (1L << (T__141 - 83)) | (1L << (T__144 - 83)))) != 0) || ((((_la - 147)) & ~0x3f) == 0 && ((1L << (_la - 147)) & ((1L << (T__146 - 147)) | (1L << (T__147 - 147)) | (1L << (T__149 - 147)) | (1L << (T__152 - 147)) | (1L << (T__154 - 147)) | (1L << (T__157 - 147)) | (1L << (T__158 - 147)) | (1L << (T__161 - 147)) | (1L << (T__164 - 147)) | (1L << (T__166 - 147)) | (1L << (T__169 - 147)))) != 0) || _la==ID) {
				{
				setState(1260);
				t_alias(T_DECL);
				}
			}

			setState(1263);
			update_set_clause();
			setState(1265);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,62,_ctx) ) {
			case 1:
				{
				setState(1264);
				where_clause();
				}
				break;
			}
			setState(1268);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
			case 1:
				{
				setState(1267);
				returning_clause();
				}
				break;
			}
			setState(1271);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,64,_ctx) ) {
			case 1:
				{
				setState(1270);
				error_logging_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_set_clauseContext extends ParserRuleContext {
		public R_setContext r_set() {
			return getRuleContext(R_setContext.class,0);
		}
		public K_valueContext k_value() {
			return getRuleContext(K_valueContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public T_aliasContext t_alias() {
			return getRuleContext(T_aliasContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public TerminalNode EQ() { return getToken(OracleSQLParser.EQ, 0); }
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<Update_set_clause_part1Context> update_set_clause_part1() {
			return getRuleContexts(Update_set_clause_part1Context.class);
		}
		public Update_set_clause_part1Context update_set_clause_part1(int i) {
			return getRuleContext(Update_set_clause_part1Context.class,i);
		}
		public List<Update_set_clause_part2Context> update_set_clause_part2() {
			return getRuleContexts(Update_set_clause_part2Context.class);
		}
		public Update_set_clause_part2Context update_set_clause_part2(int i) {
			return getRuleContext(Update_set_clause_part2Context.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public Update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterUpdate_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitUpdate_set_clause(this);
		}
	}

	public final Update_set_clauseContext update_set_clause() throws RecognitionException {
		Update_set_clauseContext _localctx = new Update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_update_set_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1273);
			r_set();
			setState(1297);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,69,_ctx) ) {
			case 1:
				{
				setState(1274);
				k_value();
				setState(1275);
				match(LPAREN);
				setState(1276);
				t_alias(T_DECL);
				setState(1277);
				match(RPAREN);
				setState(1278);
				match(EQ);
				setState(1281);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
				case 1:
					{
					setState(1279);
					sql_expression();
					}
					break;
				case 2:
					{
					setState(1280);
					subquery();
					}
					break;
				}
				}
				break;
			case 2:
				{
				{
				setState(1285);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LPAREN:
					{
					setState(1283);
					update_set_clause_part1();
					}
					break;
				case T__12:
				case T__51:
				case T__64:
				case T__82:
				case T__84:
				case T__96:
				case T__106:
				case T__115:
				case T__119:
				case T__120:
				case T__122:
				case T__125:
				case T__126:
				case T__127:
				case T__130:
				case T__132:
				case T__133:
				case T__135:
				case T__137:
				case T__138:
				case T__139:
				case T__141:
				case T__144:
				case T__146:
				case T__147:
				case T__149:
				case T__152:
				case T__154:
				case T__157:
				case T__158:
				case T__161:
				case T__164:
				case T__166:
				case T__169:
				case BINDVAR:
				case ID:
				case COLON:
					{
					setState(1284);
					update_set_clause_part2();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1294);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,68,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1287);
						match(COMMA);
						setState(1290);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case LPAREN:
							{
							setState(1288);
							update_set_clause_part1();
							}
							break;
						case T__12:
						case T__51:
						case T__64:
						case T__82:
						case T__84:
						case T__96:
						case T__106:
						case T__115:
						case T__119:
						case T__120:
						case T__122:
						case T__125:
						case T__126:
						case T__127:
						case T__130:
						case T__132:
						case T__133:
						case T__135:
						case T__137:
						case T__138:
						case T__139:
						case T__141:
						case T__144:
						case T__146:
						case T__147:
						case T__149:
						case T__152:
						case T__154:
						case T__157:
						case T__158:
						case T__161:
						case T__164:
						case T__166:
						case T__169:
						case BINDVAR:
						case ID:
						case COLON:
							{
							setState(1289);
							update_set_clause_part2();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						} 
					}
					setState(1296);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,68,_ctx);
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_set_clause_part1Context extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public Column_specsContext column_specs() {
			return getRuleContext(Column_specsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public TerminalNode EQ() { return getToken(OracleSQLParser.EQ, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Update_set_clause_part1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_set_clause_part1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterUpdate_set_clause_part1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitUpdate_set_clause_part1(this);
		}
	}

	public final Update_set_clause_part1Context update_set_clause_part1() throws RecognitionException {
		Update_set_clause_part1Context _localctx = new Update_set_clause_part1Context(_ctx, getState());
		enterRule(_localctx, 34, RULE_update_set_clause_part1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1299);
			match(LPAREN);
			setState(1300);
			column_specs();
			setState(1301);
			match(RPAREN);
			setState(1302);
			match(EQ);
			setState(1303);
			subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_set_clause_part2Context extends ParserRuleContext {
		public Column_specContext column_spec() {
			return getRuleContext(Column_specContext.class,0);
		}
		public TerminalNode EQ() { return getToken(OracleSQLParser.EQ, 0); }
		public R_defaultContext r_default() {
			return getRuleContext(R_defaultContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Update_set_clause_part2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_set_clause_part2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterUpdate_set_clause_part2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitUpdate_set_clause_part2(this);
		}
	}

	public final Update_set_clause_part2Context update_set_clause_part2() throws RecognitionException {
		Update_set_clause_part2Context _localctx = new Update_set_clause_part2Context(_ctx, getState());
		enterRule(_localctx, 36, RULE_update_set_clause_part2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1305);
			column_spec();
			setState(1306);
			match(EQ);
			setState(1310);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,70,_ctx) ) {
			case 1:
				{
				setState(1307);
				r_default();
				}
				break;
			case 2:
				{
				setState(1308);
				subquery();
				}
				break;
			case 3:
				{
				setState(1309);
				sql_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statementContext extends ParserRuleContext {
		public R_selectContext sel;
		public For_update_clauseContext fu1;
		public For_update_clauseContext fu2;
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Subquery_factoring_clauseContext subquery_factoring_clause() {
			return getRuleContext(Subquery_factoring_clauseContext.class,0);
		}
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public R_fromContext r_from() {
			return getRuleContext(R_fromContext.class,0);
		}
		public Table_reference_listContext table_reference_list() {
			return getRuleContext(Table_reference_listContext.class,0);
		}
		public R_selectContext r_select() {
			return getRuleContext(R_selectContext.class,0);
		}
		public R_distinctContext r_distinct() {
			return getRuleContext(R_distinctContext.class,0);
		}
		public R_uniqueContext r_unique() {
			return getRuleContext(R_uniqueContext.class,0);
		}
		public R_unionContext r_union() {
			return getRuleContext(R_unionContext.class,0);
		}
		public R_allContext r_all() {
			return getRuleContext(R_allContext.class,0);
		}
		public R_intoContext r_into() {
			return getRuleContext(R_intoContext.class,0);
		}
		public List<Data_itemContext> data_item() {
			return getRuleContexts(Data_itemContext.class);
		}
		public Data_itemContext data_item(int i) {
			return getRuleContext(Data_itemContext.class,i);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Hierarchical_query_clauseContext hierarchical_query_clause() {
			return getRuleContext(Hierarchical_query_clauseContext.class,0);
		}
		public Group_by_clauseContext group_by_clause() {
			return getRuleContext(Group_by_clauseContext.class,0);
		}
		public Model_clauseContext model_clause() {
			return getRuleContext(Model_clauseContext.class,0);
		}
		public List<Union_clauseContext> union_clause() {
			return getRuleContexts(Union_clauseContext.class);
		}
		public Union_clauseContext union_clause(int i) {
			return getRuleContext(Union_clauseContext.class,i);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public List<For_update_clauseContext> for_update_clause() {
			return getRuleContexts(For_update_clauseContext.class);
		}
		public For_update_clauseContext for_update_clause(int i) {
			return getRuleContext(For_update_clauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterSelect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitSelect_statement(this);
		}
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_select_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1313);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__114) {
				{
				setState(1312);
				subquery_factoring_clause();
				}
			}

			setState(1364);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__86:
				{
				{
				setState(1315);
				((Select_statementContext)_localctx).sel = r_select();
				setState(1320);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
				case 1:
					{
					setState(1316);
					r_distinct();
					}
					break;
				case 2:
					{
					setState(1317);
					r_unique();
					}
					break;
				case 3:
					{
					setState(1318);
					r_union();
					}
					break;
				case 4:
					{
					setState(1319);
					r_all();
					}
					break;
				}
				setState(1322);
				select_list();
				setState(1332);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__49) {
					{
					setState(1323);
					r_into();
					setState(1324);
					data_item();
					setState(1329);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1325);
						match(COMMA);
						setState(1326);
						data_item();
						}
						}
						setState(1331);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1334);
				r_from();
				setState(1335);
				table_reference_list();
				setState(1337);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
				case 1:
					{
					setState(1336);
					where_clause();
					}
					break;
				}
				setState(1340);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
				case 1:
					{
					setState(1339);
					hierarchical_query_clause();
					}
					break;
				}
				setState(1343);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {
				case 1:
					{
					setState(1342);
					group_by_clause();
					}
					break;
				}
				setState(1346);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
				case 1:
					{
					setState(1345);
					model_clause();
					}
					break;
				}
				setState(1351);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,79,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1348);
						union_clause();
						}
						} 
					}
					setState(1353);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,79,_ctx);
				}
				setState(1355);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,80,_ctx) ) {
				case 1:
					{
					setState(1354);
					((Select_statementContext)_localctx).fu1 = for_update_clause();
					}
					break;
				}
				setState(1358);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,81,_ctx) ) {
				case 1:
					{
					setState(1357);
					order_by_clause();
					}
					break;
				}
				setState(1361);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {
				case 1:
					{
					setState(1360);
					((Select_statementContext)_localctx).fu2 = for_update_clause();
					}
					break;
				}
				}
				}
				break;
			case LPAREN:
				{
				setState(1363);
				subquery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_factoring_clauseContext extends ParserRuleContext {
		public R_withContext with;
		public Subquery_factoring_clause_part_firstContext subquery_factoring_clause_part_first() {
			return getRuleContext(Subquery_factoring_clause_part_firstContext.class,0);
		}
		public R_withContext r_with() {
			return getRuleContext(R_withContext.class,0);
		}
		public List<Subquery_factoring_clause_part_nextContext> subquery_factoring_clause_part_next() {
			return getRuleContexts(Subquery_factoring_clause_part_nextContext.class);
		}
		public Subquery_factoring_clause_part_nextContext subquery_factoring_clause_part_next(int i) {
			return getRuleContext(Subquery_factoring_clause_part_nextContext.class,i);
		}
		public Search_clauseContext search_clause() {
			return getRuleContext(Search_clauseContext.class,0);
		}
		public Cycle_clauseContext cycle_clause() {
			return getRuleContext(Cycle_clauseContext.class,0);
		}
		public Subquery_factoring_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_factoring_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterSubquery_factoring_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitSubquery_factoring_clause(this);
		}
	}

	public final Subquery_factoring_clauseContext subquery_factoring_clause() throws RecognitionException {
		Subquery_factoring_clauseContext _localctx = new Subquery_factoring_clauseContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_subquery_factoring_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1366);
			((Subquery_factoring_clauseContext)_localctx).with = r_with();
			setState(1367);
			subquery_factoring_clause_part_first();
			setState(1371);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1368);
				subquery_factoring_clause_part_next();
				}
				}
				setState(1373);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1375);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__158) {
				{
				setState(1374);
				search_clause();
				}
			}

			setState(1378);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__122) {
				{
				setState(1377);
				cycle_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_factoring_clause_part_firstContext extends ParserRuleContext {
		public T_aliasContext t_alias() {
			return getRuleContext(T_aliasContext.class,0);
		}
		public R_asContext r_as() {
			return getRuleContext(R_asContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public Subquery_factoring_clause_part_firstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_factoring_clause_part_first; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterSubquery_factoring_clause_part_first(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitSubquery_factoring_clause_part_first(this);
		}
	}

	public final Subquery_factoring_clause_part_firstContext subquery_factoring_clause_part_first() throws RecognitionException {
		Subquery_factoring_clause_part_firstContext _localctx = new Subquery_factoring_clause_part_firstContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_subquery_factoring_clause_part_first);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1380);
			t_alias(T_DECL);
			setState(1385);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LPAREN) {
				{
				setState(1381);
				match(LPAREN);
				setState(1382);
				select_list();
				setState(1383);
				match(RPAREN);
				}
			}

			setState(1387);
			r_as();
			setState(1388);
			subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_factoring_clause_part_nextContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(OracleSQLParser.COMMA, 0); }
		public T_aliasContext t_alias() {
			return getRuleContext(T_aliasContext.class,0);
		}
		public R_asContext r_as() {
			return getRuleContext(R_asContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public Subquery_factoring_clause_part_nextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_factoring_clause_part_next; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterSubquery_factoring_clause_part_next(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitSubquery_factoring_clause_part_next(this);
		}
	}

	public final Subquery_factoring_clause_part_nextContext subquery_factoring_clause_part_next() throws RecognitionException {
		Subquery_factoring_clause_part_nextContext _localctx = new Subquery_factoring_clause_part_nextContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_subquery_factoring_clause_part_next);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1390);
			match(COMMA);
			setState(1391);
			t_alias(T_DECL);
			setState(1396);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LPAREN) {
				{
				setState(1392);
				match(LPAREN);
				setState(1393);
				select_list();
				setState(1394);
				match(RPAREN);
				}
			}

			setState(1398);
			r_as();
			setState(1399);
			subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_clauseContext extends ParserRuleContext {
		public K_searchContext k_search() {
			return getRuleContext(K_searchContext.class,0);
		}
		public List<K_firstContext> k_first() {
			return getRuleContexts(K_firstContext.class);
		}
		public K_firstContext k_first(int i) {
			return getRuleContext(K_firstContext.class,i);
		}
		public R_byContext r_by() {
			return getRuleContext(R_byContext.class,0);
		}
		public R_setContext r_set() {
			return getRuleContext(R_setContext.class,0);
		}
		public Sql_identifierContext sql_identifier() {
			return getRuleContext(Sql_identifierContext.class,0);
		}
		public K_depthContext k_depth() {
			return getRuleContext(K_depthContext.class,0);
		}
		public K_breadthContext k_breadth() {
			return getRuleContext(K_breadthContext.class,0);
		}
		public List<C_aliasContext> c_alias() {
			return getRuleContexts(C_aliasContext.class);
		}
		public C_aliasContext c_alias(int i) {
			return getRuleContext(C_aliasContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public List<R_ascContext> r_asc() {
			return getRuleContexts(R_ascContext.class);
		}
		public R_ascContext r_asc(int i) {
			return getRuleContext(R_ascContext.class,i);
		}
		public List<R_descContext> r_desc() {
			return getRuleContexts(R_descContext.class);
		}
		public R_descContext r_desc(int i) {
			return getRuleContext(R_descContext.class,i);
		}
		public List<K_nullsContext> k_nulls() {
			return getRuleContexts(K_nullsContext.class);
		}
		public K_nullsContext k_nulls(int i) {
			return getRuleContext(K_nullsContext.class,i);
		}
		public List<K_lastContext> k_last() {
			return getRuleContexts(K_lastContext.class);
		}
		public K_lastContext k_last(int i) {
			return getRuleContext(K_lastContext.class,i);
		}
		public Search_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterSearch_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitSearch_clause(this);
		}
	}

	public final Search_clauseContext search_clause() throws RecognitionException {
		Search_clauseContext _localctx = new Search_clauseContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_search_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1401);
			k_search();
			setState(1404);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
			case 1:
				{
				setState(1402);
				k_depth();
				}
				break;
			case 2:
				{
				setState(1403);
				k_breadth();
				}
				break;
			}
			setState(1406);
			k_first();
			setState(1407);
			r_by();
			{
			setState(1408);
			c_alias();
			setState(1410);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__8) {
				{
				setState(1409);
				r_asc();
				}
			}

			setState(1413);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__26) {
				{
				setState(1412);
				r_desc();
				}
			}

			setState(1418);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,92,_ctx) ) {
			case 1:
				{
				setState(1415);
				k_nulls();
				setState(1416);
				k_first();
				}
				break;
			}
			setState(1423);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__146) {
				{
				setState(1420);
				k_nulls();
				setState(1421);
				k_last();
				}
			}

			}
			setState(1445);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1425);
				match(COMMA);
				setState(1426);
				c_alias();
				setState(1428);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__8) {
					{
					setState(1427);
					r_asc();
					}
				}

				setState(1431);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__26) {
					{
					setState(1430);
					r_desc();
					}
				}

				setState(1436);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,96,_ctx) ) {
				case 1:
					{
					setState(1433);
					k_nulls();
					setState(1434);
					k_first();
					}
					break;
				}
				setState(1441);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__146) {
					{
					setState(1438);
					k_nulls();
					setState(1439);
					k_last();
					}
				}

				}
				}
				setState(1447);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1448);
			r_set();
			setState(1449);
			sql_identifier(T_UNKNOWN,0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cycle_clauseContext extends ParserRuleContext {
		public K_cycleContext k_cycle() {
			return getRuleContext(K_cycleContext.class,0);
		}
		public List<C_aliasContext> c_alias() {
			return getRuleContexts(C_aliasContext.class);
		}
		public C_aliasContext c_alias(int i) {
			return getRuleContext(C_aliasContext.class,i);
		}
		public R_setContext r_set() {
			return getRuleContext(R_setContext.class,0);
		}
		public Sql_identifierContext sql_identifier() {
			return getRuleContext(Sql_identifierContext.class,0);
		}
		public R_toContext r_to() {
			return getRuleContext(R_toContext.class,0);
		}
		public List<LiteralContext> literal() {
			return getRuleContexts(LiteralContext.class);
		}
		public LiteralContext literal(int i) {
			return getRuleContext(LiteralContext.class,i);
		}
		public R_defaultContext r_default() {
			return getRuleContext(R_defaultContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public Cycle_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cycle_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCycle_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCycle_clause(this);
		}
	}

	public final Cycle_clauseContext cycle_clause() throws RecognitionException {
		Cycle_clauseContext _localctx = new Cycle_clauseContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_cycle_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1451);
			k_cycle();
			setState(1452);
			c_alias();
			setState(1457);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1453);
				match(COMMA);
				setState(1454);
				c_alias();
				}
				}
				setState(1459);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1460);
			r_set();
			setState(1461);
			sql_identifier(T_UNKNOWN,0);
			setState(1462);
			r_to();
			setState(1463);
			literal();
			setState(1464);
			r_default();
			setState(1465);
			literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_listContext extends ParserRuleContext {
		public Displayed_column_part_firstContext displayed_column_part_first() {
			return getRuleContext(Displayed_column_part_firstContext.class,0);
		}
		public List<Displayed_column_part_nextContext> displayed_column_part_next() {
			return getRuleContexts(Displayed_column_part_nextContext.class);
		}
		public Displayed_column_part_nextContext displayed_column_part_next(int i) {
			return getRuleContext(Displayed_column_part_nextContext.class,i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterSelect_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitSelect_list(this);
		}
	}

	public final Select_listContext select_list() throws RecognitionException {
		Select_listContext _localctx = new Select_listContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_select_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1467);
			displayed_column_part_first();
			setState(1471);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1468);
				displayed_column_part_next();
				}
				}
				setState(1473);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Displayed_column_part_firstContext extends ParserRuleContext {
		public Displayed_columnContext displayed_column() {
			return getRuleContext(Displayed_columnContext.class,0);
		}
		public Displayed_column_part_firstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_displayed_column_part_first; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterDisplayed_column_part_first(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitDisplayed_column_part_first(this);
		}
	}

	public final Displayed_column_part_firstContext displayed_column_part_first() throws RecognitionException {
		Displayed_column_part_firstContext _localctx = new Displayed_column_part_firstContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_displayed_column_part_first);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1474);
			displayed_column();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Displayed_column_part_nextContext extends ParserRuleContext {
		public Token c;
		public Displayed_columnContext displayed_column() {
			return getRuleContext(Displayed_columnContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(OracleSQLParser.COMMA, 0); }
		public Displayed_column_part_nextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_displayed_column_part_next; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterDisplayed_column_part_next(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitDisplayed_column_part_next(this);
		}
	}

	public final Displayed_column_part_nextContext displayed_column_part_next() throws RecognitionException {
		Displayed_column_part_nextContext _localctx = new Displayed_column_part_nextContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_displayed_column_part_next);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1476);
			((Displayed_column_part_nextContext)_localctx).c = match(COMMA);
			setState(1477);
			displayed_column();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Displayed_columnContext extends ParserRuleContext {
		public Token asterisk1;
		public Token d1;
		public T_aliasContext table;
		public Token d2;
		public Token asterisk2;
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public TerminalNode ASTERISK() { return getToken(OracleSQLParser.ASTERISK, 0); }
		public T_aliasContext t_alias() {
			return getRuleContext(T_aliasContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(OracleSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(OracleSQLParser.DOT, i);
		}
		public C_aliasContext c_alias() {
			return getRuleContext(C_aliasContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Displayed_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_displayed_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterDisplayed_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitDisplayed_column(this);
		}
	}

	public final Displayed_columnContext displayed_column() throws RecognitionException {
		Displayed_columnContext _localctx = new Displayed_columnContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_displayed_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1490);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,102,_ctx) ) {
			case 1:
				{
				setState(1479);
				((Displayed_columnContext)_localctx).asterisk1 = match(ASTERISK);
				}
				break;
			case 2:
				{
				setState(1483);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,101,_ctx) ) {
				case 1:
					{
					setState(1480);
					schema_name();
					setState(1481);
					((Displayed_columnContext)_localctx).d1 = match(DOT);
					}
					break;
				}
				setState(1485);
				((Displayed_columnContext)_localctx).table = t_alias(T_USE);
				setState(1486);
				((Displayed_columnContext)_localctx).d2 = match(DOT);
				setState(1487);
				((Displayed_columnContext)_localctx).asterisk2 = match(ASTERISK);
				}
				break;
			case 3:
				{
				setState(1489);
				sql_expression();
				}
				break;
			}
			setState(1493);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__7 || _la==T__12 || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (T__82 - 83)) | (1L << (T__84 - 83)) | (1L << (T__115 - 83)) | (1L << (T__119 - 83)) | (1L << (T__120 - 83)) | (1L << (T__122 - 83)) | (1L << (T__125 - 83)) | (1L << (T__126 - 83)) | (1L << (T__127 - 83)) | (1L << (T__130 - 83)) | (1L << (T__132 - 83)) | (1L << (T__133 - 83)) | (1L << (T__135 - 83)) | (1L << (T__137 - 83)) | (1L << (T__138 - 83)) | (1L << (T__139 - 83)) | (1L << (T__141 - 83)) | (1L << (T__144 - 83)))) != 0) || ((((_la - 147)) & ~0x3f) == 0 && ((1L << (_la - 147)) & ((1L << (T__146 - 147)) | (1L << (T__147 - 147)) | (1L << (T__149 - 147)) | (1L << (T__152 - 147)) | (1L << (T__154 - 147)) | (1L << (T__157 - 147)) | (1L << (T__158 - 147)) | (1L << (T__161 - 147)) | (1L << (T__164 - 147)) | (1L << (T__166 - 147)) | (1L << (T__169 - 147)))) != 0) || _la==ID) {
				{
				setState(1492);
				c_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_expressionContext extends ParserRuleContext {
		public Expr_addContext expr_add() {
			return getRuleContext(Expr_addContext.class,0);
		}
		public Sql_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterSql_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitSql_expression(this);
		}
	}

	public final Sql_expressionContext sql_expression() throws RecognitionException {
		Sql_expressionContext _localctx = new Sql_expressionContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_sql_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1495);
			expr_add();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_addContext extends ParserRuleContext {
		public List<Expr_mulContext> expr_mul() {
			return getRuleContexts(Expr_mulContext.class);
		}
		public Expr_mulContext expr_mul(int i) {
			return getRuleContext(Expr_mulContext.class,i);
		}
		public List<TerminalNode> PLUS() { return getTokens(OracleSQLParser.PLUS); }
		public TerminalNode PLUS(int i) {
			return getToken(OracleSQLParser.PLUS, i);
		}
		public List<TerminalNode> MINUS() { return getTokens(OracleSQLParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(OracleSQLParser.MINUS, i);
		}
		public List<DoublevertbarContext> doublevertbar() {
			return getRuleContexts(DoublevertbarContext.class);
		}
		public DoublevertbarContext doublevertbar(int i) {
			return getRuleContext(DoublevertbarContext.class,i);
		}
		public Expr_addContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_add; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterExpr_add(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitExpr_add(this);
		}
	}

	public final Expr_addContext expr_add() throws RecognitionException {
		Expr_addContext _localctx = new Expr_addContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_expr_add);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1497);
			expr_mul();
			setState(1506);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,105,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1501);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PLUS:
						{
						setState(1498);
						match(PLUS);
						}
						break;
					case MINUS:
						{
						setState(1499);
						match(MINUS);
						}
						break;
					case VERTBAR:
					case DOUBLEVERTBAR:
						{
						setState(1500);
						doublevertbar();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1503);
					expr_mul();
					}
					} 
				}
				setState(1508);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,105,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_mulContext extends ParserRuleContext {
		public List<Expr_signContext> expr_sign() {
			return getRuleContexts(Expr_signContext.class);
		}
		public Expr_signContext expr_sign(int i) {
			return getRuleContext(Expr_signContext.class,i);
		}
		public List<TerminalNode> ASTERISK() { return getTokens(OracleSQLParser.ASTERISK); }
		public TerminalNode ASTERISK(int i) {
			return getToken(OracleSQLParser.ASTERISK, i);
		}
		public List<TerminalNode> DIVIDE() { return getTokens(OracleSQLParser.DIVIDE); }
		public TerminalNode DIVIDE(int i) {
			return getToken(OracleSQLParser.DIVIDE, i);
		}
		public Expr_mulContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_mul; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterExpr_mul(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitExpr_mul(this);
		}
	}

	public final Expr_mulContext expr_mul() throws RecognitionException {
		Expr_mulContext _localctx = new Expr_mulContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_expr_mul);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1509);
			expr_sign();
			setState(1514);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,106,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1510);
					_la = _input.LA(1);
					if ( !(_la==ASTERISK || _la==DIVIDE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1511);
					expr_sign();
					}
					} 
				}
				setState(1516);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,106,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_signContext extends ParserRuleContext {
		public Expr_exprContext expr_expr() {
			return getRuleContext(Expr_exprContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(OracleSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(OracleSQLParser.MINUS, 0); }
		public R_priorContext r_prior() {
			return getRuleContext(R_priorContext.class,0);
		}
		public K_connect_by_rootContext k_connect_by_root() {
			return getRuleContext(K_connect_by_rootContext.class,0);
		}
		public Expr_signContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterExpr_sign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitExpr_sign(this);
		}
	}

	public final Expr_signContext expr_sign() throws RecognitionException {
		Expr_signContext _localctx = new Expr_signContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_expr_sign);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1521);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
			case 1:
				{
				setState(1517);
				match(PLUS);
				}
				break;
			case 2:
				{
				setState(1518);
				match(MINUS);
				}
				break;
			case 3:
				{
				setState(1519);
				r_prior();
				}
				break;
			case 4:
				{
				setState(1520);
				k_connect_by_root();
				}
				break;
			}
			setState(1523);
			expr_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_exprContext extends ParserRuleContext {
		public Extract_datetime_expressionContext extract_datetime_expression() {
			return getRuleContext(Extract_datetime_expressionContext.class,0);
		}
		public Interval_x_to_yContext interval_x_to_y() {
			return getRuleContext(Interval_x_to_yContext.class,0);
		}
		public Datetime_expressionContext datetime_expression() {
			return getRuleContext(Datetime_expressionContext.class,0);
		}
		public Interval_expressionContext interval_expression() {
			return getRuleContext(Interval_expressionContext.class,0);
		}
		public Expr_parenContext expr_paren() {
			return getRuleContext(Expr_parenContext.class,0);
		}
		public Cursor_expressionContext cursor_expression() {
			return getRuleContext(Cursor_expressionContext.class,0);
		}
		public Cast_expressionContext cast_expression() {
			return getRuleContext(Cast_expressionContext.class,0);
		}
		public Special_expressionContext special_expression() {
			return getRuleContext(Special_expressionContext.class,0);
		}
		public Object_access_expressionContext object_access_expression() {
			return getRuleContext(Object_access_expressionContext.class,0);
		}
		public Case_expressionContext case_expression() {
			return getRuleContext(Case_expressionContext.class,0);
		}
		public Special_functionContext special_function() {
			return getRuleContext(Special_functionContext.class,0);
		}
		public Analytic_functionContext analytic_function() {
			return getRuleContext(Analytic_functionContext.class,0);
		}
		public Aggregate_functionContext aggregate_function() {
			return getRuleContext(Aggregate_functionContext.class,0);
		}
		public Function_expressionContext function_expression() {
			return getRuleContext(Function_expressionContext.class,0);
		}
		public Simple_expressionContext simple_expression() {
			return getRuleContext(Simple_expressionContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Expr_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterExpr_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitExpr_expr(this);
		}
	}

	public final Expr_exprContext expr_expr() throws RecognitionException {
		Expr_exprContext _localctx = new Expr_exprContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_expr_expr);
		try {
			setState(1541);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1525);
				extract_datetime_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1526);
				interval_x_to_y();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1527);
				datetime_expression();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1528);
				interval_expression();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1529);
				expr_paren();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1530);
				cursor_expression();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1531);
				cast_expression();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1532);
				special_expression();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1533);
				object_access_expression();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1534);
				case_expression();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1535);
				special_function();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1536);
				analytic_function();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1537);
				aggregate_function();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1538);
				function_expression();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1539);
				simple_expression();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1540);
				subquery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_parenContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public Nested_expressionContext nested_expression() {
			return getRuleContext(Nested_expressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public Expr_parenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_paren; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterExpr_paren(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitExpr_paren(this);
		}
	}

	public final Expr_parenContext expr_paren() throws RecognitionException {
		Expr_parenContext _localctx = new Expr_parenContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_expr_paren);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1543);
			match(LPAREN);
			setState(1544);
			nested_expression();
			setState(1545);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nested_expressionContext extends ParserRuleContext {
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Nested_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nested_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterNested_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitNested_expression(this);
		}
	}

	public final Nested_expressionContext nested_expression() throws RecognitionException {
		Nested_expressionContext _localctx = new Nested_expressionContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_nested_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1547);
			sql_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_expressionContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Analytic_function_nameContext analytic_function_name() {
			return getRuleContext(Analytic_function_nameContext.class,0);
		}
		public Call_parametersContext call_parameters() {
			return getRuleContext(Call_parametersContext.class,0);
		}
		public Function_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterFunction_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitFunction_expression(this);
		}
	}

	public final Function_expressionContext function_expression() throws RecognitionException {
		Function_expressionContext _localctx = new Function_expressionContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_function_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1551);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,109,_ctx) ) {
			case 1:
				{
				setState(1549);
				function_spec();
				}
				break;
			case 2:
				{
				setState(1550);
				analytic_function_name();
				}
				break;
			}
			setState(1553);
			match(LPAREN);
			setState(1555);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,110,_ctx) ) {
			case 1:
				{
				setState(1554);
				call_parameters();
				}
				break;
			}
			setState(1557);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Call_parametersContext extends ParserRuleContext {
		public TerminalNode ASTERISK() { return getToken(OracleSQLParser.ASTERISK, 0); }
		public List<Call_parameterContext> call_parameter() {
			return getRuleContexts(Call_parameterContext.class);
		}
		public Call_parameterContext call_parameter(int i) {
			return getRuleContext(Call_parameterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public Call_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCall_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCall_parameters(this);
		}
	}

	public final Call_parametersContext call_parameters() throws RecognitionException {
		Call_parametersContext _localctx = new Call_parametersContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_call_parameters);
		int _la;
		try {
			setState(1568);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1559);
				match(ASTERISK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1560);
				call_parameter();
				setState(1565);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1561);
					match(COMMA);
					setState(1562);
					call_parameter();
					}
					}
					setState(1567);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Call_parameterContext extends ParserRuleContext {
		public Nested_expressionContext nested_expression() {
			return getRuleContext(Nested_expressionContext.class,0);
		}
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public TerminalNode ARROW() { return getToken(OracleSQLParser.ARROW, 0); }
		public Call_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCall_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCall_parameter(this);
		}
	}

	public final Call_parameterContext call_parameter() throws RecognitionException {
		Call_parameterContext _localctx = new Call_parameterContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_call_parameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1573);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,113,_ctx) ) {
			case 1:
				{
				setState(1570);
				parameter_name();
				setState(1571);
				match(ARROW);
				}
				break;
			}
			setState(1575);
			nested_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Parameter_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterParameter_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitParameter_name(this);
		}
	}

	public final Parameter_nameContext parameter_name() throws RecognitionException {
		Parameter_nameContext _localctx = new Parameter_nameContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_parameter_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1577);
			identifier(T_UNKNOWN,0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Special_functionContext extends ParserRuleContext {
		public K_trimContext k_trim() {
			return getRuleContext(K_trimContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public R_fromContext r_from() {
			return getRuleContext(R_fromContext.class,0);
		}
		public K_leadingContext k_leading() {
			return getRuleContext(K_leadingContext.class,0);
		}
		public K_trailingContext k_trailing() {
			return getRuleContext(K_trailingContext.class,0);
		}
		public K_bothContext k_both() {
			return getRuleContext(K_bothContext.class,0);
		}
		public TerminalNode QUOTED_STRING() { return getToken(OracleSQLParser.QUOTED_STRING, 0); }
		public R_setContext r_set() {
			return getRuleContext(R_setContext.class,0);
		}
		public K_lnnvlContext k_lnnvl() {
			return getRuleContext(K_lnnvlContext.class,0);
		}
		public Sql_conditionContext sql_condition() {
			return getRuleContext(Sql_conditionContext.class,0);
		}
		public Special_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_special_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterSpecial_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitSpecial_function(this);
		}
	}

	public final Special_functionContext special_function() throws RecognitionException {
		Special_functionContext _localctx = new Special_functionContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_special_function);
		int _la;
		try {
			setState(1605);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(1579);
				k_trim();
				setState(1580);
				match(LPAREN);
				setState(1590);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,116,_ctx) ) {
				case 1:
					{
					setState(1584);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,114,_ctx) ) {
					case 1:
						{
						setState(1581);
						k_leading();
						}
						break;
					case 2:
						{
						setState(1582);
						k_trailing();
						}
						break;
					case 3:
						{
						setState(1583);
						k_both();
						}
						break;
					}
					setState(1587);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==QUOTED_STRING) {
						{
						setState(1586);
						match(QUOTED_STRING);
						}
					}

					setState(1589);
					r_from();
					}
					break;
				}
				setState(1592);
				sql_expression();
				setState(1593);
				match(RPAREN);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(1595);
				r_set();
				setState(1596);
				match(LPAREN);
				setState(1597);
				sql_expression();
				setState(1598);
				match(RPAREN);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(1600);
				k_lnnvl();
				setState(1601);
				match(LPAREN);
				setState(1602);
				sql_condition();
				setState(1603);
				match(RPAREN);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_expressionContext extends ParserRuleContext {
		public R_caseContext r_case() {
			return getRuleContext(R_caseContext.class,0);
		}
		public K_endContext k_end() {
			return getRuleContext(K_endContext.class,0);
		}
		public Simple_case_expressionContext simple_case_expression() {
			return getRuleContext(Simple_case_expressionContext.class,0);
		}
		public Searched_case_expressionContext searched_case_expression() {
			return getRuleContext(Searched_case_expressionContext.class,0);
		}
		public Else_case_expressionContext else_case_expression() {
			return getRuleContext(Else_case_expressionContext.class,0);
		}
		public Case_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCase_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCase_expression(this);
		}
	}

	public final Case_expressionContext case_expression() throws RecognitionException {
		Case_expressionContext _localctx = new Case_expressionContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_case_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1607);
			r_case();
			setState(1610);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
			case 1:
				{
				setState(1608);
				simple_case_expression();
				}
				break;
			case 2:
				{
				setState(1609);
				searched_case_expression();
				}
				break;
			}
			setState(1613);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__29) {
				{
				setState(1612);
				else_case_expression();
				}
			}

			setState(1615);
			k_end();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_expressionContext extends ParserRuleContext {
		public K_cursorContext k_cursor() {
			return getRuleContext(K_cursorContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Cursor_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCursor_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCursor_expression(this);
		}
	}

	public final Cursor_expressionContext cursor_expression() throws RecognitionException {
		Cursor_expressionContext _localctx = new Cursor_expressionContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_cursor_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1617);
			k_cursor();
			setState(1618);
			subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_case_expressionContext extends ParserRuleContext {
		public List<Nested_expressionContext> nested_expression() {
			return getRuleContexts(Nested_expressionContext.class);
		}
		public Nested_expressionContext nested_expression(int i) {
			return getRuleContext(Nested_expressionContext.class,i);
		}
		public List<K_whenContext> k_when() {
			return getRuleContexts(K_whenContext.class);
		}
		public K_whenContext k_when(int i) {
			return getRuleContext(K_whenContext.class,i);
		}
		public List<R_thenContext> r_then() {
			return getRuleContexts(R_thenContext.class);
		}
		public R_thenContext r_then(int i) {
			return getRuleContext(R_thenContext.class,i);
		}
		public Simple_case_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterSimple_case_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitSimple_case_expression(this);
		}
	}

	public final Simple_case_expressionContext simple_case_expression() throws RecognitionException {
		Simple_case_expressionContext _localctx = new Simple_case_expressionContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_simple_case_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1620);
			nested_expression();
			setState(1626); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1621);
				k_when();
				setState(1622);
				nested_expression();
				setState(1623);
				r_then();
				setState(1624);
				nested_expression();
				}
				}
				setState(1628); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==T__169 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_case_expressionContext extends ParserRuleContext {
		public List<K_whenContext> k_when() {
			return getRuleContexts(K_whenContext.class);
		}
		public K_whenContext k_when(int i) {
			return getRuleContext(K_whenContext.class,i);
		}
		public List<Sql_conditionContext> sql_condition() {
			return getRuleContexts(Sql_conditionContext.class);
		}
		public Sql_conditionContext sql_condition(int i) {
			return getRuleContext(Sql_conditionContext.class,i);
		}
		public List<R_thenContext> r_then() {
			return getRuleContexts(R_thenContext.class);
		}
		public R_thenContext r_then(int i) {
			return getRuleContext(R_thenContext.class,i);
		}
		public List<Nested_expressionContext> nested_expression() {
			return getRuleContexts(Nested_expressionContext.class);
		}
		public Nested_expressionContext nested_expression(int i) {
			return getRuleContext(Nested_expressionContext.class,i);
		}
		public Searched_case_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterSearched_case_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitSearched_case_expression(this);
		}
	}

	public final Searched_case_expressionContext searched_case_expression() throws RecognitionException {
		Searched_case_expressionContext _localctx = new Searched_case_expressionContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_searched_case_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1635); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1630);
				k_when();
				setState(1631);
				sql_condition();
				setState(1632);
				r_then();
				setState(1633);
				nested_expression();
				}
				}
				setState(1637); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==T__169 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Else_case_expressionContext extends ParserRuleContext {
		public R_elseContext r_else() {
			return getRuleContext(R_elseContext.class,0);
		}
		public Nested_expressionContext nested_expression() {
			return getRuleContext(Nested_expressionContext.class,0);
		}
		public Else_case_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_else_case_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterElse_case_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitElse_case_expression(this);
		}
	}

	public final Else_case_expressionContext else_case_expression() throws RecognitionException {
		Else_case_expressionContext _localctx = new Else_case_expressionContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_else_case_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1639);
			r_else();
			setState(1640);
			nested_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_access_expressionContext extends ParserRuleContext {
		public List<Function_expressionContext> function_expression() {
			return getRuleContexts(Function_expressionContext.class);
		}
		public Function_expressionContext function_expression(int i) {
			return getRuleContext(Function_expressionContext.class,i);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public List<TerminalNode> DOT() { return getTokens(OracleSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(OracleSQLParser.DOT, i);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public Object_access_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_access_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterObject_access_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitObject_access_expression(this);
		}
	}

	public final Object_access_expressionContext object_access_expression() throws RecognitionException {
		Object_access_expressionContext _localctx = new Object_access_expressionContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_object_access_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1653);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,122,_ctx) ) {
			case 1:
				{
				setState(1642);
				match(LPAREN);
				setState(1643);
				sql_expression();
				setState(1644);
				match(RPAREN);
				setState(1645);
				match(DOT);
				}
				break;
			case 2:
				{
				setState(1647);
				table_name();
				setState(1648);
				match(DOT);
				}
				break;
			case 3:
				{
				setState(1650);
				function_expression();
				setState(1651);
				match(DOT);
				}
				break;
			}
			setState(1660);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,123,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1655);
					identifier(T_UNKNOWN,0);
					setState(1656);
					match(DOT);
					}
					} 
				}
				setState(1662);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,123,_ctx);
			}
			setState(1663);
			function_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_expressionContext extends ParserRuleContext {
		public Boolean_literalContext boolean_literal() {
			return getRuleContext(Boolean_literalContext.class,0);
		}
		public K_sqlContext k_sql() {
			return getRuleContext(K_sqlContext.class,0);
		}
		public TerminalNode FOUND_ATTR() { return getToken(OracleSQLParser.FOUND_ATTR, 0); }
		public TerminalNode NOTFOUND_ATTR() { return getToken(OracleSQLParser.NOTFOUND_ATTR, 0); }
		public TerminalNode ISOPEN_ATTR() { return getToken(OracleSQLParser.ISOPEN_ATTR, 0); }
		public TerminalNode ROWCOUNT_ATTR() { return getToken(OracleSQLParser.ROWCOUNT_ATTR, 0); }
		public TerminalNode BULK_ROWCOUNT_ATTR() { return getToken(OracleSQLParser.BULK_ROWCOUNT_ATTR, 0); }
		public Cell_assignmentContext cell_assignment() {
			return getRuleContext(Cell_assignmentContext.class,0);
		}
		public Column_specContext column_spec() {
			return getRuleContext(Column_specContext.class,0);
		}
		public Timestamp_expressionContext timestamp_expression() {
			return getRuleContext(Timestamp_expressionContext.class,0);
		}
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode NUMBER() { return getToken(OracleSQLParser.NUMBER, 0); }
		public Simple_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterSimple_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitSimple_expression(this);
		}
	}

	public final Simple_expressionContext simple_expression() throws RecognitionException {
		Simple_expressionContext _localctx = new Simple_expressionContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_simple_expression);
		int _la;
		try {
			setState(1674);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,124,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1665);
				boolean_literal();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1666);
				k_sql();
				setState(1667);
				_la = _input.LA(1);
				if ( !(((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (NOTFOUND_ATTR - 264)) | (1L << (FOUND_ATTR - 264)) | (1L << (ISOPEN_ATTR - 264)) | (1L << (ROWCOUNT_ATTR - 264)) | (1L << (BULK_ROWCOUNT_ATTR - 264)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1669);
				cell_assignment();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1670);
				column_spec();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1671);
				timestamp_expression();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1672);
				quoted_string();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1673);
				match(NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_blockContext extends ParserRuleContext {
		public R_selectContext r_select() {
			return getRuleContext(R_selectContext.class,0);
		}
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public R_fromContext r_from() {
			return getRuleContext(R_fromContext.class,0);
		}
		public Table_reference_listContext table_reference_list() {
			return getRuleContext(Table_reference_listContext.class,0);
		}
		public R_distinctContext r_distinct() {
			return getRuleContext(R_distinctContext.class,0);
		}
		public R_uniqueContext r_unique() {
			return getRuleContext(R_uniqueContext.class,0);
		}
		public R_allContext r_all() {
			return getRuleContext(R_allContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Hierarchical_query_clauseContext hierarchical_query_clause() {
			return getRuleContext(Hierarchical_query_clauseContext.class,0);
		}
		public Group_by_clauseContext group_by_clause() {
			return getRuleContext(Group_by_clauseContext.class,0);
		}
		public Model_clauseContext model_clause() {
			return getRuleContext(Model_clauseContext.class,0);
		}
		public Query_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterQuery_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitQuery_block(this);
		}
	}

	public final Query_blockContext query_block() throws RecognitionException {
		Query_blockContext _localctx = new Query_blockContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_query_block);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1676);
			r_select();
			setState(1680);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,125,_ctx) ) {
			case 1:
				{
				setState(1677);
				r_distinct();
				}
				break;
			case 2:
				{
				setState(1678);
				r_unique();
				}
				break;
			case 3:
				{
				setState(1679);
				r_all();
				}
				break;
			}
			setState(1682);
			select_list();
			setState(1683);
			r_from();
			setState(1684);
			table_reference_list();
			setState(1686);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,126,_ctx) ) {
			case 1:
				{
				setState(1685);
				where_clause();
				}
				break;
			}
			setState(1689);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,127,_ctx) ) {
			case 1:
				{
				setState(1688);
				hierarchical_query_clause();
				}
				break;
			}
			setState(1692);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
			case 1:
				{
				setState(1691);
				group_by_clause();
				}
				break;
			}
			setState(1695);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,129,_ctx) ) {
			case 1:
				{
				setState(1694);
				model_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public For_update_clauseContext fu1;
		public For_update_clauseContext fu2;
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public Group_by_clauseContext group_by_clause() {
			return getRuleContext(Group_by_clauseContext.class,0);
		}
		public Model_clauseContext model_clause() {
			return getRuleContext(Model_clauseContext.class,0);
		}
		public List<Union_clauseContext> union_clause() {
			return getRuleContexts(Union_clauseContext.class);
		}
		public Union_clauseContext union_clause(int i) {
			return getRuleContext(Union_clauseContext.class,i);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public List<For_update_clauseContext> for_update_clause() {
			return getRuleContexts(For_update_clauseContext.class);
		}
		public For_update_clauseContext for_update_clause(int i) {
			return getRuleContext(For_update_clauseContext.class,i);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitSubquery(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_subquery);
		try {
			int _alt;
			setState(1745);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,142,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1697);
				match(LPAREN);
				setState(1698);
				select_statement();
				setState(1699);
				match(RPAREN);
				setState(1701);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
				case 1:
					{
					setState(1700);
					group_by_clause();
					}
					break;
				}
				setState(1704);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
				case 1:
					{
					setState(1703);
					model_clause();
					}
					break;
				}
				setState(1709);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,132,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1706);
						union_clause();
						}
						} 
					}
					setState(1711);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,132,_ctx);
				}
				setState(1713);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,133,_ctx) ) {
				case 1:
					{
					setState(1712);
					((SubqueryContext)_localctx).fu1 = for_update_clause();
					}
					break;
				}
				setState(1716);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,134,_ctx) ) {
				case 1:
					{
					setState(1715);
					order_by_clause();
					}
					break;
				}
				setState(1719);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,135,_ctx) ) {
				case 1:
					{
					setState(1718);
					((SubqueryContext)_localctx).fu2 = for_update_clause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1721);
				match(LPAREN);
				setState(1722);
				subquery();
				setState(1723);
				match(RPAREN);
				setState(1725);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,136,_ctx) ) {
				case 1:
					{
					setState(1724);
					group_by_clause();
					}
					break;
				}
				setState(1728);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,137,_ctx) ) {
				case 1:
					{
					setState(1727);
					model_clause();
					}
					break;
				}
				setState(1733);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,138,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1730);
						union_clause();
						}
						} 
					}
					setState(1735);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,138,_ctx);
				}
				setState(1737);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,139,_ctx) ) {
				case 1:
					{
					setState(1736);
					((SubqueryContext)_localctx).fu1 = for_update_clause();
					}
					break;
				}
				setState(1740);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,140,_ctx) ) {
				case 1:
					{
					setState(1739);
					order_by_clause();
					}
					break;
				}
				setState(1743);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,141,_ctx) ) {
				case 1:
					{
					setState(1742);
					((SubqueryContext)_localctx).fu2 = for_update_clause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Timestamp_expressionContext extends ParserRuleContext {
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public R_dateContext r_date() {
			return getRuleContext(R_dateContext.class,0);
		}
		public K_timestampContext k_timestamp() {
			return getRuleContext(K_timestampContext.class,0);
		}
		public Timestamp_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timestamp_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterTimestamp_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitTimestamp_expression(this);
		}
	}

	public final Timestamp_expressionContext timestamp_expression() throws RecognitionException {
		Timestamp_expressionContext _localctx = new Timestamp_expressionContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_timestamp_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1749);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__22:
				{
				setState(1747);
				r_date();
				}
				break;
			case T__164:
				{
				setState(1748);
				k_timestamp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1751);
			quoted_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_x_to_yContext extends ParserRuleContext {
		public K_intervalContext k_interval() {
			return getRuleContext(K_intervalContext.class,0);
		}
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public List<K_yearContext> k_year() {
			return getRuleContexts(K_yearContext.class);
		}
		public K_yearContext k_year(int i) {
			return getRuleContext(K_yearContext.class,i);
		}
		public List<K_monthContext> k_month() {
			return getRuleContexts(K_monthContext.class);
		}
		public K_monthContext k_month(int i) {
			return getRuleContext(K_monthContext.class,i);
		}
		public List<K_dayContext> k_day() {
			return getRuleContexts(K_dayContext.class);
		}
		public K_dayContext k_day(int i) {
			return getRuleContext(K_dayContext.class,i);
		}
		public List<K_hourContext> k_hour() {
			return getRuleContexts(K_hourContext.class);
		}
		public K_hourContext k_hour(int i) {
			return getRuleContext(K_hourContext.class,i);
		}
		public List<K_minuteContext> k_minute() {
			return getRuleContexts(K_minuteContext.class);
		}
		public K_minuteContext k_minute(int i) {
			return getRuleContext(K_minuteContext.class,i);
		}
		public List<K_secondContext> k_second() {
			return getRuleContexts(K_secondContext.class);
		}
		public K_secondContext k_second(int i) {
			return getRuleContext(K_secondContext.class,i);
		}
		public List<TerminalNode> LPAREN() { return getTokens(OracleSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(OracleSQLParser.LPAREN, i);
		}
		public List<PrecisionContext> precision() {
			return getRuleContexts(PrecisionContext.class);
		}
		public PrecisionContext precision(int i) {
			return getRuleContext(PrecisionContext.class,i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(OracleSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(OracleSQLParser.RPAREN, i);
		}
		public K_toContext k_to() {
			return getRuleContext(K_toContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(OracleSQLParser.COMMA, 0); }
		public Interval_x_to_yContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_x_to_y; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterInterval_x_to_y(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitInterval_x_to_y(this);
		}
	}

	public final Interval_x_to_yContext interval_x_to_y() throws RecognitionException {
		Interval_x_to_yContext _localctx = new Interval_x_to_yContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_interval_x_to_y);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1753);
			k_interval();
			setState(1810);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
			case 1:
				{
				{
				setState(1756);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case QUOTED_STRING:
				case QSTRING:
					{
					setState(1754);
					quoted_string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					setState(1755);
					bind_variable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1760);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,145,_ctx) ) {
				case 1:
					{
					setState(1758);
					k_year();
					}
					break;
				case 2:
					{
					setState(1759);
					k_month();
					}
					break;
				}
				setState(1766);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
				case 1:
					{
					setState(1762);
					match(LPAREN);
					setState(1763);
					precision();
					setState(1764);
					match(RPAREN);
					}
					break;
				}
				setState(1773);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,148,_ctx) ) {
				case 1:
					{
					setState(1768);
					k_to();
					setState(1771);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,147,_ctx) ) {
					case 1:
						{
						setState(1769);
						k_year();
						}
						break;
					case 2:
						{
						setState(1770);
						k_month();
						}
						break;
					}
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(1777);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case QUOTED_STRING:
				case QSTRING:
					{
					setState(1775);
					quoted_string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					setState(1776);
					bind_variable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1783);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,150,_ctx) ) {
				case 1:
					{
					setState(1779);
					k_day();
					}
					break;
				case 2:
					{
					setState(1780);
					k_hour();
					}
					break;
				case 3:
					{
					setState(1781);
					k_minute();
					}
					break;
				case 4:
					{
					setState(1782);
					k_second();
					}
					break;
				}
				setState(1793);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,152,_ctx) ) {
				case 1:
					{
					setState(1785);
					match(LPAREN);
					setState(1786);
					precision();
					setState(1789);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1787);
						match(COMMA);
						setState(1788);
						precision();
						}
					}

					setState(1791);
					match(RPAREN);
					}
					break;
				}
				setState(1808);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,155,_ctx) ) {
				case 1:
					{
					setState(1795);
					k_to();
					setState(1800);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
					case 1:
						{
						setState(1796);
						k_day();
						}
						break;
					case 2:
						{
						setState(1797);
						k_hour();
						}
						break;
					case 3:
						{
						setState(1798);
						k_minute();
						}
						break;
					case 4:
						{
						setState(1799);
						k_second();
						}
						break;
					}
					setState(1806);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
					case 1:
						{
						setState(1802);
						match(LPAREN);
						setState(1803);
						precision();
						setState(1804);
						match(RPAREN);
						}
						break;
					}
					}
					break;
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrecisionContext extends ParserRuleContext {
		public TerminalNode NUMBER() { return getToken(OracleSQLParser.NUMBER, 0); }
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public PrecisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterPrecision(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitPrecision(this);
		}
	}

	public final PrecisionContext precision() throws RecognitionException {
		PrecisionContext _localctx = new PrecisionContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_precision);
		try {
			setState(1814);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1812);
				match(NUMBER);
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(1813);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extract_datetime_expressionContext extends ParserRuleContext {
		public K_extractContext k_extract() {
			return getRuleContext(K_extractContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public R_fromContext r_from() {
			return getRuleContext(R_fromContext.class,0);
		}
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public K_yearContext k_year() {
			return getRuleContext(K_yearContext.class,0);
		}
		public K_monthContext k_month() {
			return getRuleContext(K_monthContext.class,0);
		}
		public K_dayContext k_day() {
			return getRuleContext(K_dayContext.class,0);
		}
		public K_hourContext k_hour() {
			return getRuleContext(K_hourContext.class,0);
		}
		public K_minuteContext k_minute() {
			return getRuleContext(K_minuteContext.class,0);
		}
		public K_secondContext k_second() {
			return getRuleContext(K_secondContext.class,0);
		}
		public K_timezone_hourContext k_timezone_hour() {
			return getRuleContext(K_timezone_hourContext.class,0);
		}
		public K_timezone_minuteContext k_timezone_minute() {
			return getRuleContext(K_timezone_minuteContext.class,0);
		}
		public K_timezone_regionContext k_timezone_region() {
			return getRuleContext(K_timezone_regionContext.class,0);
		}
		public K_timezone_abbrContext k_timezone_abbr() {
			return getRuleContext(K_timezone_abbrContext.class,0);
		}
		public Extract_datetime_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_datetime_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterExtract_datetime_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitExtract_datetime_expression(this);
		}
	}

	public final Extract_datetime_expressionContext extract_datetime_expression() throws RecognitionException {
		Extract_datetime_expressionContext _localctx = new Extract_datetime_expressionContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_extract_datetime_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1816);
			k_extract();
			setState(1817);
			match(LPAREN);
			setState(1828);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
			case 1:
				{
				setState(1818);
				k_year();
				}
				break;
			case 2:
				{
				setState(1819);
				k_month();
				}
				break;
			case 3:
				{
				setState(1820);
				k_day();
				}
				break;
			case 4:
				{
				setState(1821);
				k_hour();
				}
				break;
			case 5:
				{
				setState(1822);
				k_minute();
				}
				break;
			case 6:
				{
				setState(1823);
				k_second();
				}
				break;
			case 7:
				{
				setState(1824);
				k_timezone_hour();
				}
				break;
			case 8:
				{
				setState(1825);
				k_timezone_minute();
				}
				break;
			case 9:
				{
				setState(1826);
				k_timezone_region();
				}
				break;
			case 10:
				{
				setState(1827);
				k_timezone_abbr();
				}
				break;
			}
			setState(1830);
			r_from();
			setState(1831);
			sql_expression();
			setState(1832);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_expressionContext extends ParserRuleContext {
		public K_atContext k_at() {
			return getRuleContext(K_atContext.class,0);
		}
		public Function_expressionContext function_expression() {
			return getRuleContext(Function_expressionContext.class,0);
		}
		public Cast_expressionContext cast_expression() {
			return getRuleContext(Cast_expressionContext.class,0);
		}
		public Simple_expressionContext simple_expression() {
			return getRuleContext(Simple_expressionContext.class,0);
		}
		public K_localContext k_local() {
			return getRuleContext(K_localContext.class,0);
		}
		public K_timeContext k_time() {
			return getRuleContext(K_timeContext.class,0);
		}
		public K_zoneContext k_zone() {
			return getRuleContext(K_zoneContext.class,0);
		}
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public K_dbtimezoneContext k_dbtimezone() {
			return getRuleContext(K_dbtimezoneContext.class,0);
		}
		public K_sessiontimezoneContext k_sessiontimezone() {
			return getRuleContext(K_sessiontimezoneContext.class,0);
		}
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Datetime_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterDatetime_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitDatetime_expression(this);
		}
	}

	public final Datetime_expressionContext datetime_expression() throws RecognitionException {
		Datetime_expressionContext _localctx = new Datetime_expressionContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_datetime_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1837);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
			case 1:
				{
				setState(1834);
				function_expression();
				}
				break;
			case 2:
				{
				setState(1835);
				cast_expression();
				}
				break;
			case 3:
				{
				setState(1836);
				simple_expression();
				}
				break;
			}
			setState(1839);
			k_at();
			setState(1849);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,161,_ctx) ) {
			case 1:
				{
				setState(1840);
				k_local();
				}
				break;
			case 2:
				{
				setState(1841);
				k_time();
				setState(1842);
				k_zone();
				setState(1847);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,160,_ctx) ) {
				case 1:
					{
					setState(1843);
					quoted_string();
					}
					break;
				case 2:
					{
					setState(1844);
					k_dbtimezone();
					}
					break;
				case 3:
					{
					setState(1845);
					k_sessiontimezone();
					}
					break;
				case 4:
					{
					setState(1846);
					sql_expression();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_expressionContext extends ParserRuleContext {
		public List<TerminalNode> LPAREN() { return getTokens(OracleSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(OracleSQLParser.LPAREN, i);
		}
		public TerminalNode MINUS() { return getToken(OracleSQLParser.MINUS, 0); }
		public List<TerminalNode> RPAREN() { return getTokens(OracleSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(OracleSQLParser.RPAREN, i);
		}
		public List<Function_expressionContext> function_expression() {
			return getRuleContexts(Function_expressionContext.class);
		}
		public Function_expressionContext function_expression(int i) {
			return getRuleContext(Function_expressionContext.class,i);
		}
		public List<Cast_expressionContext> cast_expression() {
			return getRuleContexts(Cast_expressionContext.class);
		}
		public Cast_expressionContext cast_expression(int i) {
			return getRuleContext(Cast_expressionContext.class,i);
		}
		public List<Simple_expressionContext> simple_expression() {
			return getRuleContexts(Simple_expressionContext.class);
		}
		public Simple_expressionContext simple_expression(int i) {
			return getRuleContext(Simple_expressionContext.class,i);
		}
		public K_dayContext k_day() {
			return getRuleContext(K_dayContext.class,0);
		}
		public R_toContext r_to() {
			return getRuleContext(R_toContext.class,0);
		}
		public K_secondContext k_second() {
			return getRuleContext(K_secondContext.class,0);
		}
		public K_yearContext k_year() {
			return getRuleContext(K_yearContext.class,0);
		}
		public K_monthContext k_month() {
			return getRuleContext(K_monthContext.class,0);
		}
		public List<TerminalNode> NUMBER() { return getTokens(OracleSQLParser.NUMBER); }
		public TerminalNode NUMBER(int i) {
			return getToken(OracleSQLParser.NUMBER, i);
		}
		public Interval_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterInterval_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitInterval_expression(this);
		}
	}

	public final Interval_expressionContext interval_expression() throws RecognitionException {
		Interval_expressionContext _localctx = new Interval_expressionContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_interval_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1851);
			match(LPAREN);
			setState(1855);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,162,_ctx) ) {
			case 1:
				{
				setState(1852);
				function_expression();
				}
				break;
			case 2:
				{
				setState(1853);
				cast_expression();
				}
				break;
			case 3:
				{
				setState(1854);
				simple_expression();
				}
				break;
			}
			setState(1857);
			match(MINUS);
			setState(1861);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
			case 1:
				{
				setState(1858);
				function_expression();
				}
				break;
			case 2:
				{
				setState(1859);
				cast_expression();
				}
				break;
			case 3:
				{
				setState(1860);
				simple_expression();
				}
				break;
			}
			setState(1863);
			match(RPAREN);
			setState(1890);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,168,_ctx) ) {
			case 1:
				{
				setState(1864);
				k_day();
				setState(1868);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(1865);
					match(LPAREN);
					setState(1866);
					match(NUMBER);
					setState(1867);
					match(RPAREN);
					}
				}

				setState(1870);
				r_to();
				setState(1871);
				k_second();
				setState(1875);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,165,_ctx) ) {
				case 1:
					{
					setState(1872);
					match(LPAREN);
					setState(1873);
					match(NUMBER);
					setState(1874);
					match(RPAREN);
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(1877);
				k_year();
				setState(1881);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(1878);
					match(LPAREN);
					setState(1879);
					match(NUMBER);
					setState(1880);
					match(RPAREN);
					}
				}

				setState(1883);
				r_to();
				setState(1884);
				k_month();
				setState(1888);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
				case 1:
					{
					setState(1885);
					match(LPAREN);
					setState(1886);
					match(NUMBER);
					setState(1887);
					match(RPAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Special_expressionContext extends ParserRuleContext {
		public Cluster_set_clauseContext cluster_set_clause() {
			return getRuleContext(Cluster_set_clauseContext.class,0);
		}
		public Special_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_special_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterSpecial_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitSpecial_expression(this);
		}
	}

	public final Special_expressionContext special_expression() throws RecognitionException {
		Special_expressionContext _localctx = new Special_expressionContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_special_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1892);
			cluster_set_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cluster_set_clauseContext extends ParserRuleContext {
		public K_cluster_setContext k_cluster_set() {
			return getRuleContext(K_cluster_setContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public List<Column_specContext> column_spec() {
			return getRuleContexts(Column_specContext.class);
		}
		public Column_specContext column_spec(int i) {
			return getRuleContext(Column_specContext.class,i);
		}
		public K_usingContext k_using() {
			return getRuleContext(K_usingContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public Column_specsContext column_specs() {
			return getRuleContext(Column_specsContext.class,0);
		}
		public TerminalNode ASTERISK() { return getToken(OracleSQLParser.ASTERISK, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public TerminalNode NUMBER() { return getToken(OracleSQLParser.NUMBER, 0); }
		public Cluster_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cluster_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCluster_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCluster_set_clause(this);
		}
	}

	public final Cluster_set_clauseContext cluster_set_clause() throws RecognitionException {
		Cluster_set_clauseContext _localctx = new Cluster_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_cluster_set_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1894);
			k_cluster_set();
			setState(1895);
			match(LPAREN);
			setState(1896);
			column_spec();
			setState(1899);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,169,_ctx) ) {
			case 1:
				{
				setState(1897);
				match(COMMA);
				setState(1898);
				column_spec();
				}
				break;
			}
			setState(1903);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(1901);
				match(COMMA);
				setState(1902);
				match(NUMBER);
				}
			}

			setState(1905);
			k_using();
			setState(1908);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__12:
			case T__51:
			case T__64:
			case T__82:
			case T__84:
			case T__96:
			case T__106:
			case T__115:
			case T__119:
			case T__120:
			case T__122:
			case T__125:
			case T__126:
			case T__127:
			case T__130:
			case T__132:
			case T__133:
			case T__135:
			case T__137:
			case T__138:
			case T__139:
			case T__141:
			case T__144:
			case T__146:
			case T__147:
			case T__149:
			case T__152:
			case T__154:
			case T__157:
			case T__158:
			case T__161:
			case T__164:
			case T__166:
			case T__169:
			case BINDVAR:
			case ID:
			case COLON:
				{
				setState(1906);
				column_specs();
				}
				break;
			case ASTERISK:
				{
				setState(1907);
				match(ASTERISK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1910);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cast_expressionContext extends ParserRuleContext {
		public K_castContext k_cast() {
			return getRuleContext(K_castContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public R_asContext r_as() {
			return getRuleContext(R_asContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public K_multisetContext k_multiset() {
			return getRuleContext(K_multisetContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Datatype_nameContext datatype_name() {
			return getRuleContext(Datatype_nameContext.class,0);
		}
		public Column_specContext column_spec() {
			return getRuleContext(Column_specContext.class,0);
		}
		public Cast_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCast_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCast_expression(this);
		}
	}

	public final Cast_expressionContext cast_expression() throws RecognitionException {
		Cast_expressionContext _localctx = new Cast_expressionContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_cast_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1912);
			k_cast();
			setState(1913);
			match(LPAREN);
			setState(1918);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
			case 1:
				{
				setState(1914);
				sql_expression();
				}
				break;
			case 2:
				{
				setState(1915);
				k_multiset();
				setState(1916);
				subquery();
				}
				break;
			}
			setState(1920);
			r_as();
			setState(1923);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,173,_ctx) ) {
			case 1:
				{
				setState(1921);
				datatype_name();
				}
				break;
			case 2:
				{
				setState(1922);
				column_spec();
				}
				break;
			}
			setState(1925);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datatype_nameContext extends ParserRuleContext {
		public K_binary_integerContext k_binary_integer() {
			return getRuleContext(K_binary_integerContext.class,0);
		}
		public K_binary_floatContext k_binary_float() {
			return getRuleContext(K_binary_floatContext.class,0);
		}
		public K_binary_doubleContext k_binary_double() {
			return getRuleContext(K_binary_doubleContext.class,0);
		}
		public K_naturalContext k_natural() {
			return getRuleContext(K_naturalContext.class,0);
		}
		public K_positiveContext k_positive() {
			return getRuleContext(K_positiveContext.class,0);
		}
		public R_numberContext r_number() {
			return getRuleContext(R_numberContext.class,0);
		}
		public K_numericContext k_numeric() {
			return getRuleContext(K_numericContext.class,0);
		}
		public R_decimalContext r_decimal() {
			return getRuleContext(R_decimalContext.class,0);
		}
		public K_decContext k_dec() {
			return getRuleContext(K_decContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(OracleSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(OracleSQLParser.LPAREN, i);
		}
		public List<TerminalNode> NUMBER() { return getTokens(OracleSQLParser.NUMBER); }
		public TerminalNode NUMBER(int i) {
			return getToken(OracleSQLParser.NUMBER, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(OracleSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(OracleSQLParser.RPAREN, i);
		}
		public TerminalNode COMMA() { return getToken(OracleSQLParser.COMMA, 0); }
		public R_longContext r_long() {
			return getRuleContext(R_longContext.class,0);
		}
		public R_rawContext r_raw() {
			return getRuleContext(R_rawContext.class,0);
		}
		public K_booleanContext k_boolean() {
			return getRuleContext(K_booleanContext.class,0);
		}
		public R_dateContext r_date() {
			return getRuleContext(R_dateContext.class,0);
		}
		public K_intervalContext k_interval() {
			return getRuleContext(K_intervalContext.class,0);
		}
		public K_dayContext k_day() {
			return getRuleContext(K_dayContext.class,0);
		}
		public R_toContext r_to() {
			return getRuleContext(R_toContext.class,0);
		}
		public K_secondContext k_second() {
			return getRuleContext(K_secondContext.class,0);
		}
		public K_yearContext k_year() {
			return getRuleContext(K_yearContext.class,0);
		}
		public K_monthContext k_month() {
			return getRuleContext(K_monthContext.class,0);
		}
		public List<K_timeContext> k_time() {
			return getRuleContexts(K_timeContext.class);
		}
		public K_timeContext k_time(int i) {
			return getRuleContext(K_timeContext.class,i);
		}
		public K_timestampContext k_timestamp() {
			return getRuleContext(K_timestampContext.class,0);
		}
		public R_withContext r_with() {
			return getRuleContext(R_withContext.class,0);
		}
		public K_zoneContext k_zone() {
			return getRuleContext(K_zoneContext.class,0);
		}
		public K_localContext k_local() {
			return getRuleContext(K_localContext.class,0);
		}
		public R_integerContext r_integer() {
			return getRuleContext(R_integerContext.class,0);
		}
		public K_intContext k_int() {
			return getRuleContext(K_intContext.class,0);
		}
		public R_smallintContext r_smallint() {
			return getRuleContext(R_smallintContext.class,0);
		}
		public R_floatContext r_float() {
			return getRuleContext(R_floatContext.class,0);
		}
		public K_realContext k_real() {
			return getRuleContext(K_realContext.class,0);
		}
		public K_doubleContext k_double() {
			return getRuleContext(K_doubleContext.class,0);
		}
		public K_precisionContext k_precision() {
			return getRuleContext(K_precisionContext.class,0);
		}
		public List<R_charContext> r_char() {
			return getRuleContexts(R_charContext.class);
		}
		public R_charContext r_char(int i) {
			return getRuleContext(R_charContext.class,i);
		}
		public K_varyingContext k_varying() {
			return getRuleContext(K_varyingContext.class,0);
		}
		public K_characterContext k_character() {
			return getRuleContext(K_characterContext.class,0);
		}
		public R_setContext r_set() {
			return getRuleContext(R_setContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Column_specContext column_spec() {
			return getRuleContext(Column_specContext.class,0);
		}
		public TerminalNode CHARSET_ATTR() { return getToken(OracleSQLParser.CHARSET_ATTR, 0); }
		public K_byteContext k_byte() {
			return getRuleContext(K_byteContext.class,0);
		}
		public R_varcharContext r_varchar() {
			return getRuleContext(R_varcharContext.class,0);
		}
		public R_varchar2Context r_varchar2() {
			return getRuleContext(R_varchar2Context.class,0);
		}
		public K_ncharContext k_nchar() {
			return getRuleContext(K_ncharContext.class,0);
		}
		public K_nvarcharContext k_nvarchar() {
			return getRuleContext(K_nvarcharContext.class,0);
		}
		public K_nvarchar2Context k_nvarchar2() {
			return getRuleContext(K_nvarchar2Context.class,0);
		}
		public K_nationalContext k_national() {
			return getRuleContext(K_nationalContext.class,0);
		}
		public K_mlslabelContext k_mlslabel() {
			return getRuleContext(K_mlslabelContext.class,0);
		}
		public K_pls_integerContext k_pls_integer() {
			return getRuleContext(K_pls_integerContext.class,0);
		}
		public K_blobContext k_blob() {
			return getRuleContext(K_blobContext.class,0);
		}
		public K_clobContext k_clob() {
			return getRuleContext(K_clobContext.class,0);
		}
		public K_nclobContext k_nclob() {
			return getRuleContext(K_nclobContext.class,0);
		}
		public K_bfileContext k_bfile() {
			return getRuleContext(K_bfileContext.class,0);
		}
		public R_rowidContext r_rowid() {
			return getRuleContext(R_rowidContext.class,0);
		}
		public K_urowidContext k_urowid() {
			return getRuleContext(K_urowidContext.class,0);
		}
		public Datatype_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datatype_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterDatatype_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitDatatype_name(this);
		}
	}

	public final Datatype_nameContext datatype_name() throws RecognitionException {
		Datatype_nameContext _localctx = new Datatype_nameContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_datatype_name);
		int _la;
		try {
			setState(2148);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1927);
				k_binary_integer();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1928);
				k_binary_float();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1929);
				k_binary_double();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1930);
				k_natural();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1931);
				k_positive();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1936);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,174,_ctx) ) {
				case 1:
					{
					setState(1932);
					r_number();
					}
					break;
				case 2:
					{
					setState(1933);
					k_numeric();
					}
					break;
				case 3:
					{
					setState(1934);
					r_decimal();
					}
					break;
				case 4:
					{
					setState(1935);
					k_dec();
					}
					break;
				}
				setState(1945);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(1938);
					match(LPAREN);
					setState(1939);
					match(NUMBER);
					setState(1942);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1940);
						match(COMMA);
						setState(1941);
						match(NUMBER);
						}
					}

					setState(1944);
					match(RPAREN);
					}
				}

				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1947);
				r_long();
				setState(1949);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__77) {
					{
					setState(1948);
					r_raw();
					}
				}

				setState(1954);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(1951);
					match(LPAREN);
					setState(1952);
					match(NUMBER);
					setState(1953);
					match(RPAREN);
					}
				}

				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1956);
				r_raw();
				setState(1960);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(1957);
					match(LPAREN);
					setState(1958);
					match(NUMBER);
					setState(1959);
					match(RPAREN);
					}
				}

				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1962);
				k_boolean();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1963);
				r_date();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1964);
				k_interval();
				setState(1965);
				k_day();
				setState(1969);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(1966);
					match(LPAREN);
					setState(1967);
					match(NUMBER);
					setState(1968);
					match(RPAREN);
					}
				}

				setState(1971);
				r_to();
				setState(1972);
				k_second();
				setState(1976);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(1973);
					match(LPAREN);
					setState(1974);
					match(NUMBER);
					setState(1975);
					match(RPAREN);
					}
				}

				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1978);
				k_interval();
				setState(1979);
				k_year();
				setState(1983);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(1980);
					match(LPAREN);
					setState(1981);
					match(NUMBER);
					setState(1982);
					match(RPAREN);
					}
				}

				setState(1985);
				r_to();
				setState(1986);
				k_month();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1990);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,183,_ctx) ) {
				case 1:
					{
					setState(1988);
					k_time();
					}
					break;
				case 2:
					{
					setState(1989);
					k_timestamp();
					}
					break;
				}
				setState(1995);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(1992);
					match(LPAREN);
					setState(1993);
					match(NUMBER);
					setState(1994);
					match(RPAREN);
					}
				}

				setState(2004);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__114) {
					{
					setState(1997);
					r_with();
					setState(1999);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,185,_ctx) ) {
					case 1:
						{
						setState(1998);
						k_local();
						}
						break;
					}
					setState(2001);
					k_time();
					setState(2002);
					k_zone();
					}
				}

				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2006);
				r_integer();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2007);
				k_int();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2008);
				r_smallint();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2009);
				r_float();
				setState(2013);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(2010);
					match(LPAREN);
					setState(2011);
					match(NUMBER);
					setState(2012);
					match(RPAREN);
					}
				}

				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2015);
				k_real();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2016);
				k_double();
				setState(2017);
				k_precision();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2019);
				r_char();
				setState(2021);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
				case 1:
					{
					setState(2020);
					k_varying();
					}
					break;
				}
				setState(2030);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
				case 1:
					{
					setState(2023);
					match(LPAREN);
					setState(2024);
					match(NUMBER);
					setState(2027);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,189,_ctx) ) {
					case 1:
						{
						setState(2025);
						k_byte();
						}
						break;
					case 2:
						{
						setState(2026);
						r_char();
						}
						break;
					}
					setState(2029);
					match(RPAREN);
					}
					break;
				}
				setState(2040);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,192,_ctx) ) {
				case 1:
					{
					setState(2032);
					k_character();
					setState(2033);
					r_set();
					setState(2038);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,191,_ctx) ) {
					case 1:
						{
						setState(2034);
						identifier(T_UNKNOWN,0);
						}
						break;
					case 2:
						{
						setState(2035);
						column_spec();
						setState(2036);
						match(CHARSET_ATTR);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2042);
				r_varchar();
				setState(2050);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
				case 1:
					{
					setState(2043);
					match(LPAREN);
					setState(2044);
					match(NUMBER);
					setState(2047);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
					case 1:
						{
						setState(2045);
						k_byte();
						}
						break;
					case 2:
						{
						setState(2046);
						r_char();
						}
						break;
					}
					setState(2049);
					match(RPAREN);
					}
					break;
				}
				setState(2060);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
				case 1:
					{
					setState(2052);
					k_character();
					setState(2053);
					r_set();
					setState(2058);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,195,_ctx) ) {
					case 1:
						{
						setState(2054);
						identifier(T_UNKNOWN,0);
						}
						break;
					case 2:
						{
						setState(2055);
						column_spec();
						setState(2056);
						match(CHARSET_ATTR);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(2062);
				r_varchar2();
				setState(2070);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,198,_ctx) ) {
				case 1:
					{
					setState(2063);
					match(LPAREN);
					setState(2064);
					match(NUMBER);
					setState(2067);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
					case 1:
						{
						setState(2065);
						k_byte();
						}
						break;
					case 2:
						{
						setState(2066);
						r_char();
						}
						break;
					}
					setState(2069);
					match(RPAREN);
					}
					break;
				}
				setState(2080);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,200,_ctx) ) {
				case 1:
					{
					setState(2072);
					k_character();
					setState(2073);
					r_set();
					setState(2078);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,199,_ctx) ) {
					case 1:
						{
						setState(2074);
						identifier(T_UNKNOWN,0);
						}
						break;
					case 2:
						{
						setState(2075);
						column_spec();
						setState(2076);
						match(CHARSET_ATTR);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(2082);
				k_character();
				setState(2084);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,201,_ctx) ) {
				case 1:
					{
					setState(2083);
					k_varying();
					}
					break;
				}
				setState(2089);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(2086);
					match(LPAREN);
					setState(2087);
					match(NUMBER);
					setState(2088);
					match(RPAREN);
					}
				}

				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(2091);
				k_nchar();
				setState(2093);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,203,_ctx) ) {
				case 1:
					{
					setState(2092);
					k_varying();
					}
					break;
				}
				setState(2098);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(2095);
					match(LPAREN);
					setState(2096);
					match(NUMBER);
					setState(2097);
					match(RPAREN);
					}
				}

				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(2100);
				k_nvarchar();
				setState(2104);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(2101);
					match(LPAREN);
					setState(2102);
					match(NUMBER);
					setState(2103);
					match(RPAREN);
					}
				}

				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(2106);
				k_nvarchar2();
				setState(2110);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(2107);
					match(LPAREN);
					setState(2108);
					match(NUMBER);
					setState(2109);
					match(RPAREN);
					}
				}

				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(2112);
				k_national();
				setState(2115);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,207,_ctx) ) {
				case 1:
					{
					setState(2113);
					k_character();
					}
					break;
				case 2:
					{
					setState(2114);
					r_char();
					}
					break;
				}
				setState(2118);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,208,_ctx) ) {
				case 1:
					{
					setState(2117);
					k_varying();
					}
					break;
				}
				setState(2123);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(2120);
					match(LPAREN);
					setState(2121);
					match(NUMBER);
					setState(2122);
					match(RPAREN);
					}
				}

				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(2125);
				k_mlslabel();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(2126);
				k_pls_integer();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(2127);
				k_blob();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(2128);
				k_clob();
				setState(2137);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
				case 1:
					{
					setState(2129);
					k_character();
					setState(2130);
					r_set();
					setState(2135);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,210,_ctx) ) {
					case 1:
						{
						setState(2131);
						identifier(T_UNKNOWN,0);
						}
						break;
					case 2:
						{
						setState(2132);
						column_spec();
						setState(2133);
						match(CHARSET_ATTR);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(2139);
				k_nclob();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(2140);
				k_bfile();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(2141);
				r_rowid();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(2142);
				k_urowid();
				setState(2146);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(2143);
					match(LPAREN);
					setState(2144);
					match(NUMBER);
					setState(2145);
					match(RPAREN);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Boolean_literalContext extends ParserRuleContext {
		public R_trueContext r_true() {
			return getRuleContext(R_trueContext.class,0);
		}
		public R_falseContext r_false() {
			return getRuleContext(R_falseContext.class,0);
		}
		public Boolean_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolean_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterBoolean_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitBoolean_literal(this);
		}
	}

	public final Boolean_literalContext boolean_literal() throws RecognitionException {
		Boolean_literalContext _localctx = new Boolean_literalContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_boolean_literal);
		try {
			setState(2152);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__101:
				enterOuterAlt(_localctx, 1);
				{
				setState(2150);
				r_true();
				}
				break;
			case T__32:
				enterOuterAlt(_localctx, 2);
				{
				setState(2151);
				r_false();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class T_aliasContext extends ParserRuleContext {
		public int aliasUsage;
		public Sql_identifierContext sql_identifier() {
			return getRuleContext(Sql_identifierContext.class,0);
		}
		public T_aliasContext(ParserRuleContext parent, int invokingState) { super(parent, invokingState); }
		public T_aliasContext(ParserRuleContext parent, int invokingState, int aliasUsage) {
			super(parent, invokingState);
			this.aliasUsage = aliasUsage;
		}
		@Override public int getRuleIndex() { return RULE_t_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterT_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitT_alias(this);
		}
	}

	public final T_aliasContext t_alias(int aliasUsage) throws RecognitionException {
		T_aliasContext _localctx = new T_aliasContext(_ctx, getState(), aliasUsage);
		enterRule(_localctx, 122, RULE_t_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2154);
			sql_identifier(T_TABLE_ALIAS,aliasUsage);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_aliasContext extends ParserRuleContext {
		public Sql_identifierContext sql_identifier() {
			return getRuleContext(Sql_identifierContext.class,0);
		}
		public R_asContext r_as() {
			return getRuleContext(R_asContext.class,0);
		}
		public C_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterC_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitC_alias(this);
		}
	}

	public final C_aliasContext c_alias() throws RecognitionException {
		C_aliasContext _localctx = new C_aliasContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_c_alias);
		int _la;
		try {
			setState(2161);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2157);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__7) {
					{
					setState(2156);
					r_as();
					}
				}

				setState(2159);
				sql_identifier(T_COLUMN_ALIAS,T_DECL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2160);
				r_as();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_specContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public T_aliasContext t_alias() {
			return getRuleContext(T_aliasContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(OracleSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(OracleSQLParser.DOT, i);
		}
		public Outer_join_signContext outer_join_sign() {
			return getRuleContext(Outer_join_signContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Package_nameContext package_name() {
			return getRuleContext(Package_nameContext.class,0);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public Pseudo_columnContext pseudo_column() {
			return getRuleContext(Pseudo_columnContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Column_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterColumn_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitColumn_spec(this);
		}
	}

	public final Column_specContext column_spec() throws RecognitionException {
		Column_specContext _localctx = new Column_specContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_column_spec);
		try {
			setState(2187);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,220,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2171);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
				case 1:
					{
					setState(2166);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
					case 1:
						{
						setState(2163);
						schema_name();
						setState(2164);
						match(DOT);
						}
						break;
					}
					setState(2168);
					t_alias(T_USE);
					setState(2169);
					match(DOT);
					}
					break;
				}
				setState(2173);
				column_name();
				setState(2175);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
				case 1:
					{
					setState(2174);
					outer_join_sign();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2177);
				schema_name();
				setState(2178);
				match(DOT);
				setState(2179);
				package_name();
				setState(2180);
				match(DOT);
				setState(2181);
				identifier(T_UNKNOWN,0);
				setState(2182);
				match(DOT);
				setState(2183);
				identifier(T_UNKNOWN,0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2185);
				pseudo_column();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2186);
				bind_variable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pseudo_columnContext extends ParserRuleContext {
		public R_nullContext r_null() {
			return getRuleContext(R_nullContext.class,0);
		}
		public R_sysdateContext r_sysdate() {
			return getRuleContext(R_sysdateContext.class,0);
		}
		public R_userContext r_user() {
			return getRuleContext(R_userContext.class,0);
		}
		public R_levelContext r_level() {
			return getRuleContext(R_levelContext.class,0);
		}
		public Pseudo_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pseudo_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterPseudo_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitPseudo_column(this);
		}
	}

	public final Pseudo_columnContext pseudo_column() throws RecognitionException {
		Pseudo_columnContext _localctx = new Pseudo_columnContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_pseudo_column);
		try {
			setState(2193);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__64:
				enterOuterAlt(_localctx, 1);
				{
				setState(2189);
				r_null();
				}
				break;
			case T__96:
				enterOuterAlt(_localctx, 2);
				{
				setState(2190);
				r_sysdate();
				}
				break;
			case T__106:
				enterOuterAlt(_localctx, 3);
				{
				setState(2191);
				r_user();
				}
				break;
			case T__51:
				enterOuterAlt(_localctx, 4);
				{
				setState(2192);
				r_level();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_nameContext extends ParserRuleContext {
		public Sql_identifierContext sql_identifier() {
			return getRuleContext(Sql_identifierContext.class,0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterFunction_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitFunction_name(this);
		}
	}

	public final Function_nameContext function_name() throws RecognitionException {
		Function_nameContext _localctx = new Function_nameContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_function_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2195);
			sql_identifier(T_FUNCTION_NAME,0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_specContext extends ParserRuleContext {
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(OracleSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(OracleSQLParser.DOT, i);
		}
		public Package_nameContext package_name() {
			return getRuleContext(Package_nameContext.class,0);
		}
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public Function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterFunction_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitFunction_spec(this);
		}
	}

	public final Function_specContext function_spec() throws RecognitionException {
		Function_specContext _localctx = new Function_specContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_function_spec);
		try {
			setState(2208);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2197);
				schema_name();
				setState(2198);
				match(DOT);
				setState(2199);
				package_name();
				setState(2200);
				match(DOT);
				setState(2201);
				function_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2203);
				schema_name();
				setState(2204);
				match(DOT);
				setState(2205);
				function_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2207);
				function_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public int identifierClass;
		public int usageType;
		public Token i;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState) { super(parent, invokingState); }
		public IdentifierContext(ParserRuleContext parent, int invokingState, int identifierClass, int usageType) {
			super(parent, invokingState);
			this.identifierClass = identifierClass;
			this.usageType = usageType;
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitIdentifier(this);
		}
	}

	public final IdentifierContext identifier(int identifierClass,int usageType) throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState(), identifierClass, usageType);
		enterRule(_localctx, 134, RULE_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2210);
			((IdentifierContext)_localctx).i = match(ID);
			 ((IdentifierContext)_localctx).i->user1 = identifierClass; ((IdentifierContext)_localctx).i->user2 = usageType; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bind_variableContext extends ParserRuleContext {
		public Token i;
		public Token c;
		public Token n;
		public TerminalNode BINDVAR() { return getToken(OracleSQLParser.BINDVAR, 0); }
		public TerminalNode COLON() { return getToken(OracleSQLParser.COLON, 0); }
		public TerminalNode NUMBER() { return getToken(OracleSQLParser.NUMBER, 0); }
		public Bind_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bind_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterBind_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitBind_variable(this);
		}
	}

	public final Bind_variableContext bind_variable() throws RecognitionException {
		Bind_variableContext _localctx = new Bind_variableContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_bind_variable);
		try {
			setState(2219);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINDVAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(2213);
				((Bind_variableContext)_localctx).i = match(BINDVAR);
				 ((Bind_variableContext)_localctx).i->user1 = T_BINDVAR_NAME; ((Bind_variableContext)_localctx).i->user2 = 0; 
				}
				break;
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(2215);
				((Bind_variableContext)_localctx).c = match(COLON);
				 ((Bind_variableContext)_localctx).c->user1 = T_BINDVAR_NAME; ((Bind_variableContext)_localctx).c->user2 = 0; 
				setState(2217);
				((Bind_variableContext)_localctx).n = match(NUMBER);
				 ((Bind_variableContext)_localctx).n->user1 = T_BINDVAR_NAME; ((Bind_variableContext)_localctx).n->user2 = 0; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_identifierContext extends ParserRuleContext {
		public int identifierClass;
		public int usageType;
		public IdentifierContext i;
		public KeywordContext k;
		public R_rowidContext ri;
		public R_rownumContext rn;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public KeywordContext keyword() {
			return getRuleContext(KeywordContext.class,0);
		}
		public R_rowidContext r_rowid() {
			return getRuleContext(R_rowidContext.class,0);
		}
		public R_rownumContext r_rownum() {
			return getRuleContext(R_rownumContext.class,0);
		}
		public Sql_identifierContext(ParserRuleContext parent, int invokingState) { super(parent, invokingState); }
		public Sql_identifierContext(ParserRuleContext parent, int invokingState, int identifierClass, int usageType) {
			super(parent, invokingState);
			this.identifierClass = identifierClass;
			this.usageType = usageType;
		}
		@Override public int getRuleIndex() { return RULE_sql_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterSql_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitSql_identifier(this);
		}
	}

	public final Sql_identifierContext sql_identifier(int identifierClass,int usageType) throws RecognitionException {
		Sql_identifierContext _localctx = new Sql_identifierContext(_ctx, getState(), identifierClass, usageType);
		enterRule(_localctx, 138, RULE_sql_identifier);
		try {
			setState(2225);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2221);
				((Sql_identifierContext)_localctx).i = identifier(identifierClass, usageType);
				}
				break;
			case T__12:
			case T__115:
			case T__119:
			case T__120:
			case T__122:
			case T__125:
			case T__126:
			case T__127:
			case T__130:
			case T__132:
			case T__133:
			case T__135:
			case T__137:
			case T__138:
			case T__139:
			case T__141:
			case T__144:
			case T__146:
			case T__147:
			case T__149:
			case T__152:
			case T__154:
			case T__157:
			case T__158:
			case T__161:
			case T__164:
			case T__166:
			case T__169:
				enterOuterAlt(_localctx, 2);
				{
				setState(2222);
				((Sql_identifierContext)_localctx).k = keyword(identifierClass, usageType);
				}
				break;
			case T__82:
				enterOuterAlt(_localctx, 3);
				{
				setState(2223);
				((Sql_identifierContext)_localctx).ri = r_rowid();
				}
				break;
			case T__84:
				enterOuterAlt(_localctx, 4);
				{
				setState(2224);
				((Sql_identifierContext)_localctx).rn = r_rownum();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_reference_listContext extends ParserRuleContext {
		public List<Join_clauseContext> join_clause() {
			return getRuleContexts(Join_clauseContext.class);
		}
		public Join_clauseContext join_clause(int i) {
			return getRuleContext(Join_clauseContext.class,i);
		}
		public List<Table_referenceContext> table_reference() {
			return getRuleContexts(Table_referenceContext.class);
		}
		public Table_referenceContext table_reference(int i) {
			return getRuleContext(Table_referenceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public Table_reference_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_reference_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterTable_reference_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitTable_reference_list(this);
		}
	}

	public final Table_reference_listContext table_reference_list() throws RecognitionException {
		Table_reference_listContext _localctx = new Table_reference_listContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_table_reference_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2229);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
			case 1:
				{
				setState(2227);
				join_clause();
				}
				break;
			case 2:
				{
				setState(2228);
				table_reference();
				}
				break;
			}
			setState(2238);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,227,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2231);
					match(COMMA);
					setState(2234);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
					case 1:
						{
						setState(2232);
						join_clause();
						}
						break;
					case 2:
						{
						setState(2233);
						table_reference();
						}
						break;
					}
					}
					} 
				}
				setState(2240);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,227,_ctx);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_referenceContext extends ParserRuleContext {
		public Query_table_expressionContext query_table_expression() {
			return getRuleContext(Query_table_expressionContext.class,0);
		}
		public Flashback_query_clauseContext flashback_query_clause() {
			return getRuleContext(Flashback_query_clauseContext.class,0);
		}
		public T_aliasContext t_alias() {
			return getRuleContext(T_aliasContext.class,0);
		}
		public K_onlyContext k_only() {
			return getRuleContext(K_onlyContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public Table_referenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_reference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterTable_reference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitTable_reference(this);
		}
	}

	public final Table_referenceContext table_reference() throws RecognitionException {
		Table_referenceContext _localctx = new Table_referenceContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_table_reference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2247);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
			case 1:
				{
				{
				setState(2241);
				k_only();
				setState(2242);
				match(LPAREN);
				setState(2243);
				query_table_expression();
				setState(2244);
				match(RPAREN);
				}
				}
				break;
			case 2:
				{
				setState(2246);
				query_table_expression();
				}
				break;
			}
			setState(2250);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,229,_ctx) ) {
			case 1:
				{
				setState(2249);
				flashback_query_clause();
				}
				break;
			}
			setState(2253);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,230,_ctx) ) {
			case 1:
				{
				setState(2252);
				t_alias(T_DECL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_table_expressionContext extends ParserRuleContext {
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(OracleSQLParser.DOT, 0); }
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public TerminalNode AT_SIGN() { return getToken(OracleSQLParser.AT_SIGN, 0); }
		public Dblink_nameContext dblink_name() {
			return getRuleContext(Dblink_nameContext.class,0);
		}
		public Sample_clauseContext sample_clause() {
			return getRuleContext(Sample_clauseContext.class,0);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Subquery_restricrion_clauseContext subquery_restricrion_clause() {
			return getRuleContext(Subquery_restricrion_clauseContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public Table_collection_clauseContext table_collection_clause() {
			return getRuleContext(Table_collection_clauseContext.class,0);
		}
		public Query_table_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_table_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterQuery_table_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitQuery_table_expression(this);
		}
	}

	public final Query_table_expressionContext query_table_expression() throws RecognitionException {
		Query_table_expressionContext _localctx = new Query_table_expressionContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_query_table_expression);
		int _la;
		try {
			setState(2297);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,240,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2258);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
				case 1:
					{
					setState(2255);
					schema_name();
					setState(2256);
					match(DOT);
					}
					break;
				}
				setState(2260);
				table_name();
				setState(2264);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
				case 1:
					{
					setState(2261);
					partition_extension_clause();
					}
					break;
				case 2:
					{
					setState(2262);
					match(AT_SIGN);
					setState(2263);
					dblink_name();
					}
					break;
				}
				setState(2267);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,233,_ctx) ) {
				case 1:
					{
					setState(2266);
					sample_clause();
					}
					break;
				}
				setState(2271);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,234,_ctx) ) {
				case 1:
					{
					setState(2269);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(2270);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2273);
				subquery();
				setState(2275);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,235,_ctx) ) {
				case 1:
					{
					setState(2274);
					subquery_restricrion_clause();
					}
					break;
				}
				setState(2279);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,236,_ctx) ) {
				case 1:
					{
					setState(2277);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(2278);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2281);
				match(LPAREN);
				setState(2282);
				subquery();
				setState(2284);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__114) {
					{
					setState(2283);
					subquery_restricrion_clause();
					}
				}

				setState(2288);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case T__149:
					{
					setState(2286);
					pivot_clause();
					}
					break;
				case T__166:
					{
					setState(2287);
					unpivot_clause();
					}
					break;
				case RPAREN:
					break;
				default:
					break;
				}
				setState(2290);
				match(RPAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2292);
				table_collection_clause();
				setState(2295);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,239,_ctx) ) {
				case 1:
					{
					setState(2293);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(2294);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Flashback_query_clauseContext extends ParserRuleContext {
		public R_asContext r_as() {
			return getRuleContext(R_asContext.class,0);
		}
		public R_ofContext r_of() {
			return getRuleContext(R_ofContext.class,0);
		}
		public List<Sql_expressionContext> sql_expression() {
			return getRuleContexts(Sql_expressionContext.class);
		}
		public Sql_expressionContext sql_expression(int i) {
			return getRuleContext(Sql_expressionContext.class,i);
		}
		public List<K_scnContext> k_scn() {
			return getRuleContexts(K_scnContext.class);
		}
		public K_scnContext k_scn(int i) {
			return getRuleContext(K_scnContext.class,i);
		}
		public List<K_timestampContext> k_timestamp() {
			return getRuleContexts(K_timestampContext.class);
		}
		public K_timestampContext k_timestamp(int i) {
			return getRuleContext(K_timestampContext.class,i);
		}
		public K_versionsContext k_versions() {
			return getRuleContext(K_versionsContext.class,0);
		}
		public R_betweenContext r_between() {
			return getRuleContext(R_betweenContext.class,0);
		}
		public R_andContext r_and() {
			return getRuleContext(R_andContext.class,0);
		}
		public K_mivalueContext k_mivalue() {
			return getRuleContext(K_mivalueContext.class,0);
		}
		public K_maxvalueContext k_maxvalue() {
			return getRuleContext(K_maxvalueContext.class,0);
		}
		public Flashback_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flashback_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterFlashback_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitFlashback_query_clause(this);
		}
	}

	public final Flashback_query_clauseContext flashback_query_clause() throws RecognitionException {
		Flashback_query_clauseContext _localctx = new Flashback_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_flashback_query_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2314);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__168) {
				{
				setState(2299);
				k_versions();
				setState(2300);
				r_between();
				setState(2303);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,241,_ctx) ) {
				case 1:
					{
					setState(2301);
					k_scn();
					}
					break;
				case 2:
					{
					setState(2302);
					k_timestamp();
					}
					break;
				}
				setState(2307);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,242,_ctx) ) {
				case 1:
					{
					setState(2305);
					sql_expression();
					}
					break;
				case 2:
					{
					setState(2306);
					k_mivalue();
					}
					break;
				}
				setState(2309);
				r_and();
				setState(2312);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
				case 1:
					{
					setState(2310);
					sql_expression();
					}
					break;
				case 2:
					{
					setState(2311);
					k_maxvalue();
					}
					break;
				}
				}
			}

			setState(2316);
			r_as();
			setState(2317);
			r_of();
			setState(2320);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,245,_ctx) ) {
			case 1:
				{
				setState(2318);
				k_scn();
				}
				break;
			case 2:
				{
				setState(2319);
				k_timestamp();
				}
				break;
			}
			setState(2322);
			sql_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sample_clauseContext extends ParserRuleContext {
		public K_sampleContext k_sample() {
			return getRuleContext(K_sampleContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(OracleSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(OracleSQLParser.LPAREN, i);
		}
		public List<Sample_percentContext> sample_percent() {
			return getRuleContexts(Sample_percentContext.class);
		}
		public Sample_percentContext sample_percent(int i) {
			return getRuleContext(Sample_percentContext.class,i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(OracleSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(OracleSQLParser.RPAREN, i);
		}
		public K_blockContext k_block() {
			return getRuleContext(K_blockContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(OracleSQLParser.COMMA, 0); }
		public K_seedContext k_seed() {
			return getRuleContext(K_seedContext.class,0);
		}
		public Seed_valueContext seed_value() {
			return getRuleContext(Seed_valueContext.class,0);
		}
		public Sample_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sample_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterSample_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitSample_clause(this);
		}
	}

	public final Sample_clauseContext sample_clause() throws RecognitionException {
		Sample_clauseContext _localctx = new Sample_clauseContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_sample_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2324);
			k_sample();
			setState(2326);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
			case 1:
				{
				setState(2325);
				k_block();
				}
				break;
			}
			setState(2328);
			match(LPAREN);
			setState(2329);
			sample_percent();
			setState(2332);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2330);
				match(COMMA);
				setState(2331);
				sample_percent();
				}
			}

			setState(2334);
			match(RPAREN);
			setState(2340);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,248,_ctx) ) {
			case 1:
				{
				setState(2335);
				k_seed();
				setState(2336);
				match(LPAREN);
				setState(2337);
				seed_value();
				setState(2338);
				match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_extension_clauseContext extends ParserRuleContext {
		public K_partitionContext k_partition() {
			return getRuleContext(K_partitionContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public PartitionContext partition() {
			return getRuleContext(PartitionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public R_forContext r_for() {
			return getRuleContext(R_forContext.class,0);
		}
		public List<Partition_key_valueContext> partition_key_value() {
			return getRuleContexts(Partition_key_valueContext.class);
		}
		public Partition_key_valueContext partition_key_value(int i) {
			return getRuleContext(Partition_key_valueContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public K_subpartitionContext k_subpartition() {
			return getRuleContext(K_subpartitionContext.class,0);
		}
		public List<Subpartition_key_valueContext> subpartition_key_value() {
			return getRuleContexts(Subpartition_key_valueContext.class);
		}
		public Subpartition_key_valueContext subpartition_key_value(int i) {
			return getRuleContext(Subpartition_key_valueContext.class,i);
		}
		public Partition_extension_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_extension_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterPartition_extension_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitPartition_extension_clause(this);
		}
	}

	public final Partition_extension_clauseContext partition_extension_clause() throws RecognitionException {
		Partition_extension_clauseContext _localctx = new Partition_extension_clauseContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_partition_extension_clause);
		int _la;
		try {
			setState(2380);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2342);
				k_partition();
				setState(2359);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LPAREN:
					{
					{
					setState(2343);
					match(LPAREN);
					setState(2344);
					partition();
					setState(2345);
					match(RPAREN);
					}
					}
					break;
				case T__35:
					{
					{
					setState(2347);
					r_for();
					setState(2348);
					match(LPAREN);
					setState(2349);
					partition_key_value();
					setState(2354);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2350);
						match(COMMA);
						setState(2351);
						partition_key_value();
						}
						}
						setState(2356);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2357);
					match(RPAREN);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2361);
				k_subpartition();
				setState(2378);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LPAREN:
					{
					{
					setState(2362);
					match(LPAREN);
					setState(2363);
					partition();
					setState(2364);
					match(RPAREN);
					}
					}
					break;
				case T__35:
					{
					{
					setState(2366);
					r_for();
					setState(2367);
					match(LPAREN);
					setState(2368);
					subpartition_key_value();
					setState(2373);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2369);
						match(COMMA);
						setState(2370);
						subpartition_key_value();
						}
						}
						setState(2375);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2376);
					match(RPAREN);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_restricrion_clauseContext extends ParserRuleContext {
		public R_withContext r_with() {
			return getRuleContext(R_withContext.class,0);
		}
		public K_readContext k_read() {
			return getRuleContext(K_readContext.class,0);
		}
		public K_onlyContext k_only() {
			return getRuleContext(K_onlyContext.class,0);
		}
		public R_checkContext r_check() {
			return getRuleContext(R_checkContext.class,0);
		}
		public R_optionContext r_option() {
			return getRuleContext(R_optionContext.class,0);
		}
		public K_constraintContext k_constraint() {
			return getRuleContext(K_constraintContext.class,0);
		}
		public ConstraintContext constraint() {
			return getRuleContext(ConstraintContext.class,0);
		}
		public Subquery_restricrion_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_restricrion_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterSubquery_restricrion_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitSubquery_restricrion_clause(this);
		}
	}

	public final Subquery_restricrion_clauseContext subquery_restricrion_clause() throws RecognitionException {
		Subquery_restricrion_clauseContext _localctx = new Subquery_restricrion_clauseContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_subquery_restricrion_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2382);
			r_with();
			setState(2393);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
			case 1:
				{
				{
				setState(2383);
				k_read();
				setState(2384);
				k_only();
				}
				}
				break;
			case 2:
				{
				{
				setState(2386);
				r_check();
				setState(2387);
				r_option();
				setState(2391);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
				case 1:
					{
					setState(2388);
					k_constraint();
					setState(2389);
					constraint();
					}
					break;
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_collection_clauseContext extends ParserRuleContext {
		public Collection_expressionContext collection_expression() {
			return getRuleContext(Collection_expressionContext.class,0);
		}
		public R_tableContext r_table() {
			return getRuleContext(R_tableContext.class,0);
		}
		public K_theContext k_the() {
			return getRuleContext(K_theContext.class,0);
		}
		public Outer_join_signContext outer_join_sign() {
			return getRuleContext(Outer_join_signContext.class,0);
		}
		public Table_collection_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_collection_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterTable_collection_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitTable_collection_clause(this);
		}
	}

	public final Table_collection_clauseContext table_collection_clause() throws RecognitionException {
		Table_collection_clauseContext _localctx = new Table_collection_clauseContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_table_collection_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2397);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__97:
				{
				setState(2395);
				r_table();
				}
				break;
			case T__163:
				{
				setState(2396);
				k_the();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2399);
			collection_expression();
			setState(2401);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,257,_ctx) ) {
			case 1:
				{
				setState(2400);
				outer_join_sign();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_clauseContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public Join_clauseContext join_clause() {
			return getRuleContext(Join_clauseContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public Table_referenceContext table_reference() {
			return getRuleContext(Table_referenceContext.class,0);
		}
		public List<Inner_cross_join_clauseContext> inner_cross_join_clause() {
			return getRuleContexts(Inner_cross_join_clauseContext.class);
		}
		public Inner_cross_join_clauseContext inner_cross_join_clause(int i) {
			return getRuleContext(Inner_cross_join_clauseContext.class,i);
		}
		public List<Outer_join_clauseContext> outer_join_clause() {
			return getRuleContexts(Outer_join_clauseContext.class);
		}
		public Outer_join_clauseContext outer_join_clause(int i) {
			return getRuleContext(Outer_join_clauseContext.class,i);
		}
		public Join_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterJoin_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitJoin_clause(this);
		}
	}

	public final Join_clauseContext join_clause() throws RecognitionException {
		Join_clauseContext _localctx = new Join_clauseContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_join_clause);
		try {
			int _alt;
			setState(2420);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,261,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2408);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,258,_ctx) ) {
				case 1:
					{
					setState(2403);
					match(LPAREN);
					setState(2404);
					join_clause();
					setState(2405);
					match(RPAREN);
					}
					break;
				case 2:
					{
					setState(2407);
					table_reference();
					}
					break;
				}
				setState(2412); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						setState(2412);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,259,_ctx) ) {
						case 1:
							{
							setState(2410);
							inner_cross_join_clause();
							}
							break;
						case 2:
							{
							setState(2411);
							outer_join_clause();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2414); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,260,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2416);
				match(LPAREN);
				setState(2417);
				join_clause();
				setState(2418);
				match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inner_cross_join_clauseContext extends ParserRuleContext {
		public K_joinContext k_join() {
			return getRuleContext(K_joinContext.class,0);
		}
		public Table_referenceContext table_reference() {
			return getRuleContext(Table_referenceContext.class,0);
		}
		public K_innerContext k_inner() {
			return getRuleContext(K_innerContext.class,0);
		}
		public List<R_onContext> r_on() {
			return getRuleContexts(R_onContext.class);
		}
		public R_onContext r_on(int i) {
			return getRuleContext(R_onContext.class,i);
		}
		public List<Sql_conditionContext> sql_condition() {
			return getRuleContexts(Sql_conditionContext.class);
		}
		public Sql_conditionContext sql_condition(int i) {
			return getRuleContext(Sql_conditionContext.class,i);
		}
		public List<K_usingContext> k_using() {
			return getRuleContexts(K_usingContext.class);
		}
		public K_usingContext k_using(int i) {
			return getRuleContext(K_usingContext.class,i);
		}
		public List<TerminalNode> LPAREN() { return getTokens(OracleSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(OracleSQLParser.LPAREN, i);
		}
		public List<Column_specsContext> column_specs() {
			return getRuleContexts(Column_specsContext.class);
		}
		public Column_specsContext column_specs(int i) {
			return getRuleContext(Column_specsContext.class,i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(OracleSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(OracleSQLParser.RPAREN, i);
		}
		public K_crossContext k_cross() {
			return getRuleContext(K_crossContext.class,0);
		}
		public K_naturalContext k_natural() {
			return getRuleContext(K_naturalContext.class,0);
		}
		public Inner_cross_join_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inner_cross_join_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterInner_cross_join_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitInner_cross_join_clause(this);
		}
	}

	public final Inner_cross_join_clauseContext inner_cross_join_clause() throws RecognitionException {
		Inner_cross_join_clauseContext _localctx = new Inner_cross_join_clauseContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_inner_cross_join_clause);
		try {
			int _alt;
			setState(2450);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,267,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2423);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
				case 1:
					{
					setState(2422);
					k_inner();
					}
					break;
				}
				setState(2425);
				k_join();
				setState(2426);
				table_reference();
				setState(2437);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,264,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						setState(2435);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case T__68:
							{
							{
							setState(2427);
							r_on();
							setState(2428);
							sql_condition();
							}
							}
							break;
						case T__167:
							{
							{
							setState(2430);
							k_using();
							setState(2431);
							match(LPAREN);
							setState(2432);
							column_specs();
							setState(2433);
							match(RPAREN);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					setState(2439);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,264,_ctx);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2445);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,266,_ctx) ) {
				case 1:
					{
					setState(2440);
					k_cross();
					}
					break;
				case 2:
					{
					setState(2441);
					k_natural();
					setState(2443);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,265,_ctx) ) {
					case 1:
						{
						setState(2442);
						k_inner();
						}
						break;
					}
					}
					break;
				}
				{
				setState(2447);
				k_join();
				setState(2448);
				table_reference();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_clauseContext extends ParserRuleContext {
		public Table_referenceContext table_reference() {
			return getRuleContext(Table_referenceContext.class,0);
		}
		public Outer_join_typeContext outer_join_type() {
			return getRuleContext(Outer_join_typeContext.class,0);
		}
		public K_joinContext k_join() {
			return getRuleContext(K_joinContext.class,0);
		}
		public K_naturalContext k_natural() {
			return getRuleContext(K_naturalContext.class,0);
		}
		public List<Query_partition_clauseContext> query_partition_clause() {
			return getRuleContexts(Query_partition_clauseContext.class);
		}
		public Query_partition_clauseContext query_partition_clause(int i) {
			return getRuleContext(Query_partition_clauseContext.class,i);
		}
		public R_onContext r_on() {
			return getRuleContext(R_onContext.class,0);
		}
		public Sql_conditionContext sql_condition() {
			return getRuleContext(Sql_conditionContext.class,0);
		}
		public K_usingContext k_using() {
			return getRuleContext(K_usingContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public Column_specsContext column_specs() {
			return getRuleContext(Column_specsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public Outer_join_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterOuter_join_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitOuter_join_clause(this);
		}
	}

	public final Outer_join_clauseContext outer_join_clause() throws RecognitionException {
		Outer_join_clauseContext _localctx = new Outer_join_clauseContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_outer_join_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2453);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
			case 1:
				{
				setState(2452);
				query_partition_clause();
				}
				break;
			}
			setState(2464);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
			case 1:
				{
				setState(2455);
				outer_join_type();
				setState(2456);
				k_join();
				}
				break;
			case 2:
				{
				setState(2458);
				k_natural();
				setState(2460);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (T__129 - 130)) | (1L << (T__136 - 130)) | (1L << (T__156 - 130)))) != 0)) {
					{
					setState(2459);
					outer_join_type();
					}
				}

				setState(2462);
				k_join();
				}
				break;
			}
			setState(2466);
			table_reference();
			setState(2468);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,271,_ctx) ) {
			case 1:
				{
				setState(2467);
				query_partition_clause();
				}
				break;
			}
			setState(2478);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
			case 1:
				{
				setState(2470);
				r_on();
				setState(2471);
				sql_condition();
				}
				break;
			case 2:
				{
				setState(2473);
				k_using();
				setState(2474);
				match(LPAREN);
				setState(2475);
				column_specs();
				setState(2476);
				match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_partition_clauseContext extends ParserRuleContext {
		public K_partitionContext k_partition() {
			return getRuleContext(K_partitionContext.class,0);
		}
		public R_byContext r_by() {
			return getRuleContext(R_byContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Query_partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_partition_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterQuery_partition_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitQuery_partition_clause(this);
		}
	}

	public final Query_partition_clauseContext query_partition_clause() throws RecognitionException {
		Query_partition_clauseContext _localctx = new Query_partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_query_partition_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2480);
			k_partition();
			setState(2481);
			r_by();
			setState(2482);
			expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_typeContext extends ParserRuleContext {
		public K_fullContext k_full() {
			return getRuleContext(K_fullContext.class,0);
		}
		public K_leftContext k_left() {
			return getRuleContext(K_leftContext.class,0);
		}
		public K_rightContext k_right() {
			return getRuleContext(K_rightContext.class,0);
		}
		public K_outerContext k_outer() {
			return getRuleContext(K_outerContext.class,0);
		}
		public Outer_join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterOuter_join_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitOuter_join_type(this);
		}
	}

	public final Outer_join_typeContext outer_join_type() throws RecognitionException {
		Outer_join_typeContext _localctx = new Outer_join_typeContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_outer_join_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2487);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__129:
				{
				setState(2484);
				k_full();
				}
				break;
			case T__136:
				{
				setState(2485);
				k_left();
				}
				break;
			case T__156:
				{
				setState(2486);
				k_right();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2490);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__147) {
				{
				setState(2489);
				k_outer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sample_percentContext extends ParserRuleContext {
		public TerminalNode NUMBER() { return getToken(OracleSQLParser.NUMBER, 0); }
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Sample_percentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sample_percent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterSample_percent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitSample_percent(this);
		}
	}

	public final Sample_percentContext sample_percent() throws RecognitionException {
		Sample_percentContext _localctx = new Sample_percentContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_sample_percent);
		try {
			setState(2494);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2492);
				match(NUMBER);
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(2493);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Seed_valueContext extends ParserRuleContext {
		public TerminalNode NUMBER() { return getToken(OracleSQLParser.NUMBER, 0); }
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Seed_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seed_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterSeed_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitSeed_value(this);
		}
	}

	public final Seed_valueContext seed_value() throws RecognitionException {
		Seed_valueContext _localctx = new Seed_valueContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_seed_value);
		try {
			setState(2498);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2496);
				match(NUMBER);
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(2497);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_signContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public TerminalNode PLUS() { return getToken(OracleSQLParser.PLUS, 0); }
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public Outer_join_signContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterOuter_join_sign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitOuter_join_sign(this);
		}
	}

	public final Outer_join_signContext outer_join_sign() throws RecognitionException {
		Outer_join_signContext _localctx = new Outer_join_signContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_outer_join_sign);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2500);
			match(LPAREN);
			setState(2501);
			match(PLUS);
			setState(2502);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_nameContext extends ParserRuleContext {
		public Sql_identifierContext sql_identifier() {
			return getRuleContext(Sql_identifierContext.class,0);
		}
		public Table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterTable_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitTable_name(this);
		}
	}

	public final Table_nameContext table_name() throws RecognitionException {
		Table_nameContext _localctx = new Table_nameContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_table_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2504);
			sql_identifier(T_TABLE_NAME,0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_nameContext extends ParserRuleContext {
		public Sql_identifierContext sql_identifier() {
			return getRuleContext(Sql_identifierContext.class,0);
		}
		public Schema_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterSchema_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitSchema_name(this);
		}
	}

	public final Schema_nameContext schema_name() throws RecognitionException {
		Schema_nameContext _localctx = new Schema_nameContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_schema_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2506);
			sql_identifier(T_SCHEMA_NAME,0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_nameContext extends ParserRuleContext {
		public Sql_identifierContext sql_identifier() {
			return getRuleContext(Sql_identifierContext.class,0);
		}
		public Package_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterPackage_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitPackage_name(this);
		}
	}

	public final Package_nameContext package_name() throws RecognitionException {
		Package_nameContext _localctx = new Package_nameContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_package_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2508);
			sql_identifier(T_PACKAGE_NAME,0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dblink_nameContext extends ParserRuleContext {
		public Sql_identifierContext sql_identifier() {
			return getRuleContext(Sql_identifierContext.class,0);
		}
		public Dblink_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dblink_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterDblink_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitDblink_name(this);
		}
	}

	public final Dblink_nameContext dblink_name() throws RecognitionException {
		Dblink_nameContext _localctx = new Dblink_nameContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_dblink_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2510);
			sql_identifier(T_DBLINK_NAME,0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_specsContext extends ParserRuleContext {
		public List<Column_specContext> column_spec() {
			return getRuleContexts(Column_specContext.class);
		}
		public Column_specContext column_spec(int i) {
			return getRuleContext(Column_specContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public Column_specsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_specs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterColumn_specs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitColumn_specs(this);
		}
	}

	public final Column_specsContext column_specs() throws RecognitionException {
		Column_specsContext _localctx = new Column_specsContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_column_specs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2512);
			column_spec();
			setState(2517);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2513);
				match(COMMA);
				setState(2514);
				column_spec();
				}
				}
				setState(2519);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public PartitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitPartition(this);
		}
	}

	public final PartitionContext partition() throws RecognitionException {
		PartitionContext _localctx = new PartitionContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_partition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2520);
			identifier(T_UNKNOWN,0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_key_valueContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NUMBER() { return getToken(OracleSQLParser.NUMBER, 0); }
		public Partition_key_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_key_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterPartition_key_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitPartition_key_value(this);
		}
	}

	public final Partition_key_valueContext partition_key_value() throws RecognitionException {
		Partition_key_valueContext _localctx = new Partition_key_valueContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_partition_key_value);
		try {
			setState(2524);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2522);
				identifier(T_UNKNOWN,0);
				}
				break;
			case NUMBER:
				enterOuterAlt(_localctx, 2);
				{
				setState(2523);
				match(NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subpartition_key_valueContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NUMBER() { return getToken(OracleSQLParser.NUMBER, 0); }
		public Subpartition_key_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartition_key_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterSubpartition_key_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitSubpartition_key_value(this);
		}
	}

	public final Subpartition_key_valueContext subpartition_key_value() throws RecognitionException {
		Subpartition_key_valueContext _localctx = new Subpartition_key_valueContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_subpartition_key_value);
		try {
			setState(2528);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2526);
				identifier(T_UNKNOWN,0);
				}
				break;
			case NUMBER:
				enterOuterAlt(_localctx, 2);
				{
				setState(2527);
				match(NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintContext extends ParserRuleContext {
		public Sql_identifierContext sql_identifier() {
			return getRuleContext(Sql_identifierContext.class,0);
		}
		public ConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitConstraint(this);
		}
	}

	public final ConstraintContext constraint() throws RecognitionException {
		ConstraintContext _localctx = new ConstraintContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_constraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2530);
			sql_identifier(T_UNKNOWN,0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collection_expressionContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public Cast_expressionContext cast_expression() {
			return getRuleContext(Cast_expressionContext.class,0);
		}
		public Function_expressionContext function_expression() {
			return getRuleContext(Function_expressionContext.class,0);
		}
		public Column_specContext column_spec() {
			return getRuleContext(Column_specContext.class,0);
		}
		public Collection_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCollection_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCollection_expression(this);
		}
	}

	public final Collection_expressionContext collection_expression() throws RecognitionException {
		Collection_expressionContext _localctx = new Collection_expressionContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_collection_expression);
		try {
			setState(2544);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2532);
				subquery();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2533);
				match(LPAREN);
				setState(2536);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case T__116:
					{
					setState(2534);
					cast_expression();
					}
					break;
				case T__12:
				case T__82:
				case T__84:
				case T__115:
				case T__119:
				case T__120:
				case T__122:
				case T__125:
				case T__126:
				case T__127:
				case T__130:
				case T__132:
				case T__133:
				case T__135:
				case T__137:
				case T__138:
				case T__139:
				case T__141:
				case T__144:
				case T__146:
				case T__147:
				case T__149:
				case T__152:
				case T__154:
				case T__157:
				case T__158:
				case T__161:
				case T__164:
				case T__166:
				case T__169:
				case ID:
					{
					setState(2535);
					function_expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2538);
				match(RPAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2540);
				match(LPAREN);
				setState(2541);
				column_spec();
				setState(2542);
				match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_clauseContext extends ParserRuleContext {
		public R_whereContext r_where() {
			return getRuleContext(R_whereContext.class,0);
		}
		public Sql_conditionContext sql_condition() {
			return getRuleContext(Sql_conditionContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitWhere_clause(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2546);
			r_where();
			setState(2547);
			sql_condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hierarchical_query_clauseContext extends ParserRuleContext {
		public Sql_conditionContext connect1;
		public Sql_conditionContext start1;
		public Sql_conditionContext start2;
		public Sql_conditionContext connect2;
		public R_connectContext r_connect() {
			return getRuleContext(R_connectContext.class,0);
		}
		public R_byContext r_by() {
			return getRuleContext(R_byContext.class,0);
		}
		public List<Sql_conditionContext> sql_condition() {
			return getRuleContexts(Sql_conditionContext.class);
		}
		public Sql_conditionContext sql_condition(int i) {
			return getRuleContext(Sql_conditionContext.class,i);
		}
		public K_nocycleContext k_nocycle() {
			return getRuleContext(K_nocycleContext.class,0);
		}
		public R_startContext r_start() {
			return getRuleContext(R_startContext.class,0);
		}
		public R_withContext r_with() {
			return getRuleContext(R_withContext.class,0);
		}
		public Hierarchical_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hierarchical_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterHierarchical_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitHierarchical_query_clause(this);
		}
	}

	public final Hierarchical_query_clauseContext hierarchical_query_clause() throws RecognitionException {
		Hierarchical_query_clauseContext _localctx = new Hierarchical_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_hierarchical_query_clause);
		try {
			setState(2572);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__19:
				enterOuterAlt(_localctx, 1);
				{
				setState(2549);
				r_connect();
				setState(2550);
				r_by();
				setState(2552);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,282,_ctx) ) {
				case 1:
					{
					setState(2551);
					k_nocycle();
					}
					break;
				}
				setState(2554);
				((Hierarchical_query_clauseContext)_localctx).connect1 = sql_condition();
				setState(2559);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,283,_ctx) ) {
				case 1:
					{
					setState(2555);
					r_start();
					setState(2556);
					r_with();
					setState(2557);
					((Hierarchical_query_clauseContext)_localctx).start1 = sql_condition();
					}
					break;
				}
				}
				break;
			case T__93:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(2561);
				r_start();
				setState(2562);
				r_with();
				setState(2563);
				((Hierarchical_query_clauseContext)_localctx).start2 = sql_condition();
				}
				setState(2565);
				r_connect();
				setState(2566);
				r_by();
				setState(2568);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
				case 1:
					{
					setState(2567);
					k_nocycle();
					}
					break;
				}
				setState(2570);
				((Hierarchical_query_clauseContext)_localctx).connect2 = sql_condition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_clauseContext extends ParserRuleContext {
		public R_havingContext h1;
		public Sql_conditionContext c1;
		public R_groupContext g1;
		public R_byContext b1;
		public Group_by_exprsContext e1;
		public R_groupContext g2;
		public R_byContext b2;
		public Group_by_exprsContext e2;
		public R_havingContext h2;
		public Sql_conditionContext c2;
		public R_havingContext r_having() {
			return getRuleContext(R_havingContext.class,0);
		}
		public Sql_conditionContext sql_condition() {
			return getRuleContext(Sql_conditionContext.class,0);
		}
		public R_groupContext r_group() {
			return getRuleContext(R_groupContext.class,0);
		}
		public R_byContext r_by() {
			return getRuleContext(R_byContext.class,0);
		}
		public Group_by_exprsContext group_by_exprs() {
			return getRuleContext(Group_by_exprsContext.class,0);
		}
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterGroup_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitGroup_by_clause(this);
		}
	}

	public final Group_by_clauseContext group_by_clause() throws RecognitionException {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_group_by_clause);
		try {
			setState(2590);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__39:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(2574);
				((Group_by_clauseContext)_localctx).h1 = r_having();
				setState(2575);
				((Group_by_clauseContext)_localctx).c1 = sql_condition();
				setState(2580);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,286,_ctx) ) {
				case 1:
					{
					setState(2576);
					((Group_by_clauseContext)_localctx).g1 = r_group();
					setState(2577);
					((Group_by_clauseContext)_localctx).b1 = r_by();
					setState(2578);
					((Group_by_clauseContext)_localctx).e1 = group_by_exprs();
					}
					break;
				}
				}
				}
				break;
			case T__38:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(2582);
				((Group_by_clauseContext)_localctx).g2 = r_group();
				setState(2583);
				((Group_by_clauseContext)_localctx).b2 = r_by();
				setState(2584);
				((Group_by_clauseContext)_localctx).e2 = group_by_exprs();
				setState(2588);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
				case 1:
					{
					setState(2585);
					((Group_by_clauseContext)_localctx).h2 = r_having();
					setState(2586);
					((Group_by_clauseContext)_localctx).c2 = sql_condition();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_exprsContext extends ParserRuleContext {
		public List<Group_by_exprContext> group_by_expr() {
			return getRuleContexts(Group_by_exprContext.class);
		}
		public Group_by_exprContext group_by_expr(int i) {
			return getRuleContext(Group_by_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public Group_by_exprsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_exprs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterGroup_by_exprs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitGroup_by_exprs(this);
		}
	}

	public final Group_by_exprsContext group_by_exprs() throws RecognitionException {
		Group_by_exprsContext _localctx = new Group_by_exprsContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_group_by_exprs);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2592);
			group_by_expr();
			setState(2597);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,289,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2593);
					match(COMMA);
					setState(2594);
					group_by_expr();
					}
					} 
				}
				setState(2599);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,289,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_exprContext extends ParserRuleContext {
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public Grouping_sets_clauseContext grouping_sets_clause() {
			return getRuleContext(Grouping_sets_clauseContext.class,0);
		}
		public Grouping_expression_listContext grouping_expression_list() {
			return getRuleContext(Grouping_expression_listContext.class,0);
		}
		public Group_by_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterGroup_by_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitGroup_by_expr(this);
		}
	}

	public final Group_by_exprContext group_by_expr() throws RecognitionException {
		Group_by_exprContext _localctx = new Group_by_exprContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_group_by_expr);
		try {
			setState(2603);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,290,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2600);
				rollup_cube_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2601);
				grouping_sets_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2602);
				grouping_expression_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollup_cube_clauseContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public Grouping_expression_listContext grouping_expression_list() {
			return getRuleContext(Grouping_expression_listContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public K_rollupContext k_rollup() {
			return getRuleContext(K_rollupContext.class,0);
		}
		public K_cubeContext k_cube() {
			return getRuleContext(K_cubeContext.class,0);
		}
		public Rollup_cube_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollup_cube_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterRollup_cube_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitRollup_cube_clause(this);
		}
	}

	public final Rollup_cube_clauseContext rollup_cube_clause() throws RecognitionException {
		Rollup_cube_clauseContext _localctx = new Rollup_cube_clauseContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_rollup_cube_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2607);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__157:
				{
				setState(2605);
				k_rollup();
				}
				break;
			case T__120:
				{
				setState(2606);
				k_cube();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2609);
			match(LPAREN);
			setState(2610);
			grouping_expression_list();
			setState(2611);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_clauseContext extends ParserRuleContext {
		public K_groupingContext k_grouping() {
			return getRuleContext(K_groupingContext.class,0);
		}
		public K_setsContext k_sets() {
			return getRuleContext(K_setsContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public Grouping_sets_expression_listContext grouping_sets_expression_list() {
			return getRuleContext(Grouping_sets_expression_listContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public Grouping_sets_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterGrouping_sets_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitGrouping_sets_clause(this);
		}
	}

	public final Grouping_sets_clauseContext grouping_sets_clause() throws RecognitionException {
		Grouping_sets_clauseContext _localctx = new Grouping_sets_clauseContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_grouping_sets_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2613);
			k_grouping();
			setState(2614);
			k_sets();
			setState(2615);
			match(LPAREN);
			setState(2616);
			grouping_sets_expression_list();
			setState(2617);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_exprsContext extends ParserRuleContext {
		public List<Grouping_sets_exprContext> grouping_sets_expr() {
			return getRuleContexts(Grouping_sets_exprContext.class);
		}
		public Grouping_sets_exprContext grouping_sets_expr(int i) {
			return getRuleContext(Grouping_sets_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public Grouping_sets_exprsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_exprs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterGrouping_sets_exprs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitGrouping_sets_exprs(this);
		}
	}

	public final Grouping_sets_exprsContext grouping_sets_exprs() throws RecognitionException {
		Grouping_sets_exprsContext _localctx = new Grouping_sets_exprsContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_grouping_sets_exprs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2619);
			grouping_sets_expr();
			setState(2624);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2620);
				match(COMMA);
				setState(2621);
				grouping_sets_expr();
				}
				}
				setState(2626);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_exprContext extends ParserRuleContext {
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public Grouping_expression_listContext grouping_expression_list() {
			return getRuleContext(Grouping_expression_listContext.class,0);
		}
		public Grouping_sets_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterGrouping_sets_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitGrouping_sets_expr(this);
		}
	}

	public final Grouping_sets_exprContext grouping_sets_expr() throws RecognitionException {
		Grouping_sets_exprContext _localctx = new Grouping_sets_exprContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_grouping_sets_expr);
		try {
			setState(2629);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2627);
				rollup_cube_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2628);
				grouping_expression_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_conditionContext extends ParserRuleContext {
		public Condition_orContext condition_or() {
			return getRuleContext(Condition_orContext.class,0);
		}
		public Sql_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterSql_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitSql_condition(this);
		}
	}

	public final Sql_conditionContext sql_condition() throws RecognitionException {
		Sql_conditionContext _localctx = new Sql_conditionContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_sql_condition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2631);
			condition_or();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_orContext extends ParserRuleContext {
		public List<Condition_andContext> condition_and() {
			return getRuleContexts(Condition_andContext.class);
		}
		public Condition_andContext condition_and(int i) {
			return getRuleContext(Condition_andContext.class,i);
		}
		public List<R_orContext> r_or() {
			return getRuleContexts(R_orContext.class);
		}
		public R_orContext r_or(int i) {
			return getRuleContext(R_orContext.class,i);
		}
		public Condition_orContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_or; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCondition_or(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCondition_or(this);
		}
	}

	public final Condition_orContext condition_or() throws RecognitionException {
		Condition_orContext _localctx = new Condition_orContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_condition_or);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2633);
			condition_and();
			setState(2639);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,294,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2634);
					r_or();
					setState(2635);
					condition_and();
					}
					} 
				}
				setState(2641);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,294,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_andContext extends ParserRuleContext {
		public List<Condition_notContext> condition_not() {
			return getRuleContexts(Condition_notContext.class);
		}
		public Condition_notContext condition_not(int i) {
			return getRuleContext(Condition_notContext.class,i);
		}
		public List<R_andContext> r_and() {
			return getRuleContexts(R_andContext.class);
		}
		public R_andContext r_and(int i) {
			return getRuleContext(R_andContext.class,i);
		}
		public Condition_andContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_and; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCondition_and(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCondition_and(this);
		}
	}

	public final Condition_andContext condition_and() throws RecognitionException {
		Condition_andContext _localctx = new Condition_andContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_condition_and);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2642);
			condition_not();
			setState(2648);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,295,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2643);
					r_and();
					setState(2644);
					condition_not();
					}
					} 
				}
				setState(2650);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,295,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_notContext extends ParserRuleContext {
		public R_notContext r_not() {
			return getRuleContext(R_notContext.class,0);
		}
		public Condition_exprContext condition_expr() {
			return getRuleContext(Condition_exprContext.class,0);
		}
		public Condition_notContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_not; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCondition_not(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCondition_not(this);
		}
	}

	public final Condition_notContext condition_not() throws RecognitionException {
		Condition_notContext _localctx = new Condition_notContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_condition_not);
		try {
			setState(2655);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,296,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2651);
				r_not();
				setState(2652);
				condition_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2654);
				condition_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_exprContext extends ParserRuleContext {
		public Condition_existsContext condition_exists() {
			return getRuleContext(Condition_existsContext.class,0);
		}
		public Condition_parenContext condition_paren() {
			return getRuleContext(Condition_parenContext.class,0);
		}
		public Condition_isContext condition_is() {
			return getRuleContext(Condition_isContext.class,0);
		}
		public Condition_comparisonContext condition_comparison() {
			return getRuleContext(Condition_comparisonContext.class,0);
		}
		public Condition_group_comparisonContext condition_group_comparison() {
			return getRuleContext(Condition_group_comparisonContext.class,0);
		}
		public Condition_inContext condition_in() {
			return getRuleContext(Condition_inContext.class,0);
		}
		public Condition_is_a_setContext condition_is_a_set() {
			return getRuleContext(Condition_is_a_setContext.class,0);
		}
		public Condition_is_anyContext condition_is_any() {
			return getRuleContext(Condition_is_anyContext.class,0);
		}
		public Condition_is_emptyContext condition_is_empty() {
			return getRuleContext(Condition_is_emptyContext.class,0);
		}
		public Condition_is_of_typeContext condition_is_of_type() {
			return getRuleContext(Condition_is_of_typeContext.class,0);
		}
		public Condition_is_presentContext condition_is_present() {
			return getRuleContext(Condition_is_presentContext.class,0);
		}
		public Condition_likeContext condition_like() {
			return getRuleContext(Condition_likeContext.class,0);
		}
		public Condition_memeberContext condition_memeber() {
			return getRuleContext(Condition_memeberContext.class,0);
		}
		public Condition_betweenContext condition_between() {
			return getRuleContext(Condition_betweenContext.class,0);
		}
		public Condition_regexp_likeContext condition_regexp_like() {
			return getRuleContext(Condition_regexp_likeContext.class,0);
		}
		public Condition_submultisetContext condition_submultiset() {
			return getRuleContext(Condition_submultisetContext.class,0);
		}
		public Condition_equals_pathContext condition_equals_path() {
			return getRuleContext(Condition_equals_pathContext.class,0);
		}
		public Condition_under_pathContext condition_under_path() {
			return getRuleContext(Condition_under_pathContext.class,0);
		}
		public Condition_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCondition_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCondition_expr(this);
		}
	}

	public final Condition_exprContext condition_expr() throws RecognitionException {
		Condition_exprContext _localctx = new Condition_exprContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_condition_expr);
		try {
			setState(2676);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2657);
				condition_exists();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2658);
				condition_paren();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2659);
				condition_is();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2660);
				condition_comparison();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2661);
				condition_group_comparison();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2662);
				condition_in();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2663);
				condition_is_a_set();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2664);
				condition_is_any();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2665);
				condition_is_empty();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2666);
				condition_is_of_type();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2667);
				condition_is_present();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2668);
				condition_like();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2669);
				condition_memeber();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2670);
				condition_between();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2671);
				condition_regexp_like();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2672);
				condition_submultiset();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2673);
				condition_equals_path();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2674);
				condition_under_path();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2675);
				condition_paren();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_existsContext extends ParserRuleContext {
		public R_existsContext r_exists() {
			return getRuleContext(R_existsContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Condition_existsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_exists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCondition_exists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCondition_exists(this);
		}
	}

	public final Condition_existsContext condition_exists() throws RecognitionException {
		Condition_existsContext _localctx = new Condition_existsContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_condition_exists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2678);
			r_exists();
			setState(2679);
			subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_isContext extends ParserRuleContext {
		public Column_specContext column_spec() {
			return getRuleContext(Column_specContext.class,0);
		}
		public R_isContext r_is() {
			return getRuleContext(R_isContext.class,0);
		}
		public K_nanContext k_nan() {
			return getRuleContext(K_nanContext.class,0);
		}
		public K_infiniteContext k_infinite() {
			return getRuleContext(K_infiniteContext.class,0);
		}
		public R_nullContext r_null() {
			return getRuleContext(R_nullContext.class,0);
		}
		public Outer_join_signContext outer_join_sign() {
			return getRuleContext(Outer_join_signContext.class,0);
		}
		public R_notContext r_not() {
			return getRuleContext(R_notContext.class,0);
		}
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Condition_isContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_is; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCondition_is(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCondition_is(this);
		}
	}

	public final Condition_isContext condition_is() throws RecognitionException {
		Condition_isContext _localctx = new Condition_isContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_condition_is);
		int _la;
		try {
			setState(2704);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,303,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2681);
				column_spec();
				setState(2683);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(2682);
					outer_join_sign();
					}
				}

				setState(2685);
				r_is();
				setState(2687);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__61) {
					{
					setState(2686);
					r_not();
					}
				}

				setState(2692);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case T__144:
					{
					setState(2689);
					k_nan();
					}
					break;
				case T__132:
					{
					setState(2690);
					k_infinite();
					}
					break;
				case T__64:
					{
					setState(2691);
					r_null();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2694);
				sql_expression();
				setState(2695);
				r_is();
				setState(2697);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__61) {
					{
					setState(2696);
					r_not();
					}
				}

				setState(2702);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case T__144:
					{
					setState(2699);
					k_nan();
					}
					break;
				case T__132:
					{
					setState(2700);
					k_infinite();
					}
					break;
				case T__64:
					{
					setState(2701);
					r_null();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_comparisonContext extends ParserRuleContext {
		public Outer_join_signContext o1;
		public Outer_join_signContext o2;
		public R_priorContext rp1;
		public Sql_expressionContext se1;
		public R_priorContext rp2;
		public Sql_expressionContext se2;
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public Sql_expressionsContext sql_expressions() {
			return getRuleContext(Sql_expressionsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode EQ() { return getToken(OracleSQLParser.EQ, 0); }
		public Not_equalContext not_equal() {
			return getRuleContext(Not_equalContext.class,0);
		}
		public List<Outer_join_signContext> outer_join_sign() {
			return getRuleContexts(Outer_join_signContext.class);
		}
		public Outer_join_signContext outer_join_sign(int i) {
			return getRuleContext(Outer_join_signContext.class,i);
		}
		public List<Sql_expressionContext> sql_expression() {
			return getRuleContexts(Sql_expressionContext.class);
		}
		public Sql_expressionContext sql_expression(int i) {
			return getRuleContext(Sql_expressionContext.class,i);
		}
		public TerminalNode GTH() { return getToken(OracleSQLParser.GTH, 0); }
		public GeqContext geq() {
			return getRuleContext(GeqContext.class,0);
		}
		public TerminalNode LTH() { return getToken(OracleSQLParser.LTH, 0); }
		public LeqContext leq() {
			return getRuleContext(LeqContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public List<R_priorContext> r_prior() {
			return getRuleContexts(R_priorContext.class);
		}
		public R_priorContext r_prior(int i) {
			return getRuleContext(R_priorContext.class,i);
		}
		public Condition_comparisonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_comparison; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCondition_comparison(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCondition_comparison(this);
		}
	}

	public final Condition_comparisonContext condition_comparison() throws RecognitionException {
		Condition_comparisonContext _localctx = new Condition_comparisonContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_condition_comparison);
		int _la;
		try {
			setState(2748);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2706);
				match(LPAREN);
				setState(2707);
				sql_expressions();
				setState(2708);
				match(RPAREN);
				setState(2710);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(2709);
					((Condition_comparisonContext)_localctx).o1 = outer_join_sign();
					}
				}

				setState(2714);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EQ:
					{
					setState(2712);
					match(EQ);
					}
					break;
				case T__170:
				case T__171:
				case NOT_EQ:
				case LTH:
					{
					setState(2713);
					not_equal();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2716);
				subquery();
				setState(2718);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
				case 1:
					{
					setState(2717);
					((Condition_comparisonContext)_localctx).o2 = outer_join_sign();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2721);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
				case 1:
					{
					setState(2720);
					((Condition_comparisonContext)_localctx).rp1 = r_prior();
					}
					break;
				}
				setState(2723);
				((Condition_comparisonContext)_localctx).se1 = sql_expression();
				setState(2725);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(2724);
					((Condition_comparisonContext)_localctx).o1 = outer_join_sign();
					}
				}

				setState(2733);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
				case 1:
					{
					setState(2727);
					match(EQ);
					}
					break;
				case 2:
					{
					setState(2728);
					not_equal();
					}
					break;
				case 3:
					{
					setState(2729);
					match(GTH);
					}
					break;
				case 4:
					{
					setState(2730);
					geq();
					}
					break;
				case 5:
					{
					setState(2731);
					match(LTH);
					}
					break;
				case 6:
					{
					setState(2732);
					leq();
					}
					break;
				}
				setState(2736);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
				case 1:
					{
					setState(2735);
					((Condition_comparisonContext)_localctx).rp2 = r_prior();
					}
					break;
				}
				setState(2743);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
				case 1:
					{
					setState(2738);
					((Condition_comparisonContext)_localctx).se2 = sql_expression();
					}
					break;
				case 2:
					{
					setState(2739);
					match(LPAREN);
					setState(2740);
					select_statement();
					setState(2741);
					match(RPAREN);
					}
					break;
				}
				setState(2746);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
				case 1:
					{
					setState(2745);
					((Condition_comparisonContext)_localctx).o2 = outer_join_sign();
					}
					break;
				}
				}
				break;
			}
			_ctx.stop = _input.LT(-1);

			 	pANTLR3_BASE_TREE pRoot = retval.tree;
			     if(retval.start != 0 && pRoot != 0) { pRoot->u = (void*)T_OPERATOR_BINARY; }

		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_group_comparisonContext extends ParserRuleContext {
		public List<TerminalNode> LPAREN() { return getTokens(OracleSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(OracleSQLParser.LPAREN, i);
		}
		public Sql_expressionsContext sql_expressions() {
			return getRuleContext(Sql_expressionsContext.class,0);
		}
		public List<TerminalNode> RPAREN() { return getTokens(OracleSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(OracleSQLParser.RPAREN, i);
		}
		public TerminalNode EQ() { return getToken(OracleSQLParser.EQ, 0); }
		public Not_equalContext not_equal() {
			return getRuleContext(Not_equalContext.class,0);
		}
		public R_anyContext r_any() {
			return getRuleContext(R_anyContext.class,0);
		}
		public K_someContext k_some() {
			return getRuleContext(K_someContext.class,0);
		}
		public R_allContext r_all() {
			return getRuleContext(R_allContext.class,0);
		}
		public Grouping_expression_listContext grouping_expression_list() {
			return getRuleContext(Grouping_expression_listContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public TerminalNode GTH() { return getToken(OracleSQLParser.GTH, 0); }
		public GeqContext geq() {
			return getRuleContext(GeqContext.class,0);
		}
		public TerminalNode LTH() { return getToken(OracleSQLParser.LTH, 0); }
		public LeqContext leq() {
			return getRuleContext(LeqContext.class,0);
		}
		public Condition_group_comparisonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_group_comparison; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCondition_group_comparison(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCondition_group_comparison(this);
		}
	}

	public final Condition_group_comparisonContext condition_group_comparison() throws RecognitionException {
		Condition_group_comparisonContext _localctx = new Condition_group_comparisonContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_condition_group_comparison);
		try {
			setState(2790);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,320,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2750);
				match(LPAREN);
				setState(2751);
				sql_expressions();
				setState(2752);
				match(RPAREN);
				setState(2755);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EQ:
					{
					setState(2753);
					match(EQ);
					}
					break;
				case T__170:
				case T__171:
				case NOT_EQ:
				case LTH:
					{
					setState(2754);
					not_equal();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2760);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case T__5:
					{
					setState(2757);
					r_any();
					}
					break;
				case T__160:
					{
					setState(2758);
					k_some();
					}
					break;
				case T__2:
					{
					setState(2759);
					r_all();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2762);
				match(LPAREN);
				setState(2765);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,316,_ctx) ) {
				case 1:
					{
					setState(2763);
					grouping_expression_list();
					}
					break;
				case 2:
					{
					setState(2764);
					select_statement();
					}
					break;
				}
				setState(2767);
				match(RPAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2769);
				sql_expression();
				setState(2776);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,317,_ctx) ) {
				case 1:
					{
					setState(2770);
					match(EQ);
					}
					break;
				case 2:
					{
					setState(2771);
					not_equal();
					}
					break;
				case 3:
					{
					setState(2772);
					match(GTH);
					}
					break;
				case 4:
					{
					setState(2773);
					geq();
					}
					break;
				case 5:
					{
					setState(2774);
					match(LTH);
					}
					break;
				case 6:
					{
					setState(2775);
					leq();
					}
					break;
				}
				setState(2781);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case T__5:
					{
					setState(2778);
					r_any();
					}
					break;
				case T__160:
					{
					setState(2779);
					k_some();
					}
					break;
				case T__2:
					{
					setState(2780);
					r_all();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2783);
				match(LPAREN);
				setState(2786);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
				case 1:
					{
					setState(2784);
					sql_expressions();
					}
					break;
				case 2:
					{
					setState(2785);
					select_statement();
					}
					break;
				}
				setState(2788);
				match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_inContext extends ParserRuleContext {
		public List<TerminalNode> LPAREN() { return getTokens(OracleSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(OracleSQLParser.LPAREN, i);
		}
		public Sql_expressionsContext sql_expressions() {
			return getRuleContext(Sql_expressionsContext.class,0);
		}
		public List<TerminalNode> RPAREN() { return getTokens(OracleSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(OracleSQLParser.RPAREN, i);
		}
		public R_inContext r_in() {
			return getRuleContext(R_inContext.class,0);
		}
		public Grouping_expression_listContext grouping_expression_list() {
			return getRuleContext(Grouping_expression_listContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public R_notContext r_not() {
			return getRuleContext(R_notContext.class,0);
		}
		public List<Sql_expressionContext> sql_expression() {
			return getRuleContexts(Sql_expressionContext.class);
		}
		public Sql_expressionContext sql_expression(int i) {
			return getRuleContext(Sql_expressionContext.class,i);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Condition_inContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_in; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCondition_in(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCondition_in(this);
		}
	}

	public final Condition_inContext condition_in() throws RecognitionException {
		Condition_inContext _localctx = new Condition_inContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_condition_in);
		int _la;
		try {
			setState(2825);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2792);
				match(LPAREN);
				setState(2793);
				sql_expressions();
				setState(2794);
				match(RPAREN);
				setState(2796);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__61) {
					{
					setState(2795);
					r_not();
					}
				}

				setState(2798);
				r_in();
				setState(2799);
				match(LPAREN);
				setState(2802);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
				case 1:
					{
					setState(2800);
					grouping_expression_list();
					}
					break;
				case 2:
					{
					setState(2801);
					select_statement();
					}
					break;
				}
				setState(2804);
				match(RPAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2806);
				sql_expression();
				setState(2808);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__61) {
					{
					setState(2807);
					r_not();
					}
				}

				setState(2810);
				r_in();
				setState(2811);
				match(LPAREN);
				setState(2814);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
				case 1:
					{
					setState(2812);
					expression_list();
					}
					break;
				case 2:
					{
					setState(2813);
					select_statement();
					}
					break;
				}
				setState(2816);
				match(RPAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2818);
				sql_expression();
				setState(2820);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__61) {
					{
					setState(2819);
					r_not();
					}
				}

				setState(2822);
				r_in();
				setState(2823);
				sql_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_is_a_setContext extends ParserRuleContext {
		public Nested_table_column_nameContext nested_table_column_name() {
			return getRuleContext(Nested_table_column_nameContext.class,0);
		}
		public R_isContext r_is() {
			return getRuleContext(R_isContext.class,0);
		}
		public K_aContext k_a() {
			return getRuleContext(K_aContext.class,0);
		}
		public R_setContext r_set() {
			return getRuleContext(R_setContext.class,0);
		}
		public R_notContext r_not() {
			return getRuleContext(R_notContext.class,0);
		}
		public Condition_is_a_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_is_a_set; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCondition_is_a_set(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCondition_is_a_set(this);
		}
	}

	public final Condition_is_a_setContext condition_is_a_set() throws RecognitionException {
		Condition_is_a_setContext _localctx = new Condition_is_a_setContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_condition_is_a_set);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2827);
			nested_table_column_name();
			setState(2828);
			r_is();
			setState(2830);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
			case 1:
				{
				setState(2829);
				r_not();
				}
				break;
			}
			setState(2832);
			k_a();
			setState(2833);
			r_set();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_is_anyContext extends ParserRuleContext {
		public R_anyContext r_any() {
			return getRuleContext(R_anyContext.class,0);
		}
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public R_isContext r_is() {
			return getRuleContext(R_isContext.class,0);
		}
		public Condition_is_anyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_is_any; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCondition_is_any(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCondition_is_any(this);
		}
	}

	public final Condition_is_anyContext condition_is_any() throws RecognitionException {
		Condition_is_anyContext _localctx = new Condition_is_anyContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_condition_is_any);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2838);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__12 || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (T__82 - 83)) | (1L << (T__84 - 83)) | (1L << (T__115 - 83)) | (1L << (T__119 - 83)) | (1L << (T__120 - 83)) | (1L << (T__122 - 83)) | (1L << (T__125 - 83)) | (1L << (T__126 - 83)) | (1L << (T__127 - 83)) | (1L << (T__130 - 83)) | (1L << (T__132 - 83)) | (1L << (T__133 - 83)) | (1L << (T__135 - 83)) | (1L << (T__137 - 83)) | (1L << (T__138 - 83)) | (1L << (T__139 - 83)) | (1L << (T__141 - 83)) | (1L << (T__144 - 83)))) != 0) || ((((_la - 147)) & ~0x3f) == 0 && ((1L << (_la - 147)) & ((1L << (T__146 - 147)) | (1L << (T__147 - 147)) | (1L << (T__149 - 147)) | (1L << (T__152 - 147)) | (1L << (T__154 - 147)) | (1L << (T__157 - 147)) | (1L << (T__158 - 147)) | (1L << (T__161 - 147)) | (1L << (T__164 - 147)) | (1L << (T__166 - 147)) | (1L << (T__169 - 147)))) != 0) || _la==ID) {
				{
				setState(2835);
				column_name();
				setState(2836);
				r_is();
				}
			}

			setState(2840);
			r_any();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_is_emptyContext extends ParserRuleContext {
		public Nested_table_column_nameContext nested_table_column_name() {
			return getRuleContext(Nested_table_column_nameContext.class,0);
		}
		public R_isContext r_is() {
			return getRuleContext(R_isContext.class,0);
		}
		public K_emptyContext k_empty() {
			return getRuleContext(K_emptyContext.class,0);
		}
		public R_notContext r_not() {
			return getRuleContext(R_notContext.class,0);
		}
		public Condition_is_emptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_is_empty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCondition_is_empty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCondition_is_empty(this);
		}
	}

	public final Condition_is_emptyContext condition_is_empty() throws RecognitionException {
		Condition_is_emptyContext _localctx = new Condition_is_emptyContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_condition_is_empty);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2842);
			nested_table_column_name();
			setState(2843);
			r_is();
			setState(2845);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
			case 1:
				{
				setState(2844);
				r_not();
				}
				break;
			}
			setState(2847);
			k_empty();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_is_of_typeContext extends ParserRuleContext {
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public R_isContext r_is() {
			return getRuleContext(R_isContext.class,0);
		}
		public R_ofContext r_of() {
			return getRuleContext(R_ofContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public Type_namesContext type_names() {
			return getRuleContext(Type_namesContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public R_notContext r_not() {
			return getRuleContext(R_notContext.class,0);
		}
		public K_typeContext k_type() {
			return getRuleContext(K_typeContext.class,0);
		}
		public Condition_is_of_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_is_of_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCondition_is_of_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCondition_is_of_type(this);
		}
	}

	public final Condition_is_of_typeContext condition_is_of_type() throws RecognitionException {
		Condition_is_of_typeContext _localctx = new Condition_is_of_typeContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_condition_is_of_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2849);
			sql_expression();
			setState(2850);
			r_is();
			setState(2852);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__61) {
				{
				setState(2851);
				r_not();
				}
			}

			setState(2854);
			r_of();
			setState(2856);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
			case 1:
				{
				setState(2855);
				k_type();
				}
				break;
			}
			setState(2858);
			match(LPAREN);
			setState(2859);
			type_names();
			setState(2860);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_is_presentContext extends ParserRuleContext {
		public Cell_referenceContext cell_reference() {
			return getRuleContext(Cell_referenceContext.class,0);
		}
		public R_isContext r_is() {
			return getRuleContext(R_isContext.class,0);
		}
		public K_presentContext k_present() {
			return getRuleContext(K_presentContext.class,0);
		}
		public Condition_is_presentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_is_present; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCondition_is_present(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCondition_is_present(this);
		}
	}

	public final Condition_is_presentContext condition_is_present() throws RecognitionException {
		Condition_is_presentContext _localctx = new Condition_is_presentContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_condition_is_present);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2862);
			cell_reference();
			setState(2863);
			r_is();
			setState(2864);
			k_present();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_likeContext extends ParserRuleContext {
		public List<Sql_expressionContext> sql_expression() {
			return getRuleContexts(Sql_expressionContext.class);
		}
		public Sql_expressionContext sql_expression(int i) {
			return getRuleContext(Sql_expressionContext.class,i);
		}
		public R_likeContext r_like() {
			return getRuleContext(R_likeContext.class,0);
		}
		public K_likecContext k_likec() {
			return getRuleContext(K_likecContext.class,0);
		}
		public K_like2Context k_like2() {
			return getRuleContext(K_like2Context.class,0);
		}
		public K_like4Context k_like4() {
			return getRuleContext(K_like4Context.class,0);
		}
		public R_notContext r_not() {
			return getRuleContext(R_notContext.class,0);
		}
		public K_escapeContext k_escape() {
			return getRuleContext(K_escapeContext.class,0);
		}
		public Condition_likeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_like; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCondition_like(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCondition_like(this);
		}
	}

	public final Condition_likeContext condition_like() throws RecognitionException {
		Condition_likeContext _localctx = new Condition_likeContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_condition_like);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2866);
			sql_expression();
			setState(2868);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__61) {
				{
				setState(2867);
				r_not();
				}
			}

			setState(2874);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__52:
				{
				setState(2870);
				r_like();
				}
				break;
			case T__139:
				{
				setState(2871);
				k_likec();
				}
				break;
			case T__137:
				{
				setState(2872);
				k_like2();
				}
				break;
			case T__138:
				{
				setState(2873);
				k_like4();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2876);
			sql_expression();
			setState(2880);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,334,_ctx) ) {
			case 1:
				{
				setState(2877);
				k_escape();
				setState(2878);
				sql_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_memeberContext extends ParserRuleContext {
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public K_memberContext k_member() {
			return getRuleContext(K_memberContext.class,0);
		}
		public Function_expressionContext function_expression() {
			return getRuleContext(Function_expressionContext.class,0);
		}
		public Nested_table_column_nameContext nested_table_column_name() {
			return getRuleContext(Nested_table_column_nameContext.class,0);
		}
		public R_notContext r_not() {
			return getRuleContext(R_notContext.class,0);
		}
		public R_ofContext r_of() {
			return getRuleContext(R_ofContext.class,0);
		}
		public Condition_memeberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_memeber; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCondition_memeber(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCondition_memeber(this);
		}
	}

	public final Condition_memeberContext condition_memeber() throws RecognitionException {
		Condition_memeberContext _localctx = new Condition_memeberContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_condition_memeber);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2882);
			sql_expression();
			setState(2884);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__61) {
				{
				setState(2883);
				r_not();
				}
			}

			setState(2886);
			k_member();
			setState(2888);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__66) {
				{
				setState(2887);
				r_of();
				}
			}

			setState(2892);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,337,_ctx) ) {
			case 1:
				{
				setState(2890);
				function_expression();
				}
				break;
			case 2:
				{
				setState(2891);
				nested_table_column_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_betweenContext extends ParserRuleContext {
		public List<Sql_expressionContext> sql_expression() {
			return getRuleContexts(Sql_expressionContext.class);
		}
		public Sql_expressionContext sql_expression(int i) {
			return getRuleContext(Sql_expressionContext.class,i);
		}
		public R_betweenContext r_between() {
			return getRuleContext(R_betweenContext.class,0);
		}
		public R_andContext r_and() {
			return getRuleContext(R_andContext.class,0);
		}
		public R_notContext r_not() {
			return getRuleContext(R_notContext.class,0);
		}
		public Condition_betweenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_between; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCondition_between(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCondition_between(this);
		}
	}

	public final Condition_betweenContext condition_between() throws RecognitionException {
		Condition_betweenContext _localctx = new Condition_betweenContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_condition_between);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2894);
			sql_expression();
			setState(2896);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__61) {
				{
				setState(2895);
				r_not();
				}
			}

			setState(2898);
			r_between();
			setState(2899);
			sql_expression();
			setState(2900);
			r_and();
			setState(2901);
			sql_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_regexp_likeContext extends ParserRuleContext {
		public K_regexp_likeContext k_regexp_like() {
			return getRuleContext(K_regexp_likeContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public Call_parametersContext call_parameters() {
			return getRuleContext(Call_parametersContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public Condition_regexp_likeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_regexp_like; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCondition_regexp_like(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCondition_regexp_like(this);
		}
	}

	public final Condition_regexp_likeContext condition_regexp_like() throws RecognitionException {
		Condition_regexp_likeContext _localctx = new Condition_regexp_likeContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_condition_regexp_like);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2903);
			k_regexp_like();
			setState(2904);
			match(LPAREN);
			setState(2905);
			call_parameters();
			setState(2906);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_submultisetContext extends ParserRuleContext {
		public List<Nested_table_column_nameContext> nested_table_column_name() {
			return getRuleContexts(Nested_table_column_nameContext.class);
		}
		public Nested_table_column_nameContext nested_table_column_name(int i) {
			return getRuleContext(Nested_table_column_nameContext.class,i);
		}
		public K_submultisetContext k_submultiset() {
			return getRuleContext(K_submultisetContext.class,0);
		}
		public R_notContext r_not() {
			return getRuleContext(R_notContext.class,0);
		}
		public R_ofContext r_of() {
			return getRuleContext(R_ofContext.class,0);
		}
		public Condition_submultisetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_submultiset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCondition_submultiset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCondition_submultiset(this);
		}
	}

	public final Condition_submultisetContext condition_submultiset() throws RecognitionException {
		Condition_submultisetContext _localctx = new Condition_submultisetContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_condition_submultiset);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2908);
			nested_table_column_name();
			setState(2910);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__61) {
				{
				setState(2909);
				r_not();
				}
			}

			setState(2912);
			k_submultiset();
			setState(2914);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__66) {
				{
				setState(2913);
				r_of();
				}
			}

			setState(2916);
			nested_table_column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_equals_pathContext extends ParserRuleContext {
		public K_equals_pathContext k_equals_path() {
			return getRuleContext(K_equals_pathContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public Path_stringContext path_string() {
			return getRuleContext(Path_stringContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public Correlation_integerContext correlation_integer() {
			return getRuleContext(Correlation_integerContext.class,0);
		}
		public Condition_equals_pathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_equals_path; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCondition_equals_path(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCondition_equals_path(this);
		}
	}

	public final Condition_equals_pathContext condition_equals_path() throws RecognitionException {
		Condition_equals_pathContext _localctx = new Condition_equals_pathContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_condition_equals_path);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2918);
			k_equals_path();
			setState(2919);
			match(LPAREN);
			setState(2920);
			column_name();
			setState(2921);
			match(COMMA);
			setState(2922);
			path_string();
			setState(2925);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2923);
				match(COMMA);
				setState(2924);
				correlation_integer();
				}
			}

			setState(2927);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_under_pathContext extends ParserRuleContext {
		public K_under_pathContext k_under_path() {
			return getRuleContext(K_under_pathContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public Path_stringContext path_string() {
			return getRuleContext(Path_stringContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public LevelsContext levels() {
			return getRuleContext(LevelsContext.class,0);
		}
		public Correlation_integerContext correlation_integer() {
			return getRuleContext(Correlation_integerContext.class,0);
		}
		public Condition_under_pathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_under_path; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCondition_under_path(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCondition_under_path(this);
		}
	}

	public final Condition_under_pathContext condition_under_path() throws RecognitionException {
		Condition_under_pathContext _localctx = new Condition_under_pathContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_condition_under_path);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2929);
			k_under_path();
			setState(2930);
			match(LPAREN);
			setState(2931);
			column_name();
			setState(2934);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
			case 1:
				{
				setState(2932);
				match(COMMA);
				setState(2933);
				levels();
				}
				break;
			}
			setState(2936);
			match(COMMA);
			setState(2937);
			path_string();
			setState(2940);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2938);
				match(COMMA);
				setState(2939);
				correlation_integer();
				}
			}

			setState(2942);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelsContext extends ParserRuleContext {
		public IntegerContext integer() {
			return getRuleContext(IntegerContext.class,0);
		}
		public LevelsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levels; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterLevels(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitLevels(this);
		}
	}

	public final LevelsContext levels() throws RecognitionException {
		LevelsContext _localctx = new LevelsContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_levels);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2944);
			integer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Correlation_integerContext extends ParserRuleContext {
		public IntegerContext integer() {
			return getRuleContext(IntegerContext.class,0);
		}
		public Correlation_integerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_correlation_integer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCorrelation_integer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCorrelation_integer(this);
		}
	}

	public final Correlation_integerContext correlation_integer() throws RecognitionException {
		Correlation_integerContext _localctx = new Correlation_integerContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_correlation_integer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2946);
			integer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Path_stringContext extends ParserRuleContext {
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Path_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_path_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterPath_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitPath_string(this);
		}
	}

	public final Path_stringContext path_string() throws RecognitionException {
		Path_stringContext _localctx = new Path_stringContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_path_string);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2948);
			quoted_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_namesContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<K_onlyContext> k_only() {
			return getRuleContexts(K_onlyContext.class);
		}
		public K_onlyContext k_only(int i) {
			return getRuleContext(K_onlyContext.class,i);
		}
		public List<Schema_nameContext> schema_name() {
			return getRuleContexts(Schema_nameContext.class);
		}
		public Schema_nameContext schema_name(int i) {
			return getRuleContext(Schema_nameContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(OracleSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(OracleSQLParser.DOT, i);
		}
		public Type_namesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_names; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterType_names(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitType_names(this);
		}
	}

	public final Type_namesContext type_names() throws RecognitionException {
		Type_namesContext _localctx = new Type_namesContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_type_names);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2951);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,344,_ctx) ) {
			case 1:
				{
				setState(2950);
				k_only();
				}
				break;
			}
			setState(2956);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,345,_ctx) ) {
			case 1:
				{
				setState(2953);
				schema_name();
				setState(2954);
				match(DOT);
				}
				break;
			}
			setState(2958);
			identifier(T_UNKNOWN,0);
			setState(2970);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,348,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2960);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
					case 1:
						{
						setState(2959);
						k_only();
						}
						break;
					}
					setState(2965);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
					case 1:
						{
						setState(2962);
						schema_name();
						setState(2963);
						match(DOT);
						}
						break;
					}
					setState(2967);
					identifier(T_UNKNOWN,0);
					}
					} 
				}
				setState(2972);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,348,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntegerContext extends ParserRuleContext {
		public TerminalNode NUMBER() { return getToken(OracleSQLParser.NUMBER, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_integer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterInteger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitInteger(this);
		}
	}

	public final IntegerContext integer() throws RecognitionException {
		IntegerContext _localctx = new IntegerContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_integer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2973);
			match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_nameContext extends ParserRuleContext {
		public Sql_identifierContext sql_identifier() {
			return getRuleContext(Sql_identifierContext.class,0);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterColumn_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitColumn_name(this);
		}
	}

	public final Column_nameContext column_name() throws RecognitionException {
		Column_nameContext _localctx = new Column_nameContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_column_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2975);
			sql_identifier(T_COLUMN_NAME,0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nested_tableContext extends ParserRuleContext {
		public Sql_identifierContext sql_identifier() {
			return getRuleContext(Sql_identifierContext.class,0);
		}
		public Nested_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nested_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterNested_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitNested_table(this);
		}
	}

	public final Nested_tableContext nested_table() throws RecognitionException {
		Nested_tableContext _localctx = new Nested_tableContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_nested_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2977);
			sql_identifier(T_TABLE_ALIAS,T_USE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nested_table_column_nameContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(OracleSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(OracleSQLParser.DOT, i);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Nested_tableContext nested_table() {
			return getRuleContext(Nested_tableContext.class,0);
		}
		public Nested_table_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nested_table_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterNested_table_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitNested_table_column_name(this);
		}
	}

	public final Nested_table_column_nameContext nested_table_column_name() throws RecognitionException {
		Nested_table_column_nameContext _localctx = new Nested_table_column_nameContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_nested_table_column_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2982);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
			case 1:
				{
				setState(2979);
				schema_name();
				setState(2980);
				match(DOT);
				}
				break;
			}
			setState(2987);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,350,_ctx) ) {
			case 1:
				{
				setState(2984);
				table_name();
				setState(2985);
				match(DOT);
				}
				break;
			}
			setState(2992);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,351,_ctx) ) {
			case 1:
				{
				setState(2989);
				nested_table();
				setState(2990);
				match(DOT);
				}
				break;
			}
			setState(2994);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_expressionsContext extends ParserRuleContext {
		public List<Sql_expressionContext> sql_expression() {
			return getRuleContexts(Sql_expressionContext.class);
		}
		public Sql_expressionContext sql_expression(int i) {
			return getRuleContext(Sql_expressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public Sql_expressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_expressions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterSql_expressions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitSql_expressions(this);
		}
	}

	public final Sql_expressionsContext sql_expressions() throws RecognitionException {
		Sql_expressionsContext _localctx = new Sql_expressionsContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_sql_expressions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2996);
			sql_expression();
			setState(3001);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,352,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2997);
					match(COMMA);
					setState(2998);
					sql_expression();
					}
					} 
				}
				setState(3003);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,352,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_expression_listContext extends ParserRuleContext {
		public List<TerminalNode> LPAREN() { return getTokens(OracleSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(OracleSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(OracleSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(OracleSQLParser.RPAREN, i);
		}
		public List<Sql_expressionsContext> sql_expressions() {
			return getRuleContexts(Sql_expressionsContext.class);
		}
		public Sql_expressionsContext sql_expressions(int i) {
			return getRuleContext(Sql_expressionsContext.class,i);
		}
		public List<Sql_expressionContext> sql_expression() {
			return getRuleContexts(Sql_expressionContext.class);
		}
		public Sql_expressionContext sql_expression(int i) {
			return getRuleContext(Sql_expressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public Grouping_sets_expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_expression_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterGrouping_sets_expression_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitGrouping_sets_expression_list(this);
		}
	}

	public final Grouping_sets_expression_listContext grouping_sets_expression_list() throws RecognitionException {
		Grouping_sets_expression_listContext _localctx = new Grouping_sets_expression_listContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_grouping_sets_expression_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3011);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,353,_ctx) ) {
			case 1:
				{
				setState(3004);
				match(LPAREN);
				setState(3005);
				match(RPAREN);
				}
				break;
			case 2:
				{
				setState(3006);
				match(LPAREN);
				setState(3007);
				sql_expressions();
				setState(3008);
				match(RPAREN);
				}
				break;
			case 3:
				{
				setState(3010);
				sql_expression();
				}
				break;
			}
			setState(3025);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3013);
				match(COMMA);
				setState(3021);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,354,_ctx) ) {
				case 1:
					{
					setState(3014);
					match(LPAREN);
					setState(3015);
					match(RPAREN);
					}
					break;
				case 2:
					{
					setState(3016);
					match(LPAREN);
					setState(3017);
					sql_expressions();
					setState(3018);
					match(RPAREN);
					}
					break;
				case 3:
					{
					setState(3020);
					sql_expression();
					}
					break;
				}
				}
				}
				setState(3027);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_expression_listContext extends ParserRuleContext {
		public List<Expression_listContext> expression_list() {
			return getRuleContexts(Expression_listContext.class);
		}
		public Expression_listContext expression_list(int i) {
			return getRuleContext(Expression_listContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public Grouping_expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_expression_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterGrouping_expression_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitGrouping_expression_list(this);
		}
	}

	public final Grouping_expression_listContext grouping_expression_list() throws RecognitionException {
		Grouping_expression_listContext _localctx = new Grouping_expression_listContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_grouping_expression_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3028);
			expression_list();
			setState(3033);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,356,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3029);
					match(COMMA);
					setState(3030);
					expression_list();
					}
					} 
				}
				setState(3035);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,356,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_listContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public Sql_expressionsContext sql_expressions() {
			return getRuleContext(Sql_expressionsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public Expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterExpression_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitExpression_list(this);
		}
	}

	public final Expression_listContext expression_list() throws RecognitionException {
		Expression_listContext _localctx = new Expression_listContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_expression_list);
		try {
			setState(3041);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3036);
				match(LPAREN);
				setState(3037);
				sql_expressions();
				setState(3038);
				match(RPAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3040);
				sql_expressions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_referenceContext extends ParserRuleContext {
		public Sql_identifierContext sql_identifier() {
			return getRuleContext(Sql_identifierContext.class,0);
		}
		public Cell_referenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_reference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCell_reference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCell_reference(this);
		}
	}

	public final Cell_referenceContext cell_reference() throws RecognitionException {
		Cell_referenceContext _localctx = new Cell_referenceContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_cell_reference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3043);
			sql_identifier(T_UNKNOWN,0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_parenContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public Sql_conditionContext sql_condition() {
			return getRuleContext(Sql_conditionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public Condition_parenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_paren; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCondition_paren(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCondition_paren(this);
		}
	}

	public final Condition_parenContext condition_paren() throws RecognitionException {
		Condition_parenContext _localctx = new Condition_parenContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_condition_paren);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3045);
			match(LPAREN);
			setState(3046);
			sql_condition();
			setState(3047);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_clauseContext extends ParserRuleContext {
		public K_modelContext k_model() {
			return getRuleContext(K_modelContext.class,0);
		}
		public Main_modelContext main_model() {
			return getRuleContext(Main_modelContext.class,0);
		}
		public Cell_reference_optionsContext cell_reference_options() {
			return getRuleContext(Cell_reference_optionsContext.class,0);
		}
		public Return_rows_clauseContext return_rows_clause() {
			return getRuleContext(Return_rows_clauseContext.class,0);
		}
		public List<Reference_modelContext> reference_model() {
			return getRuleContexts(Reference_modelContext.class);
		}
		public Reference_modelContext reference_model(int i) {
			return getRuleContext(Reference_modelContext.class,i);
		}
		public Model_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterModel_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitModel_clause(this);
		}
	}

	public final Model_clauseContext model_clause() throws RecognitionException {
		Model_clauseContext _localctx = new Model_clauseContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_model_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3049);
			k_model();
			setState(3050);
			main_model();
			{
			setState(3051);
			cell_reference_options();
			}
			setState(3053);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
			case 1:
				{
				setState(3052);
				return_rows_clause();
				}
				break;
			}
			setState(3058);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,359,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3055);
					reference_model();
					}
					} 
				}
				setState(3060);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,359,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_reference_optionsContext extends ParserRuleContext {
		public K_navContext k_nav() {
			return getRuleContext(K_navContext.class,0);
		}
		public R_uniqueContext r_unique() {
			return getRuleContext(R_uniqueContext.class,0);
		}
		public K_ignoreContext k_ignore() {
			return getRuleContext(K_ignoreContext.class,0);
		}
		public K_keepContext k_keep() {
			return getRuleContext(K_keepContext.class,0);
		}
		public K_dimensionContext k_dimension() {
			return getRuleContext(K_dimensionContext.class,0);
		}
		public K_singleContext k_single() {
			return getRuleContext(K_singleContext.class,0);
		}
		public K_referenceContext k_reference() {
			return getRuleContext(K_referenceContext.class,0);
		}
		public Cell_reference_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_reference_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCell_reference_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCell_reference_options(this);
		}
	}

	public final Cell_reference_optionsContext cell_reference_options() throws RecognitionException {
		Cell_reference_optionsContext _localctx = new Cell_reference_optionsContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_cell_reference_options);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3067);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,361,_ctx) ) {
			case 1:
				{
				setState(3063);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,360,_ctx) ) {
				case 1:
					{
					setState(3061);
					k_ignore();
					}
					break;
				case 2:
					{
					setState(3062);
					k_keep();
					}
					break;
				}
				setState(3065);
				k_nav();
				}
				break;
			}
			setState(3076);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,363,_ctx) ) {
			case 1:
				{
				setState(3069);
				r_unique();
				setState(3074);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
				case 1:
					{
					setState(3070);
					k_dimension();
					}
					break;
				case 2:
					{
					setState(3071);
					k_single();
					setState(3072);
					k_reference();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_rows_clauseContext extends ParserRuleContext {
		public K_returnContext k_return() {
			return getRuleContext(K_returnContext.class,0);
		}
		public R_rowsContext r_rows() {
			return getRuleContext(R_rowsContext.class,0);
		}
		public K_updatedContext k_updated() {
			return getRuleContext(K_updatedContext.class,0);
		}
		public R_allContext r_all() {
			return getRuleContext(R_allContext.class,0);
		}
		public Return_rows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_rows_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterReturn_rows_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitReturn_rows_clause(this);
		}
	}

	public final Return_rows_clauseContext return_rows_clause() throws RecognitionException {
		Return_rows_clauseContext _localctx = new Return_rows_clauseContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_return_rows_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3078);
			k_return();
			setState(3081);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,364,_ctx) ) {
			case 1:
				{
				setState(3079);
				k_updated();
				}
				break;
			case 2:
				{
				setState(3080);
				r_all();
				}
				break;
			}
			setState(3083);
			r_rows();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_modelContext extends ParserRuleContext {
		public K_referenceContext k_reference() {
			return getRuleContext(K_referenceContext.class,0);
		}
		public Reference_model_nameContext reference_model_name() {
			return getRuleContext(Reference_model_nameContext.class,0);
		}
		public R_onContext r_on() {
			return getRuleContext(R_onContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public Cell_reference_optionsContext cell_reference_options() {
			return getRuleContext(Cell_reference_optionsContext.class,0);
		}
		public Reference_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterReference_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitReference_model(this);
		}
	}

	public final Reference_modelContext reference_model() throws RecognitionException {
		Reference_modelContext _localctx = new Reference_modelContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_reference_model);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3085);
			k_reference();
			setState(3086);
			reference_model_name();
			setState(3087);
			r_on();
			setState(3088);
			match(LPAREN);
			setState(3089);
			subquery();
			setState(3090);
			match(RPAREN);
			setState(3091);
			model_column_clauses();
			{
			setState(3092);
			cell_reference_options();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_model_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Reference_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterReference_model_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitReference_model_name(this);
		}
	}

	public final Reference_model_nameContext reference_model_name() throws RecognitionException {
		Reference_model_nameContext _localctx = new Reference_model_nameContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_reference_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3094);
			identifier(T_UNKNOWN,0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Main_modelContext extends ParserRuleContext {
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public Model_rules_clauseContext model_rules_clause() {
			return getRuleContext(Model_rules_clauseContext.class,0);
		}
		public Cell_reference_optionsContext cell_reference_options() {
			return getRuleContext(Cell_reference_optionsContext.class,0);
		}
		public K_mainContext k_main() {
			return getRuleContext(K_mainContext.class,0);
		}
		public Main_model_nameContext main_model_name() {
			return getRuleContext(Main_model_nameContext.class,0);
		}
		public Main_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterMain_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitMain_model(this);
		}
	}

	public final Main_modelContext main_model() throws RecognitionException {
		Main_modelContext _localctx = new Main_modelContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_main_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3099);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__140) {
				{
				setState(3096);
				k_main();
				setState(3097);
				main_model_name();
				}
			}

			setState(3101);
			model_column_clauses();
			{
			setState(3102);
			cell_reference_options();
			}
			setState(3103);
			model_rules_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Main_model_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Main_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterMain_model_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitMain_model_name(this);
		}
	}

	public final Main_model_nameContext main_model_name() throws RecognitionException {
		Main_model_nameContext _localctx = new Main_model_nameContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_main_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3105);
			identifier(T_UNKNOWN,0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_clausesContext extends ParserRuleContext {
		public K_dimensionContext k_dimension() {
			return getRuleContext(K_dimensionContext.class,0);
		}
		public R_byContext r_by() {
			return getRuleContext(R_byContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(OracleSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(OracleSQLParser.LPAREN, i);
		}
		public List<Model_columnsContext> model_columns() {
			return getRuleContexts(Model_columnsContext.class);
		}
		public Model_columnsContext model_columns(int i) {
			return getRuleContext(Model_columnsContext.class,i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(OracleSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(OracleSQLParser.RPAREN, i);
		}
		public K_measuresContext k_measures() {
			return getRuleContext(K_measuresContext.class,0);
		}
		public Query_partition_clauseContext query_partition_clause() {
			return getRuleContext(Query_partition_clauseContext.class,0);
		}
		public Column_specContext column_spec() {
			return getRuleContext(Column_specContext.class,0);
		}
		public Model_column_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterModel_column_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitModel_column_clauses(this);
		}
	}

	public final Model_column_clausesContext model_column_clauses() throws RecognitionException {
		Model_column_clausesContext _localctx = new Model_column_clausesContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_model_column_clauses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3111);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__148) {
				{
				setState(3107);
				query_partition_clause();
				setState(3109);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__12 || _la==T__51 || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (T__64 - 65)) | (1L << (T__82 - 65)) | (1L << (T__84 - 65)) | (1L << (T__96 - 65)) | (1L << (T__106 - 65)) | (1L << (T__115 - 65)) | (1L << (T__119 - 65)) | (1L << (T__120 - 65)) | (1L << (T__122 - 65)) | (1L << (T__125 - 65)) | (1L << (T__126 - 65)) | (1L << (T__127 - 65)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (T__130 - 131)) | (1L << (T__132 - 131)) | (1L << (T__133 - 131)) | (1L << (T__135 - 131)) | (1L << (T__137 - 131)) | (1L << (T__138 - 131)) | (1L << (T__139 - 131)) | (1L << (T__141 - 131)) | (1L << (T__144 - 131)) | (1L << (T__146 - 131)) | (1L << (T__147 - 131)) | (1L << (T__149 - 131)) | (1L << (T__152 - 131)) | (1L << (T__154 - 131)) | (1L << (T__157 - 131)) | (1L << (T__158 - 131)) | (1L << (T__161 - 131)) | (1L << (T__164 - 131)) | (1L << (T__166 - 131)) | (1L << (T__169 - 131)))) != 0) || ((((_la - 228)) & ~0x3f) == 0 && ((1L << (_la - 228)) & ((1L << (BINDVAR - 228)) | (1L << (ID - 228)) | (1L << (COLON - 228)))) != 0)) {
					{
					setState(3108);
					column_spec();
					}
				}

				}
			}

			setState(3113);
			k_dimension();
			setState(3114);
			r_by();
			setState(3115);
			match(LPAREN);
			setState(3116);
			model_columns();
			setState(3117);
			match(RPAREN);
			setState(3118);
			k_measures();
			setState(3119);
			match(LPAREN);
			setState(3120);
			model_columns();
			setState(3121);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_columnsContext extends ParserRuleContext {
		public List<Model_columnContext> model_column() {
			return getRuleContexts(Model_columnContext.class);
		}
		public Model_columnContext model_column(int i) {
			return getRuleContext(Model_columnContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public Model_columnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_columns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterModel_columns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitModel_columns(this);
		}
	}

	public final Model_columnsContext model_columns() throws RecognitionException {
		Model_columnsContext _localctx = new Model_columnsContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_model_columns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3123);
			model_column();
			setState(3128);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3124);
				match(COMMA);
				setState(3125);
				model_column();
				}
				}
				setState(3130);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_columnContext extends ParserRuleContext {
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Column_specContext column_spec() {
			return getRuleContext(Column_specContext.class,0);
		}
		public R_asContext r_as() {
			return getRuleContext(R_asContext.class,0);
		}
		public Model_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterModel_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitModel_column(this);
		}
	}

	public final Model_columnContext model_column() throws RecognitionException {
		Model_columnContext _localctx = new Model_columnContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_model_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3131);
			sql_expression();
			setState(3136);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__12) | (1L << T__51))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (T__64 - 65)) | (1L << (T__82 - 65)) | (1L << (T__84 - 65)) | (1L << (T__96 - 65)) | (1L << (T__106 - 65)) | (1L << (T__115 - 65)) | (1L << (T__119 - 65)) | (1L << (T__120 - 65)) | (1L << (T__122 - 65)) | (1L << (T__125 - 65)) | (1L << (T__126 - 65)) | (1L << (T__127 - 65)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (T__130 - 131)) | (1L << (T__132 - 131)) | (1L << (T__133 - 131)) | (1L << (T__135 - 131)) | (1L << (T__137 - 131)) | (1L << (T__138 - 131)) | (1L << (T__139 - 131)) | (1L << (T__141 - 131)) | (1L << (T__144 - 131)) | (1L << (T__146 - 131)) | (1L << (T__147 - 131)) | (1L << (T__149 - 131)) | (1L << (T__152 - 131)) | (1L << (T__154 - 131)) | (1L << (T__157 - 131)) | (1L << (T__158 - 131)) | (1L << (T__161 - 131)) | (1L << (T__164 - 131)) | (1L << (T__166 - 131)) | (1L << (T__169 - 131)))) != 0) || ((((_la - 228)) & ~0x3f) == 0 && ((1L << (_la - 228)) & ((1L << (BINDVAR - 228)) | (1L << (ID - 228)) | (1L << (COLON - 228)))) != 0)) {
				{
				setState(3133);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__7) {
					{
					setState(3132);
					r_as();
					}
				}

				setState(3135);
				column_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_clauseContext extends ParserRuleContext {
		public List<TerminalNode> LPAREN() { return getTokens(OracleSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(OracleSQLParser.LPAREN, i);
		}
		public Model_rules_exprsContext model_rules_exprs() {
			return getRuleContext(Model_rules_exprsContext.class,0);
		}
		public List<TerminalNode> RPAREN() { return getTokens(OracleSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(OracleSQLParser.RPAREN, i);
		}
		public K_rulesContext k_rules() {
			return getRuleContext(K_rulesContext.class,0);
		}
		public K_iterateContext k_iterate() {
			return getRuleContext(K_iterateContext.class,0);
		}
		public TerminalNode NUMBER() { return getToken(OracleSQLParser.NUMBER, 0); }
		public R_updateContext r_update() {
			return getRuleContext(R_updateContext.class,0);
		}
		public K_upsertContext k_upsert() {
			return getRuleContext(K_upsertContext.class,0);
		}
		public R_orderContext r_order() {
			return getRuleContext(R_orderContext.class,0);
		}
		public K_untilContext k_until() {
			return getRuleContext(K_untilContext.class,0);
		}
		public Sql_conditionContext sql_condition() {
			return getRuleContext(Sql_conditionContext.class,0);
		}
		public K_automaticContext k_automatic() {
			return getRuleContext(K_automaticContext.class,0);
		}
		public K_sequentialContext k_sequential() {
			return getRuleContext(K_sequentialContext.class,0);
		}
		public R_allContext r_all() {
			return getRuleContext(R_allContext.class,0);
		}
		public Model_rules_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterModel_rules_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitModel_rules_clause(this);
		}
	}

	public final Model_rules_clauseContext model_rules_clause() throws RecognitionException {
		Model_rules_clauseContext _localctx = new Model_rules_clauseContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_model_rules_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3154);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,375,_ctx) ) {
			case 1:
				{
				setState(3138);
				k_rules();
				setState(3144);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
				case 1:
					{
					setState(3139);
					r_update();
					}
					break;
				case 2:
					{
					setState(3140);
					k_upsert();
					setState(3142);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,371,_ctx) ) {
					case 1:
						{
						setState(3141);
						r_all();
						}
						break;
					}
					}
					break;
				}
				setState(3152);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
				case 1:
					{
					setState(3148);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,373,_ctx) ) {
					case 1:
						{
						setState(3146);
						k_automatic();
						}
						break;
					case 2:
						{
						setState(3147);
						k_sequential();
						}
						break;
					}
					setState(3150);
					r_order();
					}
					break;
				}
				}
				break;
			}
			setState(3167);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
			case 1:
				{
				setState(3156);
				k_iterate();
				setState(3157);
				match(LPAREN);
				setState(3158);
				match(NUMBER);
				setState(3159);
				match(RPAREN);
				setState(3165);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,376,_ctx) ) {
				case 1:
					{
					setState(3160);
					k_until();
					setState(3161);
					match(LPAREN);
					setState(3162);
					sql_condition();
					setState(3163);
					match(RPAREN);
					}
					break;
				}
				}
				break;
			}
			setState(3169);
			match(LPAREN);
			setState(3170);
			model_rules_exprs();
			setState(3171);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_exprsContext extends ParserRuleContext {
		public List<Model_rules_exprContext> model_rules_expr() {
			return getRuleContexts(Model_rules_exprContext.class);
		}
		public Model_rules_exprContext model_rules_expr(int i) {
			return getRuleContext(Model_rules_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public Model_rules_exprsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_exprs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterModel_rules_exprs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitModel_rules_exprs(this);
		}
	}

	public final Model_rules_exprsContext model_rules_exprs() throws RecognitionException {
		Model_rules_exprsContext _localctx = new Model_rules_exprsContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_model_rules_exprs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3173);
			model_rules_expr();
			setState(3178);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3174);
				match(COMMA);
				setState(3175);
				model_rules_expr();
				}
				}
				setState(3180);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_exprContext extends ParserRuleContext {
		public Cell_assignmentContext cell_assignment() {
			return getRuleContext(Cell_assignmentContext.class,0);
		}
		public TerminalNode EQ() { return getToken(OracleSQLParser.EQ, 0); }
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public R_updateContext r_update() {
			return getRuleContext(R_updateContext.class,0);
		}
		public K_upsertContext k_upsert() {
			return getRuleContext(K_upsertContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public R_allContext r_all() {
			return getRuleContext(R_allContext.class,0);
		}
		public Model_rules_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterModel_rules_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitModel_rules_expr(this);
		}
	}

	public final Model_rules_exprContext model_rules_expr() throws RecognitionException {
		Model_rules_exprContext _localctx = new Model_rules_exprContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_model_rules_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3186);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
			case 1:
				{
				setState(3181);
				r_update();
				}
				break;
			case 2:
				{
				setState(3182);
				k_upsert();
				setState(3184);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__2) {
					{
					setState(3183);
					r_all();
					}
				}

				}
				break;
			}
			setState(3188);
			cell_assignment();
			setState(3190);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__72) {
				{
				setState(3189);
				order_by_clause();
				}
			}

			setState(3192);
			match(EQ);
			setState(3193);
			sql_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_assignmentContext extends ParserRuleContext {
		public Measure_columnContext measure_column() {
			return getRuleContext(Measure_columnContext.class,0);
		}
		public TerminalNode LBRACK() { return getToken(OracleSQLParser.LBRACK, 0); }
		public TerminalNode RBRACK() { return getToken(OracleSQLParser.RBRACK, 0); }
		public Multi_column_for_loopContext multi_column_for_loop() {
			return getRuleContext(Multi_column_for_loopContext.class,0);
		}
		public Cell_assignment_exprsContext cell_assignment_exprs() {
			return getRuleContext(Cell_assignment_exprsContext.class,0);
		}
		public Cell_assignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_assignment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCell_assignment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCell_assignment(this);
		}
	}

	public final Cell_assignmentContext cell_assignment() throws RecognitionException {
		Cell_assignmentContext _localctx = new Cell_assignmentContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_cell_assignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3195);
			measure_column();
			setState(3196);
			match(LBRACK);
			setState(3199);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
			case 1:
				{
				setState(3197);
				multi_column_for_loop();
				}
				break;
			case 2:
				{
				setState(3198);
				cell_assignment_exprs();
				}
				break;
			}
			setState(3201);
			match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_assignment_exprsContext extends ParserRuleContext {
		public List<Cell_assignment_exprContext> cell_assignment_expr() {
			return getRuleContexts(Cell_assignment_exprContext.class);
		}
		public Cell_assignment_exprContext cell_assignment_expr(int i) {
			return getRuleContext(Cell_assignment_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public Cell_assignment_exprsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_assignment_exprs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCell_assignment_exprs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCell_assignment_exprs(this);
		}
	}

	public final Cell_assignment_exprsContext cell_assignment_exprs() throws RecognitionException {
		Cell_assignment_exprsContext _localctx = new Cell_assignment_exprsContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_cell_assignment_exprs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3203);
			cell_assignment_expr();
			setState(3208);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3204);
				match(COMMA);
				setState(3205);
				cell_assignment_expr();
				}
				}
				setState(3210);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_assignment_exprContext extends ParserRuleContext {
		public Sql_conditionContext sql_condition() {
			return getRuleContext(Sql_conditionContext.class,0);
		}
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Single_column_for_loopContext single_column_for_loop() {
			return getRuleContext(Single_column_for_loopContext.class,0);
		}
		public Cell_assignment_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_assignment_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCell_assignment_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCell_assignment_expr(this);
		}
	}

	public final Cell_assignment_exprContext cell_assignment_expr() throws RecognitionException {
		Cell_assignment_exprContext _localctx = new Cell_assignment_exprContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_cell_assignment_expr);
		try {
			setState(3214);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,384,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3211);
				sql_condition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3212);
				sql_expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3213);
				single_column_for_loop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Measure_columnContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Measure_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_measure_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterMeasure_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitMeasure_column(this);
		}
	}

	public final Measure_columnContext measure_column() throws RecognitionException {
		Measure_columnContext _localctx = new Measure_columnContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_measure_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3216);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_column_for_loopContext extends ParserRuleContext {
		public R_forContext r_for() {
			return getRuleContext(R_forContext.class,0);
		}
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public R_inContext r_in() {
			return getRuleContext(R_inContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public R_fromContext r_from() {
			return getRuleContext(R_fromContext.class,0);
		}
		public List<LiteralContext> literal() {
			return getRuleContexts(LiteralContext.class);
		}
		public LiteralContext literal(int i) {
			return getRuleContext(LiteralContext.class,i);
		}
		public R_toContext r_to() {
			return getRuleContext(R_toContext.class,0);
		}
		public LiteralsContext literals() {
			return getRuleContext(LiteralsContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public R_incrementContext r_increment() {
			return getRuleContext(R_incrementContext.class,0);
		}
		public K_decrementContext k_decrement() {
			return getRuleContext(K_decrementContext.class,0);
		}
		public R_likeContext r_like() {
			return getRuleContext(R_likeContext.class,0);
		}
		public PatternContext pattern() {
			return getRuleContext(PatternContext.class,0);
		}
		public Single_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_column_for_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterSingle_column_for_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitSingle_column_for_loop(this);
		}
	}

	public final Single_column_for_loopContext single_column_for_loop() throws RecognitionException {
		Single_column_for_loopContext _localctx = new Single_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_single_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3218);
			r_for();
			setState(3219);
			column_name();
			setState(3243);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__42:
				{
				setState(3220);
				r_in();
				setState(3221);
				match(LPAREN);
				setState(3224);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case QUOTED_STRING:
				case QSTRING:
				case PLUS:
				case MINUS:
				case NUMBER:
					{
					setState(3222);
					literals();
					}
					break;
				case LPAREN:
					{
					setState(3223);
					subquery();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3226);
				match(RPAREN);
				}
				break;
			case T__36:
			case T__52:
				{
				setState(3231);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__52) {
					{
					setState(3228);
					r_like();
					setState(3229);
					pattern();
					}
				}

				setState(3233);
				r_from();
				setState(3234);
				literal();
				setState(3235);
				r_to();
				setState(3236);
				literal();
				setState(3239);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,387,_ctx) ) {
				case 1:
					{
					setState(3237);
					r_increment();
					}
					break;
				case 2:
					{
					setState(3238);
					k_decrement();
					}
					break;
				}
				setState(3241);
				literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PatternContext extends ParserRuleContext {
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public PatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitPattern(this);
		}
	}

	public final PatternContext pattern() throws RecognitionException {
		PatternContext _localctx = new PatternContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_pattern);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3245);
			quoted_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LiteralContext extends ParserRuleContext {
		public TerminalNode NUMBER() { return getToken(OracleSQLParser.NUMBER, 0); }
		public TerminalNode PLUS() { return getToken(OracleSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(OracleSQLParser.MINUS, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitLiteral(this);
		}
	}

	public final LiteralContext literal() throws RecognitionException {
		LiteralContext _localctx = new LiteralContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_literal);
		int _la;
		try {
			setState(3252);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PLUS:
			case MINUS:
			case NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3248);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(3247);
					_la = _input.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3250);
				match(NUMBER);
				}
				break;
			case QUOTED_STRING:
			case QSTRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3251);
				quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LiteralsContext extends ParserRuleContext {
		public List<LiteralContext> literal() {
			return getRuleContexts(LiteralContext.class);
		}
		public LiteralContext literal(int i) {
			return getRuleContext(LiteralContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public LiteralsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literals; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterLiterals(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitLiterals(this);
		}
	}

	public final LiteralsContext literals() throws RecognitionException {
		LiteralsContext _localctx = new LiteralsContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_literals);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3254);
			literal();
			setState(3259);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3255);
				match(COMMA);
				setState(3256);
				literal();
				}
				}
				setState(3261);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_column_for_loopContext extends ParserRuleContext {
		public R_forContext r_for() {
			return getRuleContext(R_forContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(OracleSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(OracleSQLParser.LPAREN, i);
		}
		public Column_specsContext column_specs() {
			return getRuleContext(Column_specsContext.class,0);
		}
		public List<TerminalNode> RPAREN() { return getTokens(OracleSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(OracleSQLParser.RPAREN, i);
		}
		public R_inContext r_in() {
			return getRuleContext(R_inContext.class,0);
		}
		public Bracket_literals_listContext bracket_literals_list() {
			return getRuleContext(Bracket_literals_listContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Multi_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_column_for_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterMulti_column_for_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitMulti_column_for_loop(this);
		}
	}

	public final Multi_column_for_loopContext multi_column_for_loop() throws RecognitionException {
		Multi_column_for_loopContext _localctx = new Multi_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_multi_column_for_loop);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3262);
			r_for();
			setState(3263);
			match(LPAREN);
			setState(3264);
			column_specs();
			setState(3265);
			match(RPAREN);
			setState(3266);
			r_in();
			setState(3267);
			match(LPAREN);
			setState(3270);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
			case 1:
				{
				setState(3268);
				bracket_literals_list();
				}
				break;
			case 2:
				{
				setState(3269);
				subquery();
				}
				break;
			}
			setState(3272);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bracket_literalsContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public LiteralsContext literals() {
			return getRuleContext(LiteralsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public Bracket_literalsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bracket_literals; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterBracket_literals(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitBracket_literals(this);
		}
	}

	public final Bracket_literalsContext bracket_literals() throws RecognitionException {
		Bracket_literalsContext _localctx = new Bracket_literalsContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_bracket_literals);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3274);
			match(LPAREN);
			setState(3275);
			literals();
			setState(3276);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bracket_literals_listContext extends ParserRuleContext {
		public List<Bracket_literalsContext> bracket_literals() {
			return getRuleContexts(Bracket_literalsContext.class);
		}
		public Bracket_literalsContext bracket_literals(int i) {
			return getRuleContext(Bracket_literalsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public Bracket_literals_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bracket_literals_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterBracket_literals_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitBracket_literals_list(this);
		}
	}

	public final Bracket_literals_listContext bracket_literals_list() throws RecognitionException {
		Bracket_literals_listContext _localctx = new Bracket_literals_listContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_bracket_literals_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3278);
			bracket_literals();
			setState(3283);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3279);
				match(COMMA);
				setState(3280);
				bracket_literals();
				}
				}
				setState(3285);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Union_clauseContext extends ParserRuleContext {
		public R_unionContext r_union() {
			return getRuleContext(R_unionContext.class,0);
		}
		public R_intersectContext r_intersect() {
			return getRuleContext(R_intersectContext.class,0);
		}
		public R_minusContext r_minus() {
			return getRuleContext(R_minusContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public R_allContext r_all() {
			return getRuleContext(R_allContext.class,0);
		}
		public Union_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_union_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterUnion_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitUnion_clause(this);
		}
	}

	public final Union_clauseContext union_clause() throws RecognitionException {
		Union_clauseContext _localctx = new Union_clauseContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_union_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3292);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__103:
				{
				setState(3286);
				r_union();
				setState(3288);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__2) {
					{
					setState(3287);
					r_all();
					}
				}

				}
				break;
			case T__48:
				{
				setState(3290);
				r_intersect();
				}
				break;
			case T__56:
				{
				setState(3291);
				r_minus();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3296);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
			case 1:
				{
				setState(3294);
				select_statement();
				}
				break;
			case 2:
				{
				setState(3295);
				subquery();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clauseContext extends ParserRuleContext {
		public R_orderContext r_order() {
			return getRuleContext(R_orderContext.class,0);
		}
		public R_byContext r_by() {
			return getRuleContext(R_byContext.class,0);
		}
		public Order_by_clause_part_firstContext order_by_clause_part_first() {
			return getRuleContext(Order_by_clause_part_firstContext.class,0);
		}
		public K_siblingsContext k_siblings() {
			return getRuleContext(K_siblingsContext.class,0);
		}
		public List<Order_by_clause_part_nextContext> order_by_clause_part_next() {
			return getRuleContexts(Order_by_clause_part_nextContext.class);
		}
		public Order_by_clause_part_nextContext order_by_clause_part_next(int i) {
			return getRuleContext(Order_by_clause_part_nextContext.class,i);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterOrder_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitOrder_by_clause(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_order_by_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3298);
			r_order();
			setState(3300);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
			case 1:
				{
				setState(3299);
				k_siblings();
				}
				break;
			}
			setState(3302);
			r_by();
			setState(3303);
			order_by_clause_part_first();
			setState(3307);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,398,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3304);
					order_by_clause_part_next();
					}
					} 
				}
				setState(3309);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,398,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clause_part_firstContext extends ParserRuleContext {
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public R_ascContext r_asc() {
			return getRuleContext(R_ascContext.class,0);
		}
		public R_descContext r_desc() {
			return getRuleContext(R_descContext.class,0);
		}
		public List<K_nullsContext> k_nulls() {
			return getRuleContexts(K_nullsContext.class);
		}
		public K_nullsContext k_nulls(int i) {
			return getRuleContext(K_nullsContext.class,i);
		}
		public K_firstContext k_first() {
			return getRuleContext(K_firstContext.class,0);
		}
		public K_lastContext k_last() {
			return getRuleContext(K_lastContext.class,0);
		}
		public Order_by_clause_part_firstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause_part_first; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterOrder_by_clause_part_first(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitOrder_by_clause_part_first(this);
		}
	}

	public final Order_by_clause_part_firstContext order_by_clause_part_first() throws RecognitionException {
		Order_by_clause_part_firstContext _localctx = new Order_by_clause_part_firstContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_order_by_clause_part_first);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3310);
			sql_expression();
			setState(3312);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,399,_ctx) ) {
			case 1:
				{
				setState(3311);
				r_asc();
				}
				break;
			}
			setState(3315);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
			case 1:
				{
				setState(3314);
				r_desc();
				}
				break;
			}
			setState(3320);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,401,_ctx) ) {
			case 1:
				{
				setState(3317);
				k_nulls();
				setState(3318);
				k_first();
				}
				break;
			}
			setState(3325);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,402,_ctx) ) {
			case 1:
				{
				setState(3322);
				k_nulls();
				setState(3323);
				k_last();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clause_part_nextContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(OracleSQLParser.COMMA, 0); }
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public R_ascContext r_asc() {
			return getRuleContext(R_ascContext.class,0);
		}
		public R_descContext r_desc() {
			return getRuleContext(R_descContext.class,0);
		}
		public List<K_nullsContext> k_nulls() {
			return getRuleContexts(K_nullsContext.class);
		}
		public K_nullsContext k_nulls(int i) {
			return getRuleContext(K_nullsContext.class,i);
		}
		public K_firstContext k_first() {
			return getRuleContext(K_firstContext.class,0);
		}
		public K_lastContext k_last() {
			return getRuleContext(K_lastContext.class,0);
		}
		public Order_by_clause_part_nextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause_part_next; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterOrder_by_clause_part_next(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitOrder_by_clause_part_next(this);
		}
	}

	public final Order_by_clause_part_nextContext order_by_clause_part_next() throws RecognitionException {
		Order_by_clause_part_nextContext _localctx = new Order_by_clause_part_nextContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_order_by_clause_part_next);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3327);
			match(COMMA);
			setState(3328);
			sql_expression();
			setState(3330);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,403,_ctx) ) {
			case 1:
				{
				setState(3329);
				r_asc();
				}
				break;
			}
			setState(3333);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,404,_ctx) ) {
			case 1:
				{
				setState(3332);
				r_desc();
				}
				break;
			}
			setState(3338);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,405,_ctx) ) {
			case 1:
				{
				setState(3335);
				k_nulls();
				setState(3336);
				k_first();
				}
				break;
			}
			setState(3343);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
			case 1:
				{
				setState(3340);
				k_nulls();
				setState(3341);
				k_last();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Analytic_function_nameContext extends ParserRuleContext {
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public Analytic_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analytic_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterAnalytic_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitAnalytic_function_name(this);
		}
	}

	public final Analytic_function_nameContext analytic_function_name() throws RecognitionException {
		Analytic_function_nameContext _localctx = new Analytic_function_nameContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_analytic_function_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3345);
			function_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Analytic_function_callContext extends ParserRuleContext {
		public Analytic_function_nameContext analytic_function_name() {
			return getRuleContext(Analytic_function_nameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public R_distinctContext r_distinct() {
			return getRuleContext(R_distinctContext.class,0);
		}
		public R_uniqueContext r_unique() {
			return getRuleContext(R_uniqueContext.class,0);
		}
		public R_allContext r_all() {
			return getRuleContext(R_allContext.class,0);
		}
		public List<Sql_expressionContext> sql_expression() {
			return getRuleContexts(Sql_expressionContext.class);
		}
		public Sql_expressionContext sql_expression(int i) {
			return getRuleContext(Sql_expressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public K_nullsContext k_nulls() {
			return getRuleContext(K_nullsContext.class,0);
		}
		public K_respectContext k_respect() {
			return getRuleContext(K_respectContext.class,0);
		}
		public K_ignoreContext k_ignore() {
			return getRuleContext(K_ignoreContext.class,0);
		}
		public Analytic_function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analytic_function_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterAnalytic_function_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitAnalytic_function_call(this);
		}
	}

	public final Analytic_function_callContext analytic_function_call() throws RecognitionException {
		Analytic_function_callContext _localctx = new Analytic_function_callContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_analytic_function_call);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3347);
			analytic_function_name();
			setState(3348);
			match(LPAREN);
			setState(3352);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,407,_ctx) ) {
			case 1:
				{
				setState(3349);
				r_distinct();
				}
				break;
			case 2:
				{
				setState(3350);
				r_unique();
				}
				break;
			case 3:
				{
				setState(3351);
				r_all();
				}
				break;
			}
			setState(3355);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
			case 1:
				{
				setState(3354);
				sql_expression();
				}
				break;
			}
			setState(3361);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3357);
				match(COMMA);
				setState(3358);
				sql_expression();
				}
				}
				setState(3363);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3370);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__131 || _la==T__153) {
				{
				setState(3366);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case T__153:
					{
					setState(3364);
					k_respect();
					}
					break;
				case T__131:
					{
					setState(3365);
					k_ignore();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3368);
				k_nulls();
				}
			}

			setState(3372);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Analytic_functionContext extends ParserRuleContext {
		public Dense_rank_analyticContext dense_rank_analytic() {
			return getRuleContext(Dense_rank_analyticContext.class,0);
		}
		public Percent_rank_analyticContext percent_rank_analytic() {
			return getRuleContext(Percent_rank_analyticContext.class,0);
		}
		public Percent_cont_disc_analyticContext percent_cont_disc_analytic() {
			return getRuleContext(Percent_cont_disc_analyticContext.class,0);
		}
		public First_lastContext first_last() {
			return getRuleContext(First_lastContext.class,0);
		}
		public ListaggContext listagg() {
			return getRuleContext(ListaggContext.class,0);
		}
		public Analytic_function_callContext analytic_function_call() {
			return getRuleContext(Analytic_function_callContext.class,0);
		}
		public K_overContext k_over() {
			return getRuleContext(K_overContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public Analytic_clauseContext analytic_clause() {
			return getRuleContext(Analytic_clauseContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public K_nullsContext k_nulls() {
			return getRuleContext(K_nullsContext.class,0);
		}
		public K_respectContext k_respect() {
			return getRuleContext(K_respectContext.class,0);
		}
		public K_ignoreContext k_ignore() {
			return getRuleContext(K_ignoreContext.class,0);
		}
		public Analytic_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analytic_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterAnalytic_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitAnalytic_function(this);
		}
	}

	public final Analytic_functionContext analytic_function() throws RecognitionException {
		Analytic_functionContext _localctx = new Analytic_functionContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_analytic_function);
		try {
			setState(3393);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,414,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3374);
				dense_rank_analytic();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3375);
				percent_rank_analytic();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3376);
				percent_cont_disc_analytic();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3377);
				first_last();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3378);
				listagg();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3379);
				analytic_function_call();
				setState(3386);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
				case 1:
					{
					setState(3382);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case T__153:
						{
						setState(3380);
						k_respect();
						}
						break;
					case T__131:
						{
						setState(3381);
						k_ignore();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3384);
					k_nulls();
					}
					break;
				}
				setState(3388);
				k_over();
				setState(3389);
				match(LPAREN);
				setState(3390);
				analytic_clause();
				setState(3391);
				match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Count_functionContext extends ParserRuleContext {
		public K_countContext k_count() {
			return getRuleContext(K_countContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(OracleSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(OracleSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(OracleSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(OracleSQLParser.RPAREN, i);
		}
		public TerminalNode ASTERISK() { return getToken(OracleSQLParser.ASTERISK, 0); }
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public K_overContext k_over() {
			return getRuleContext(K_overContext.class,0);
		}
		public Analytic_clauseContext analytic_clause() {
			return getRuleContext(Analytic_clauseContext.class,0);
		}
		public R_distinctContext r_distinct() {
			return getRuleContext(R_distinctContext.class,0);
		}
		public R_uniqueContext r_unique() {
			return getRuleContext(R_uniqueContext.class,0);
		}
		public R_allContext r_all() {
			return getRuleContext(R_allContext.class,0);
		}
		public Count_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_count_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterCount_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitCount_function(this);
		}
	}

	public final Count_functionContext count_function() throws RecognitionException {
		Count_functionContext _localctx = new Count_functionContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_count_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3395);
			k_count();
			setState(3396);
			match(LPAREN);
			setState(3404);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
			case 1:
				{
				setState(3397);
				match(ASTERISK);
				}
				break;
			case 2:
				{
				setState(3401);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,415,_ctx) ) {
				case 1:
					{
					setState(3398);
					r_distinct();
					}
					break;
				case 2:
					{
					setState(3399);
					r_unique();
					}
					break;
				case 3:
					{
					setState(3400);
					r_all();
					}
					break;
				}
				setState(3403);
				sql_expression();
				}
				break;
			}
			setState(3406);
			match(RPAREN);
			setState(3412);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
			case 1:
				{
				setState(3407);
				k_over();
				setState(3408);
				match(LPAREN);
				setState(3409);
				analytic_clause();
				setState(3410);
				match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Analytic_clauseContext extends ParserRuleContext {
		public Query_partition_clauseContext query_partition_clause() {
			return getRuleContext(Query_partition_clauseContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Windowing_clauseContext windowing_clause() {
			return getRuleContext(Windowing_clauseContext.class,0);
		}
		public Analytic_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analytic_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterAnalytic_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitAnalytic_clause(this);
		}
	}

	public final Analytic_clauseContext analytic_clause() throws RecognitionException {
		Analytic_clauseContext _localctx = new Analytic_clauseContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_analytic_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3415);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__148) {
				{
				setState(3414);
				query_partition_clause();
				}
			}

			setState(3421);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__72) {
				{
				setState(3417);
				order_by_clause();
				setState(3419);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__85 || _la==T__151) {
					{
					setState(3418);
					windowing_clause();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_clause_partContext extends ParserRuleContext {
		public K_unboundedContext k_unbounded() {
			return getRuleContext(K_unboundedContext.class,0);
		}
		public K_precedingContext k_preceding() {
			return getRuleContext(K_precedingContext.class,0);
		}
		public K_followingContext k_following() {
			return getRuleContext(K_followingContext.class,0);
		}
		public R_currentContext r_current() {
			return getRuleContext(R_currentContext.class,0);
		}
		public R_rowContext r_row() {
			return getRuleContext(R_rowContext.class,0);
		}
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Windowing_clause_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_clause_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterWindowing_clause_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitWindowing_clause_part(this);
		}
	}

	public final Windowing_clause_partContext windowing_clause_part() throws RecognitionException {
		Windowing_clause_partContext _localctx = new Windowing_clause_partContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_windowing_clause_part);
		try {
			setState(3436);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(3423);
				k_unbounded();
				setState(3426);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case T__150:
					{
					setState(3424);
					k_preceding();
					}
					break;
				case T__128:
					{
					setState(3425);
					k_following();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(3428);
				r_current();
				setState(3429);
				r_row();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(3431);
				sql_expression();
				setState(3434);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case T__150:
					{
					setState(3432);
					k_preceding();
					}
					break;
				case T__128:
					{
					setState(3433);
					k_following();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_clauseContext extends ParserRuleContext {
		public R_rowsContext r_rows() {
			return getRuleContext(R_rowsContext.class,0);
		}
		public K_rangeContext k_range() {
			return getRuleContext(K_rangeContext.class,0);
		}
		public List<Windowing_clause_partContext> windowing_clause_part() {
			return getRuleContexts(Windowing_clause_partContext.class);
		}
		public Windowing_clause_partContext windowing_clause_part(int i) {
			return getRuleContext(Windowing_clause_partContext.class,i);
		}
		public R_betweenContext r_between() {
			return getRuleContext(R_betweenContext.class,0);
		}
		public R_andContext r_and() {
			return getRuleContext(R_andContext.class,0);
		}
		public Windowing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterWindowing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitWindowing_clause(this);
		}
	}

	public final Windowing_clauseContext windowing_clause() throws RecognitionException {
		Windowing_clauseContext _localctx = new Windowing_clauseContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_windowing_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3440);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__85:
				{
				setState(3438);
				r_rows();
				}
				break;
			case T__151:
				{
				setState(3439);
				k_range();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3448);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,425,_ctx) ) {
			case 1:
				{
				setState(3442);
				windowing_clause_part();
				}
				break;
			case 2:
				{
				{
				setState(3443);
				r_between();
				setState(3444);
				windowing_clause_part();
				setState(3445);
				r_and();
				setState(3446);
				windowing_clause_part();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_function_nameContext extends ParserRuleContext {
		public K_countContext k_count() {
			return getRuleContext(K_countContext.class,0);
		}
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Aggregate_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterAggregate_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitAggregate_function_name(this);
		}
	}

	public final Aggregate_function_nameContext aggregate_function_name() throws RecognitionException {
		Aggregate_function_nameContext _localctx = new Aggregate_function_nameContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_aggregate_function_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3452);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
			case 1:
				{
				setState(3450);
				k_count();
				}
				break;
			case 2:
				{
				setState(3451);
				function_spec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_functionContext extends ParserRuleContext {
		public Dense_rank_aggregateContext dense_rank_aggregate() {
			return getRuleContext(Dense_rank_aggregateContext.class,0);
		}
		public Percent_rank_aggregateContext percent_rank_aggregate() {
			return getRuleContext(Percent_rank_aggregateContext.class,0);
		}
		public First_lastContext first_last() {
			return getRuleContext(First_lastContext.class,0);
		}
		public ListaggContext listagg() {
			return getRuleContext(ListaggContext.class,0);
		}
		public Aggregate_function_nameContext aggregate_function_name() {
			return getRuleContext(Aggregate_function_nameContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(OracleSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(OracleSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(OracleSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(OracleSQLParser.RPAREN, i);
		}
		public TerminalNode ASTERISK() { return getToken(OracleSQLParser.ASTERISK, 0); }
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public K_overContext k_over() {
			return getRuleContext(K_overContext.class,0);
		}
		public Analytic_clauseContext analytic_clause() {
			return getRuleContext(Analytic_clauseContext.class,0);
		}
		public R_distinctContext r_distinct() {
			return getRuleContext(R_distinctContext.class,0);
		}
		public R_uniqueContext r_unique() {
			return getRuleContext(R_uniqueContext.class,0);
		}
		public R_allContext r_all() {
			return getRuleContext(R_allContext.class,0);
		}
		public Aggregate_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterAggregate_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitAggregate_function(this);
		}
	}

	public final Aggregate_functionContext aggregate_function() throws RecognitionException {
		Aggregate_functionContext _localctx = new Aggregate_functionContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_aggregate_function);
		try {
			setState(3477);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,430,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3454);
				dense_rank_aggregate();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3455);
				percent_rank_aggregate();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3456);
				first_last();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3457);
				listagg();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3458);
				aggregate_function_name();
				setState(3459);
				match(LPAREN);
				setState(3467);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
				case 1:
					{
					setState(3460);
					match(ASTERISK);
					}
					break;
				case 2:
					{
					setState(3464);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,427,_ctx) ) {
					case 1:
						{
						setState(3461);
						r_distinct();
						}
						break;
					case 2:
						{
						setState(3462);
						r_unique();
						}
						break;
					case 3:
						{
						setState(3463);
						r_all();
						}
						break;
					}
					setState(3466);
					sql_expression();
					}
					break;
				}
				setState(3469);
				match(RPAREN);
				setState(3475);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,429,_ctx) ) {
				case 1:
					{
					setState(3470);
					k_over();
					setState(3471);
					match(LPAREN);
					setState(3472);
					analytic_clause();
					setState(3473);
					match(RPAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Percent_rank_aggregateContext extends ParserRuleContext {
		public K_percent_rankContext k_percent_rank() {
			return getRuleContext(K_percent_rankContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(OracleSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(OracleSQLParser.LPAREN, i);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public K_withinContext k_within() {
			return getRuleContext(K_withinContext.class,0);
		}
		public R_groupContext r_group() {
			return getRuleContext(R_groupContext.class,0);
		}
		public R_orderContext r_order() {
			return getRuleContext(R_orderContext.class,0);
		}
		public R_byContext r_by() {
			return getRuleContext(R_byContext.class,0);
		}
		public List<Sql_expressionContext> sql_expression() {
			return getRuleContexts(Sql_expressionContext.class);
		}
		public Sql_expressionContext sql_expression(int i) {
			return getRuleContext(Sql_expressionContext.class,i);
		}
		public List<R_ascContext> r_asc() {
			return getRuleContexts(R_ascContext.class);
		}
		public R_ascContext r_asc(int i) {
			return getRuleContext(R_ascContext.class,i);
		}
		public List<R_descContext> r_desc() {
			return getRuleContexts(R_descContext.class);
		}
		public R_descContext r_desc(int i) {
			return getRuleContext(R_descContext.class,i);
		}
		public List<K_nullsContext> k_nulls() {
			return getRuleContexts(K_nullsContext.class);
		}
		public K_nullsContext k_nulls(int i) {
			return getRuleContext(K_nullsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public List<K_firstContext> k_first() {
			return getRuleContexts(K_firstContext.class);
		}
		public K_firstContext k_first(int i) {
			return getRuleContext(K_firstContext.class,i);
		}
		public List<K_lastContext> k_last() {
			return getRuleContexts(K_lastContext.class);
		}
		public K_lastContext k_last(int i) {
			return getRuleContext(K_lastContext.class,i);
		}
		public Percent_rank_aggregateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_percent_rank_aggregate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterPercent_rank_aggregate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitPercent_rank_aggregate(this);
		}
	}

	public final Percent_rank_aggregateContext percent_rank_aggregate() throws RecognitionException {
		Percent_rank_aggregateContext _localctx = new Percent_rank_aggregateContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_percent_rank_aggregate);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3479);
			k_percent_rank();
			setState(3480);
			match(LPAREN);
			setState(3481);
			expression_list();
			setState(3482);
			match(RPAREN);
			setState(3483);
			k_within();
			setState(3484);
			r_group();
			setState(3485);
			match(LPAREN);
			setState(3486);
			r_order();
			setState(3487);
			r_by();
			setState(3488);
			sql_expression();
			setState(3491);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,431,_ctx) ) {
			case 1:
				{
				setState(3489);
				r_asc();
				}
				break;
			case 2:
				{
				setState(3490);
				r_desc();
				}
				break;
			}
			setState(3498);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,433,_ctx) ) {
			case 1:
				{
				setState(3493);
				k_nulls();
				setState(3496);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case T__127:
					{
					setState(3494);
					k_first();
					}
					break;
				case T__135:
					{
					setState(3495);
					k_last();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(3515);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,437,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3500);
					match(COMMA);
					setState(3501);
					sql_expression();
					setState(3504);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,434,_ctx) ) {
					case 1:
						{
						setState(3502);
						r_asc();
						}
						break;
					case 2:
						{
						setState(3503);
						r_desc();
						}
						break;
					}
					setState(3511);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,436,_ctx) ) {
					case 1:
						{
						setState(3506);
						k_nulls();
						setState(3509);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case T__127:
							{
							setState(3507);
							k_first();
							}
							break;
						case T__135:
							{
							setState(3508);
							k_last();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					}
					} 
				}
				setState(3517);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,437,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dense_rank_aggregateContext extends ParserRuleContext {
		public K_dense_rankContext k_dense_rank() {
			return getRuleContext(K_dense_rankContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(OracleSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(OracleSQLParser.LPAREN, i);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public K_withinContext k_within() {
			return getRuleContext(K_withinContext.class,0);
		}
		public R_groupContext r_group() {
			return getRuleContext(R_groupContext.class,0);
		}
		public R_orderContext r_order() {
			return getRuleContext(R_orderContext.class,0);
		}
		public R_byContext r_by() {
			return getRuleContext(R_byContext.class,0);
		}
		public List<Sql_expressionContext> sql_expression() {
			return getRuleContexts(Sql_expressionContext.class);
		}
		public Sql_expressionContext sql_expression(int i) {
			return getRuleContext(Sql_expressionContext.class,i);
		}
		public List<R_ascContext> r_asc() {
			return getRuleContexts(R_ascContext.class);
		}
		public R_ascContext r_asc(int i) {
			return getRuleContext(R_ascContext.class,i);
		}
		public List<R_descContext> r_desc() {
			return getRuleContexts(R_descContext.class);
		}
		public R_descContext r_desc(int i) {
			return getRuleContext(R_descContext.class,i);
		}
		public List<K_nullsContext> k_nulls() {
			return getRuleContexts(K_nullsContext.class);
		}
		public K_nullsContext k_nulls(int i) {
			return getRuleContext(K_nullsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public List<K_firstContext> k_first() {
			return getRuleContexts(K_firstContext.class);
		}
		public K_firstContext k_first(int i) {
			return getRuleContext(K_firstContext.class,i);
		}
		public List<K_lastContext> k_last() {
			return getRuleContexts(K_lastContext.class);
		}
		public K_lastContext k_last(int i) {
			return getRuleContext(K_lastContext.class,i);
		}
		public Dense_rank_aggregateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dense_rank_aggregate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterDense_rank_aggregate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitDense_rank_aggregate(this);
		}
	}

	public final Dense_rank_aggregateContext dense_rank_aggregate() throws RecognitionException {
		Dense_rank_aggregateContext _localctx = new Dense_rank_aggregateContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_dense_rank_aggregate);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3518);
			k_dense_rank();
			setState(3519);
			match(LPAREN);
			setState(3520);
			expression_list();
			setState(3521);
			match(RPAREN);
			setState(3522);
			k_within();
			setState(3523);
			r_group();
			setState(3524);
			match(LPAREN);
			setState(3525);
			r_order();
			setState(3526);
			r_by();
			setState(3527);
			sql_expression();
			setState(3530);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
			case 1:
				{
				setState(3528);
				r_asc();
				}
				break;
			case 2:
				{
				setState(3529);
				r_desc();
				}
				break;
			}
			setState(3537);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,440,_ctx) ) {
			case 1:
				{
				setState(3532);
				k_nulls();
				setState(3535);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case T__127:
					{
					setState(3533);
					k_first();
					}
					break;
				case T__135:
					{
					setState(3534);
					k_last();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(3554);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,444,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3539);
					match(COMMA);
					setState(3540);
					sql_expression();
					setState(3543);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
					case 1:
						{
						setState(3541);
						r_asc();
						}
						break;
					case 2:
						{
						setState(3542);
						r_desc();
						}
						break;
					}
					setState(3550);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
					case 1:
						{
						setState(3545);
						k_nulls();
						setState(3548);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case T__127:
							{
							setState(3546);
							k_first();
							}
							break;
						case T__135:
							{
							setState(3547);
							k_last();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					}
					} 
				}
				setState(3556);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,444,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Percent_rank_analyticContext extends ParserRuleContext {
		public K_percent_rankContext k_percent_rank() {
			return getRuleContext(K_percent_rankContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(OracleSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(OracleSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(OracleSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(OracleSQLParser.RPAREN, i);
		}
		public K_overContext k_over() {
			return getRuleContext(K_overContext.class,0);
		}
		public Query_partition_clauseContext query_partition_clause() {
			return getRuleContext(Query_partition_clauseContext.class,0);
		}
		public Percent_rank_analyticContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_percent_rank_analytic; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterPercent_rank_analytic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitPercent_rank_analytic(this);
		}
	}

	public final Percent_rank_analyticContext percent_rank_analytic() throws RecognitionException {
		Percent_rank_analyticContext _localctx = new Percent_rank_analyticContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_percent_rank_analytic);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3557);
			k_percent_rank();
			setState(3558);
			match(LPAREN);
			setState(3559);
			match(RPAREN);
			setState(3560);
			k_over();
			setState(3561);
			match(LPAREN);
			setState(3562);
			query_partition_clause();
			setState(3563);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Percent_cont_disc_analyticContext extends ParserRuleContext {
		public List<TerminalNode> LPAREN() { return getTokens(OracleSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(OracleSQLParser.LPAREN, i);
		}
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public List<TerminalNode> RPAREN() { return getTokens(OracleSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(OracleSQLParser.RPAREN, i);
		}
		public K_withinContext k_within() {
			return getRuleContext(K_withinContext.class,0);
		}
		public R_groupContext r_group() {
			return getRuleContext(R_groupContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public K_percentile_discContext k_percentile_disc() {
			return getRuleContext(K_percentile_discContext.class,0);
		}
		public K_percentile_contContext k_percentile_cont() {
			return getRuleContext(K_percentile_contContext.class,0);
		}
		public K_overContext k_over() {
			return getRuleContext(K_overContext.class,0);
		}
		public Query_partition_clauseContext query_partition_clause() {
			return getRuleContext(Query_partition_clauseContext.class,0);
		}
		public Percent_cont_disc_analyticContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_percent_cont_disc_analytic; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterPercent_cont_disc_analytic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitPercent_cont_disc_analytic(this);
		}
	}

	public final Percent_cont_disc_analyticContext percent_cont_disc_analytic() throws RecognitionException {
		Percent_cont_disc_analyticContext _localctx = new Percent_cont_disc_analyticContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_percent_cont_disc_analytic);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3567);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
			case 1:
				{
				setState(3565);
				k_percentile_disc();
				}
				break;
			case 2:
				{
				setState(3566);
				k_percentile_cont();
				}
				break;
			}
			setState(3569);
			match(LPAREN);
			setState(3570);
			sql_expression();
			setState(3571);
			match(RPAREN);
			setState(3572);
			k_within();
			setState(3573);
			r_group();
			setState(3574);
			match(LPAREN);
			setState(3575);
			order_by_clause();
			setState(3576);
			match(RPAREN);
			setState(3582);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,446,_ctx) ) {
			case 1:
				{
				setState(3577);
				k_over();
				setState(3578);
				match(LPAREN);
				setState(3579);
				query_partition_clause();
				setState(3580);
				match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dense_rank_analyticContext extends ParserRuleContext {
		public K_dense_rankContext k_dense_rank() {
			return getRuleContext(K_dense_rankContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(OracleSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(OracleSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(OracleSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(OracleSQLParser.RPAREN, i);
		}
		public K_overContext k_over() {
			return getRuleContext(K_overContext.class,0);
		}
		public Query_partition_clauseContext query_partition_clause() {
			return getRuleContext(Query_partition_clauseContext.class,0);
		}
		public Dense_rank_analyticContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dense_rank_analytic; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterDense_rank_analytic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitDense_rank_analytic(this);
		}
	}

	public final Dense_rank_analyticContext dense_rank_analytic() throws RecognitionException {
		Dense_rank_analyticContext _localctx = new Dense_rank_analyticContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_dense_rank_analytic);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3584);
			k_dense_rank();
			setState(3585);
			match(LPAREN);
			setState(3586);
			match(RPAREN);
			setState(3587);
			k_over();
			setState(3588);
			match(LPAREN);
			setState(3589);
			query_partition_clause();
			setState(3590);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class First_lastContext extends ParserRuleContext {
		public Aggregate_function_nameContext aggregate_function_name() {
			return getRuleContext(Aggregate_function_nameContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(OracleSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(OracleSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(OracleSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(OracleSQLParser.RPAREN, i);
		}
		public K_keepContext k_keep() {
			return getRuleContext(K_keepContext.class,0);
		}
		public K_dense_rankContext k_dense_rank() {
			return getRuleContext(K_dense_rankContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode ASTERISK() { return getToken(OracleSQLParser.ASTERISK, 0); }
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public K_firstContext k_first() {
			return getRuleContext(K_firstContext.class,0);
		}
		public K_lastContext k_last() {
			return getRuleContext(K_lastContext.class,0);
		}
		public K_overContext k_over() {
			return getRuleContext(K_overContext.class,0);
		}
		public Analytic_clauseContext analytic_clause() {
			return getRuleContext(Analytic_clauseContext.class,0);
		}
		public R_distinctContext r_distinct() {
			return getRuleContext(R_distinctContext.class,0);
		}
		public R_uniqueContext r_unique() {
			return getRuleContext(R_uniqueContext.class,0);
		}
		public R_allContext r_all() {
			return getRuleContext(R_allContext.class,0);
		}
		public First_lastContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_first_last; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterFirst_last(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitFirst_last(this);
		}
	}

	public final First_lastContext first_last() throws RecognitionException {
		First_lastContext _localctx = new First_lastContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_first_last);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3592);
			aggregate_function_name();
			setState(3593);
			match(LPAREN);
			setState(3601);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,448,_ctx) ) {
			case 1:
				{
				setState(3594);
				match(ASTERISK);
				}
				break;
			case 2:
				{
				setState(3598);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
				case 1:
					{
					setState(3595);
					r_distinct();
					}
					break;
				case 2:
					{
					setState(3596);
					r_unique();
					}
					break;
				case 3:
					{
					setState(3597);
					r_all();
					}
					break;
				}
				setState(3600);
				sql_expression();
				}
				break;
			}
			setState(3603);
			match(RPAREN);
			setState(3604);
			k_keep();
			setState(3605);
			match(LPAREN);
			setState(3606);
			k_dense_rank();
			setState(3609);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__127:
				{
				setState(3607);
				k_first();
				}
				break;
			case T__135:
				{
				setState(3608);
				k_last();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3611);
			order_by_clause();
			setState(3612);
			match(RPAREN);
			setState(3618);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,450,_ctx) ) {
			case 1:
				{
				setState(3613);
				k_over();
				setState(3614);
				match(LPAREN);
				setState(3615);
				analytic_clause();
				setState(3616);
				match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListaggContext extends ParserRuleContext {
		public K_listaggContext k_listagg() {
			return getRuleContext(K_listaggContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(OracleSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(OracleSQLParser.LPAREN, i);
		}
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public List<TerminalNode> RPAREN() { return getTokens(OracleSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(OracleSQLParser.RPAREN, i);
		}
		public K_withinContext k_within() {
			return getRuleContext(K_withinContext.class,0);
		}
		public R_groupContext r_group() {
			return getRuleContext(R_groupContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(OracleSQLParser.COMMA, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public K_overContext k_over() {
			return getRuleContext(K_overContext.class,0);
		}
		public Query_partition_clauseContext query_partition_clause() {
			return getRuleContext(Query_partition_clauseContext.class,0);
		}
		public ListaggContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listagg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterListagg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitListagg(this);
		}
	}

	public final ListaggContext listagg() throws RecognitionException {
		ListaggContext _localctx = new ListaggContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_listagg);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3620);
			k_listagg();
			setState(3621);
			match(LPAREN);
			setState(3622);
			sql_expression();
			setState(3625);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3623);
				match(COMMA);
				setState(3624);
				quoted_string();
				}
			}

			setState(3627);
			match(RPAREN);
			setState(3628);
			k_within();
			setState(3629);
			r_group();
			setState(3630);
			match(LPAREN);
			setState(3631);
			order_by_clause();
			setState(3632);
			match(RPAREN);
			setState(3638);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,452,_ctx) ) {
			case 1:
				{
				setState(3633);
				k_over();
				setState(3634);
				match(LPAREN);
				setState(3635);
				query_partition_clause();
				setState(3636);
				match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_clauseContext extends ParserRuleContext {
		public R_forContext r_for() {
			return getRuleContext(R_forContext.class,0);
		}
		public R_updateContext r_update() {
			return getRuleContext(R_updateContext.class,0);
		}
		public R_ofContext r_of() {
			return getRuleContext(R_ofContext.class,0);
		}
		public For_update_clause_part_firstContext for_update_clause_part_first() {
			return getRuleContext(For_update_clause_part_firstContext.class,0);
		}
		public R_nowaitContext r_nowait() {
			return getRuleContext(R_nowaitContext.class,0);
		}
		public K_waitContext k_wait() {
			return getRuleContext(K_waitContext.class,0);
		}
		public TerminalNode NUMBER() { return getToken(OracleSQLParser.NUMBER, 0); }
		public K_skipContext k_skip() {
			return getRuleContext(K_skipContext.class,0);
		}
		public K_lockedContext k_locked() {
			return getRuleContext(K_lockedContext.class,0);
		}
		public List<For_update_clause_part_nextContext> for_update_clause_part_next() {
			return getRuleContexts(For_update_clause_part_nextContext.class);
		}
		public For_update_clause_part_nextContext for_update_clause_part_next(int i) {
			return getRuleContext(For_update_clause_part_nextContext.class,i);
		}
		public For_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterFor_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitFor_update_clause(this);
		}
	}

	public final For_update_clauseContext for_update_clause() throws RecognitionException {
		For_update_clauseContext _localctx = new For_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_for_update_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3640);
			r_for();
			setState(3641);
			r_update();
			setState(3650);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
			case 1:
				{
				setState(3642);
				r_of();
				setState(3643);
				for_update_clause_part_first();
				setState(3647);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,453,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3644);
						for_update_clause_part_next();
						}
						} 
					}
					setState(3649);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,453,_ctx);
				}
				}
				break;
			}
			setState(3659);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,455,_ctx) ) {
			case 1:
				{
				setState(3652);
				r_nowait();
				}
				break;
			case 2:
				{
				setState(3653);
				k_wait();
				setState(3654);
				match(NUMBER);
				}
				break;
			case 3:
				{
				setState(3656);
				k_skip();
				setState(3657);
				k_locked();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_clause_part_firstContext extends ParserRuleContext {
		public Schema_nameContext sch1;
		public Token dot1a;
		public Table_nameContext tbl1;
		public Token dot1b;
		public Column_nameContext col1;
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(OracleSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(OracleSQLParser.DOT, i);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public For_update_clause_part_firstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_clause_part_first; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterFor_update_clause_part_first(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitFor_update_clause_part_first(this);
		}
	}

	public final For_update_clause_part_firstContext for_update_clause_part_first() throws RecognitionException {
		For_update_clause_part_firstContext _localctx = new For_update_clause_part_firstContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_for_update_clause_part_first);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3664);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
			case 1:
				{
				setState(3661);
				((For_update_clause_part_firstContext)_localctx).sch1 = schema_name();
				setState(3662);
				((For_update_clause_part_firstContext)_localctx).dot1a = match(DOT);
				}
				break;
			}
			setState(3669);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,457,_ctx) ) {
			case 1:
				{
				setState(3666);
				((For_update_clause_part_firstContext)_localctx).tbl1 = table_name();
				setState(3667);
				((For_update_clause_part_firstContext)_localctx).dot1b = match(DOT);
				}
				break;
			}
			setState(3671);
			((For_update_clause_part_firstContext)_localctx).col1 = column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_clause_part_nextContext extends ParserRuleContext {
		public Schema_nameContext sch1;
		public Token dot1a;
		public Table_nameContext tbl1;
		public Token dot1b;
		public Column_nameContext col1;
		public TerminalNode COMMA() { return getToken(OracleSQLParser.COMMA, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(OracleSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(OracleSQLParser.DOT, i);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public For_update_clause_part_nextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_clause_part_next; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterFor_update_clause_part_next(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitFor_update_clause_part_next(this);
		}
	}

	public final For_update_clause_part_nextContext for_update_clause_part_next() throws RecognitionException {
		For_update_clause_part_nextContext _localctx = new For_update_clause_part_nextContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_for_update_clause_part_next);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3673);
			match(COMMA);
			setState(3677);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
			case 1:
				{
				setState(3674);
				((For_update_clause_part_nextContext)_localctx).sch1 = schema_name();
				setState(3675);
				((For_update_clause_part_nextContext)_localctx).dot1a = match(DOT);
				}
				break;
			}
			setState(3682);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,459,_ctx) ) {
			case 1:
				{
				setState(3679);
				((For_update_clause_part_nextContext)_localctx).tbl1 = table_name();
				setState(3680);
				((For_update_clause_part_nextContext)_localctx).dot1b = match(DOT);
				}
				break;
			}
			setState(3684);
			((For_update_clause_part_nextContext)_localctx).col1 = column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_clauseContext extends ParserRuleContext {
		public K_pivotContext k_pivot() {
			return getRuleContext(K_pivotContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public List<Aggregate_functionContext> aggregate_function() {
			return getRuleContexts(Aggregate_functionContext.class);
		}
		public Aggregate_functionContext aggregate_function(int i) {
			return getRuleContext(Aggregate_functionContext.class,i);
		}
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public Pivot_in_clauseContext pivot_in_clause() {
			return getRuleContext(Pivot_in_clauseContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public K_xmlContext k_xml() {
			return getRuleContext(K_xmlContext.class,0);
		}
		public List<C_aliasContext> c_alias() {
			return getRuleContexts(C_aliasContext.class);
		}
		public C_aliasContext c_alias(int i) {
			return getRuleContext(C_aliasContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterPivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitPivot_clause(this);
		}
	}

	public final Pivot_clauseContext pivot_clause() throws RecognitionException {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_pivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3686);
			k_pivot();
			setState(3688);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,460,_ctx) ) {
			case 1:
				{
				setState(3687);
				k_xml();
				}
				break;
			}
			setState(3690);
			match(LPAREN);
			setState(3691);
			aggregate_function();
			setState(3693);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__7 || _la==T__12 || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (T__82 - 83)) | (1L << (T__84 - 83)) | (1L << (T__115 - 83)) | (1L << (T__119 - 83)) | (1L << (T__120 - 83)) | (1L << (T__122 - 83)) | (1L << (T__125 - 83)) | (1L << (T__126 - 83)) | (1L << (T__127 - 83)) | (1L << (T__130 - 83)) | (1L << (T__132 - 83)) | (1L << (T__133 - 83)) | (1L << (T__135 - 83)) | (1L << (T__137 - 83)) | (1L << (T__138 - 83)) | (1L << (T__139 - 83)) | (1L << (T__141 - 83)) | (1L << (T__144 - 83)))) != 0) || ((((_la - 147)) & ~0x3f) == 0 && ((1L << (_la - 147)) & ((1L << (T__146 - 147)) | (1L << (T__147 - 147)) | (1L << (T__149 - 147)) | (1L << (T__152 - 147)) | (1L << (T__154 - 147)) | (1L << (T__157 - 147)) | (1L << (T__158 - 147)) | (1L << (T__161 - 147)) | (1L << (T__164 - 147)) | (1L << (T__166 - 147)) | (1L << (T__169 - 147)))) != 0) || _la==ID) {
				{
				setState(3692);
				c_alias();
				}
			}

			setState(3702);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3695);
				match(COMMA);
				setState(3696);
				aggregate_function();
				setState(3698);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__7 || _la==T__12 || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (T__82 - 83)) | (1L << (T__84 - 83)) | (1L << (T__115 - 83)) | (1L << (T__119 - 83)) | (1L << (T__120 - 83)) | (1L << (T__122 - 83)) | (1L << (T__125 - 83)) | (1L << (T__126 - 83)) | (1L << (T__127 - 83)) | (1L << (T__130 - 83)) | (1L << (T__132 - 83)) | (1L << (T__133 - 83)) | (1L << (T__135 - 83)) | (1L << (T__137 - 83)) | (1L << (T__138 - 83)) | (1L << (T__139 - 83)) | (1L << (T__141 - 83)) | (1L << (T__144 - 83)))) != 0) || ((((_la - 147)) & ~0x3f) == 0 && ((1L << (_la - 147)) & ((1L << (T__146 - 147)) | (1L << (T__147 - 147)) | (1L << (T__149 - 147)) | (1L << (T__152 - 147)) | (1L << (T__154 - 147)) | (1L << (T__157 - 147)) | (1L << (T__158 - 147)) | (1L << (T__161 - 147)) | (1L << (T__164 - 147)) | (1L << (T__166 - 147)) | (1L << (T__169 - 147)))) != 0) || _la==ID) {
					{
					setState(3697);
					c_alias();
					}
				}

				}
				}
				setState(3704);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3705);
			pivot_for_clause();
			setState(3706);
			pivot_in_clause();
			setState(3707);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_for_clauseContext extends ParserRuleContext {
		public R_forContext r_for() {
			return getRuleContext(R_forContext.class,0);
		}
		public Column_specContext column_spec() {
			return getRuleContext(Column_specContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public Column_specsContext column_specs() {
			return getRuleContext(Column_specsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public Pivot_for_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_for_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterPivot_for_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitPivot_for_clause(this);
		}
	}

	public final Pivot_for_clauseContext pivot_for_clause() throws RecognitionException {
		Pivot_for_clauseContext _localctx = new Pivot_for_clauseContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_pivot_for_clause);
		try {
			setState(3716);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__35:
				enterOuterAlt(_localctx, 1);
				{
				setState(3709);
				r_for();
				setState(3710);
				column_spec();
				}
				break;
			case LPAREN:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(3712);
				match(LPAREN);
				setState(3713);
				column_specs();
				setState(3714);
				match(RPAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clauseContext extends ParserRuleContext {
		public R_inContext r_in() {
			return getRuleContext(R_inContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(OracleSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(OracleSQLParser.RPAREN, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public List<R_anyContext> r_any() {
			return getRuleContexts(R_anyContext.class);
		}
		public R_anyContext r_any(int i) {
			return getRuleContext(R_anyContext.class,i);
		}
		public List<Expression_listContext> expression_list() {
			return getRuleContexts(Expression_listContext.class);
		}
		public Expression_listContext expression_list(int i) {
			return getRuleContext(Expression_listContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public List<C_aliasContext> c_alias() {
			return getRuleContexts(C_aliasContext.class);
		}
		public C_aliasContext c_alias(int i) {
			return getRuleContext(C_aliasContext.class,i);
		}
		public Pivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterPivot_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitPivot_in_clause(this);
		}
	}

	public final Pivot_in_clauseContext pivot_in_clause() throws RecognitionException {
		Pivot_in_clauseContext _localctx = new Pivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_pivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3718);
			r_in();
			setState(3719);
			match(LPAREN);
			setState(3738);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,468,_ctx) ) {
			case 1:
				{
				setState(3720);
				select_statement();
				}
				break;
			case 2:
				{
				setState(3721);
				r_any();
				setState(3726);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3722);
					match(COMMA);
					setState(3723);
					r_any();
					}
					}
					setState(3728);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				{
				setState(3729);
				expression_list();
				setState(3731);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__7 || _la==T__12 || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (T__82 - 83)) | (1L << (T__84 - 83)) | (1L << (T__115 - 83)) | (1L << (T__119 - 83)) | (1L << (T__120 - 83)) | (1L << (T__122 - 83)) | (1L << (T__125 - 83)) | (1L << (T__126 - 83)) | (1L << (T__127 - 83)) | (1L << (T__130 - 83)) | (1L << (T__132 - 83)) | (1L << (T__133 - 83)) | (1L << (T__135 - 83)) | (1L << (T__137 - 83)) | (1L << (T__138 - 83)) | (1L << (T__139 - 83)) | (1L << (T__141 - 83)) | (1L << (T__144 - 83)))) != 0) || ((((_la - 147)) & ~0x3f) == 0 && ((1L << (_la - 147)) & ((1L << (T__146 - 147)) | (1L << (T__147 - 147)) | (1L << (T__149 - 147)) | (1L << (T__152 - 147)) | (1L << (T__154 - 147)) | (1L << (T__157 - 147)) | (1L << (T__158 - 147)) | (1L << (T__161 - 147)) | (1L << (T__164 - 147)) | (1L << (T__166 - 147)) | (1L << (T__169 - 147)))) != 0) || _la==ID) {
					{
					setState(3730);
					c_alias();
					}
				}

				{
				setState(3733);
				match(COMMA);
				setState(3734);
				expression_list();
				setState(3736);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__7 || _la==T__12 || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (T__82 - 83)) | (1L << (T__84 - 83)) | (1L << (T__115 - 83)) | (1L << (T__119 - 83)) | (1L << (T__120 - 83)) | (1L << (T__122 - 83)) | (1L << (T__125 - 83)) | (1L << (T__126 - 83)) | (1L << (T__127 - 83)) | (1L << (T__130 - 83)) | (1L << (T__132 - 83)) | (1L << (T__133 - 83)) | (1L << (T__135 - 83)) | (1L << (T__137 - 83)) | (1L << (T__138 - 83)) | (1L << (T__139 - 83)) | (1L << (T__141 - 83)) | (1L << (T__144 - 83)))) != 0) || ((((_la - 147)) & ~0x3f) == 0 && ((1L << (_la - 147)) & ((1L << (T__146 - 147)) | (1L << (T__147 - 147)) | (1L << (T__149 - 147)) | (1L << (T__152 - 147)) | (1L << (T__154 - 147)) | (1L << (T__157 - 147)) | (1L << (T__158 - 147)) | (1L << (T__161 - 147)) | (1L << (T__164 - 147)) | (1L << (T__166 - 147)) | (1L << (T__169 - 147)))) != 0) || _la==ID) {
					{
					setState(3735);
					c_alias();
					}
				}

				}
				}
				break;
			}
			setState(3740);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_clauseContext extends ParserRuleContext {
		public K_unpivotContext k_unpivot() {
			return getRuleContext(K_unpivotContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(OracleSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(OracleSQLParser.LPAREN, i);
		}
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public Unpivot_in_clauseContext unpivot_in_clause() {
			return getRuleContext(Unpivot_in_clauseContext.class,0);
		}
		public List<TerminalNode> RPAREN() { return getTokens(OracleSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(OracleSQLParser.RPAREN, i);
		}
		public Column_specContext column_spec() {
			return getRuleContext(Column_specContext.class,0);
		}
		public K_nullsContext k_nulls() {
			return getRuleContext(K_nullsContext.class,0);
		}
		public Column_specsContext column_specs() {
			return getRuleContext(Column_specsContext.class,0);
		}
		public K_excludeContext k_exclude() {
			return getRuleContext(K_excludeContext.class,0);
		}
		public K_includeContext k_include() {
			return getRuleContext(K_includeContext.class,0);
		}
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterUnpivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitUnpivot_clause(this);
		}
	}

	public final Unpivot_clauseContext unpivot_clause() throws RecognitionException {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_unpivot_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3742);
			k_unpivot();
			setState(3749);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
			case 1:
				{
				setState(3745);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
				case 1:
					{
					setState(3743);
					k_exclude();
					}
					break;
				case 2:
					{
					setState(3744);
					k_include();
					}
					break;
				}
				setState(3747);
				k_nulls();
				}
				break;
			}
			setState(3751);
			match(LPAREN);
			setState(3757);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__12:
			case T__51:
			case T__64:
			case T__82:
			case T__84:
			case T__96:
			case T__106:
			case T__115:
			case T__119:
			case T__120:
			case T__122:
			case T__125:
			case T__126:
			case T__127:
			case T__130:
			case T__132:
			case T__133:
			case T__135:
			case T__137:
			case T__138:
			case T__139:
			case T__141:
			case T__144:
			case T__146:
			case T__147:
			case T__149:
			case T__152:
			case T__154:
			case T__157:
			case T__158:
			case T__161:
			case T__164:
			case T__166:
			case T__169:
			case BINDVAR:
			case ID:
			case COLON:
				{
				setState(3752);
				column_spec();
				}
				break;
			case LPAREN:
				{
				{
				setState(3753);
				match(LPAREN);
				setState(3754);
				column_specs();
				setState(3755);
				match(RPAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3759);
			pivot_for_clause();
			setState(3760);
			unpivot_in_clause();
			setState(3761);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_in_clauseContext extends ParserRuleContext {
		public R_inContext r_in() {
			return getRuleContext(R_inContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(OracleSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(OracleSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(OracleSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(OracleSQLParser.RPAREN, i);
		}
		public List<Column_specContext> column_spec() {
			return getRuleContexts(Column_specContext.class);
		}
		public Column_specContext column_spec(int i) {
			return getRuleContext(Column_specContext.class,i);
		}
		public List<R_asContext> r_as() {
			return getRuleContexts(R_asContext.class);
		}
		public R_asContext r_as(int i) {
			return getRuleContext(R_asContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLParser.COMMA, i);
		}
		public List<Column_specsContext> column_specs() {
			return getRuleContexts(Column_specsContext.class);
		}
		public Column_specsContext column_specs(int i) {
			return getRuleContext(Column_specsContext.class,i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public Unpivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterUnpivot_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitUnpivot_in_clause(this);
		}
	}

	public final Unpivot_in_clauseContext unpivot_in_clause() throws RecognitionException {
		Unpivot_in_clauseContext _localctx = new Unpivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_unpivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3763);
			r_in();
			setState(3764);
			match(LPAREN);
			setState(3770);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__12:
			case T__51:
			case T__64:
			case T__82:
			case T__84:
			case T__96:
			case T__106:
			case T__115:
			case T__119:
			case T__120:
			case T__122:
			case T__125:
			case T__126:
			case T__127:
			case T__130:
			case T__132:
			case T__133:
			case T__135:
			case T__137:
			case T__138:
			case T__139:
			case T__141:
			case T__144:
			case T__146:
			case T__147:
			case T__149:
			case T__152:
			case T__154:
			case T__157:
			case T__158:
			case T__161:
			case T__164:
			case T__166:
			case T__169:
			case BINDVAR:
			case ID:
			case COLON:
				{
				setState(3765);
				column_spec();
				}
				break;
			case LPAREN:
				{
				{
				setState(3766);
				match(LPAREN);
				setState(3767);
				column_specs();
				setState(3768);
				match(RPAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3780);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__7) {
				{
				setState(3772);
				r_as();
				setState(3778);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case QUOTED_STRING:
				case QSTRING:
				case NUMBER:
					{
					setState(3773);
					constant();
					}
					break;
				case LPAREN:
					{
					{
					setState(3774);
					match(LPAREN);
					setState(3775);
					constant();
					setState(3776);
					match(RPAREN);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(3802);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3782);
				match(COMMA);
				setState(3788);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case T__12:
				case T__51:
				case T__64:
				case T__82:
				case T__84:
				case T__96:
				case T__106:
				case T__115:
				case T__119:
				case T__120:
				case T__122:
				case T__125:
				case T__126:
				case T__127:
				case T__130:
				case T__132:
				case T__133:
				case T__135:
				case T__137:
				case T__138:
				case T__139:
				case T__141:
				case T__144:
				case T__146:
				case T__147:
				case T__149:
				case T__152:
				case T__154:
				case T__157:
				case T__158:
				case T__161:
				case T__164:
				case T__166:
				case T__169:
				case BINDVAR:
				case ID:
				case COLON:
					{
					setState(3783);
					column_spec();
					}
					break;
				case LPAREN:
					{
					{
					setState(3784);
					match(LPAREN);
					setState(3785);
					column_specs();
					setState(3786);
					match(RPAREN);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3798);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__7) {
					{
					setState(3790);
					r_as();
					setState(3796);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case QUOTED_STRING:
					case QSTRING:
					case NUMBER:
						{
						setState(3791);
						constant();
						}
						break;
					case LPAREN:
						{
						{
						setState(3792);
						match(LPAREN);
						setState(3793);
						constant();
						setState(3794);
						match(RPAREN);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				}
				setState(3804);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3805);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public TerminalNode NUMBER() { return getToken(OracleSQLParser.NUMBER, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitConstant(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_constant);
		try {
			setState(3809);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3807);
				match(NUMBER);
				}
				break;
			case QUOTED_STRING:
			case QSTRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3808);
				quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_accessContext extends ParserRuleContext {
		public Token r;
		public R_accessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_access; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_access(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_access(this);
		}
	}

	public final R_accessContext r_access() throws RecognitionException {
		R_accessContext _localctx = new R_accessContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_r_access);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3811);
			((R_accessContext)_localctx).r = match(T__0);
			 ((R_accessContext)_localctx).r->setType(((R_accessContext)_localctx).r, T_RESERVED); ((R_accessContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_addContext extends ParserRuleContext {
		public Token r;
		public R_addContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_add; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_add(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_add(this);
		}
	}

	public final R_addContext r_add() throws RecognitionException {
		R_addContext _localctx = new R_addContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_r_add);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3814);
			((R_addContext)_localctx).r = match(T__1);
			 ((R_addContext)_localctx).r->setType(((R_addContext)_localctx).r, T_RESERVED); ((R_addContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_allContext extends ParserRuleContext {
		public Token r;
		public R_allContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_all; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_all(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_all(this);
		}
	}

	public final R_allContext r_all() throws RecognitionException {
		R_allContext _localctx = new R_allContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_r_all);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3817);
			((R_allContext)_localctx).r = match(T__2);
			 ((R_allContext)_localctx).r->setType(((R_allContext)_localctx).r, T_RESERVED); ((R_allContext)_localctx).r->user1 = T_OPERATOR_PART;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_alterContext extends ParserRuleContext {
		public Token r;
		public R_alterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_alter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_alter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_alter(this);
		}
	}

	public final R_alterContext r_alter() throws RecognitionException {
		R_alterContext _localctx = new R_alterContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_r_alter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3820);
			((R_alterContext)_localctx).r = match(T__3);
			 ((R_alterContext)_localctx).r->setType(((R_alterContext)_localctx).r, T_RESERVED); ((R_alterContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_andContext extends ParserRuleContext {
		public Token r;
		public R_andContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_and; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_and(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_and(this);
		}
	}

	public final R_andContext r_and() throws RecognitionException {
		R_andContext _localctx = new R_andContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_r_and);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3823);
			((R_andContext)_localctx).r = match(T__4);
			 ((R_andContext)_localctx).r->setType(((R_andContext)_localctx).r, T_RESERVED); ((R_andContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_anyContext extends ParserRuleContext {
		public Token r;
		public R_anyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_any; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_any(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_any(this);
		}
	}

	public final R_anyContext r_any() throws RecognitionException {
		R_anyContext _localctx = new R_anyContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_r_any);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3826);
			((R_anyContext)_localctx).r = match(T__5);
			 ((R_anyContext)_localctx).r->setType(((R_anyContext)_localctx).r, T_RESERVED); ((R_anyContext)_localctx).r->user1 = T_OPERATOR_PART;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_arraylenContext extends ParserRuleContext {
		public Token r;
		public R_arraylenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_arraylen; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_arraylen(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_arraylen(this);
		}
	}

	public final R_arraylenContext r_arraylen() throws RecognitionException {
		R_arraylenContext _localctx = new R_arraylenContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_r_arraylen);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3829);
			((R_arraylenContext)_localctx).r = match(T__6);
			 ((R_arraylenContext)_localctx).r->setType(((R_arraylenContext)_localctx).r, T_RESERVED); ((R_arraylenContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_asContext extends ParserRuleContext {
		public Token r;
		public R_asContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_as; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_as(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_as(this);
		}
	}

	public final R_asContext r_as() throws RecognitionException {
		R_asContext _localctx = new R_asContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_r_as);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3832);
			((R_asContext)_localctx).r = match(T__7);
			 ((R_asContext)_localctx).r->setType(((R_asContext)_localctx).r, T_RESERVED); ((R_asContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_ascContext extends ParserRuleContext {
		public Token r;
		public R_ascContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_asc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_asc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_asc(this);
		}
	}

	public final R_ascContext r_asc() throws RecognitionException {
		R_ascContext _localctx = new R_ascContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_r_asc);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3835);
			((R_ascContext)_localctx).r = match(T__8);
			 ((R_ascContext)_localctx).r->setType(((R_ascContext)_localctx).r, T_RESERVED); ((R_ascContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_auditContext extends ParserRuleContext {
		public Token r;
		public R_auditContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_audit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_audit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_audit(this);
		}
	}

	public final R_auditContext r_audit() throws RecognitionException {
		R_auditContext _localctx = new R_auditContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_r_audit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3838);
			((R_auditContext)_localctx).r = match(T__9);
			 ((R_auditContext)_localctx).r->setType(((R_auditContext)_localctx).r, T_RESERVED); ((R_auditContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_betweenContext extends ParserRuleContext {
		public Token r;
		public R_betweenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_between; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_between(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_between(this);
		}
	}

	public final R_betweenContext r_between() throws RecognitionException {
		R_betweenContext _localctx = new R_betweenContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_r_between);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3841);
			((R_betweenContext)_localctx).r = match(T__10);
			 ((R_betweenContext)_localctx).r->setType(((R_betweenContext)_localctx).r, T_RESERVED); ((R_betweenContext)_localctx).r->user1 = T_OPERATOR_BINARY;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_byContext extends ParserRuleContext {
		public Token r;
		public R_byContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_by; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_by(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_by(this);
		}
	}

	public final R_byContext r_by() throws RecognitionException {
		R_byContext _localctx = new R_byContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_r_by);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3844);
			((R_byContext)_localctx).r = match(T__11);
			 ((R_byContext)_localctx).r->setType(((R_byContext)_localctx).r, T_RESERVED); ((R_byContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_caseContext extends ParserRuleContext {
		public Token r;
		public R_caseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_case; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_case(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_case(this);
		}
	}

	public final R_caseContext r_case() throws RecognitionException {
		R_caseContext _localctx = new R_caseContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_r_case);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3847);
			((R_caseContext)_localctx).r = match(T__12);
			 ((R_caseContext)_localctx).r->setType(((R_caseContext)_localctx).r, T_RESERVED); ((R_caseContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_charContext extends ParserRuleContext {
		public Token r;
		public R_charContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_char; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_char(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_char(this);
		}
	}

	public final R_charContext r_char() throws RecognitionException {
		R_charContext _localctx = new R_charContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_r_char);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3850);
			((R_charContext)_localctx).r = match(T__13);
			 ((R_charContext)_localctx).r->setType(((R_charContext)_localctx).r, T_RESERVED); ((R_charContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_checkContext extends ParserRuleContext {
		public Token r;
		public R_checkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_check; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_check(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_check(this);
		}
	}

	public final R_checkContext r_check() throws RecognitionException {
		R_checkContext _localctx = new R_checkContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_r_check);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3853);
			((R_checkContext)_localctx).r = match(T__14);
			 ((R_checkContext)_localctx).r->setType(((R_checkContext)_localctx).r, T_RESERVED); ((R_checkContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_clusterContext extends ParserRuleContext {
		public Token r;
		public R_clusterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_cluster; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_cluster(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_cluster(this);
		}
	}

	public final R_clusterContext r_cluster() throws RecognitionException {
		R_clusterContext _localctx = new R_clusterContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_r_cluster);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3856);
			((R_clusterContext)_localctx).r = match(T__15);
			 ((R_clusterContext)_localctx).r->setType(((R_clusterContext)_localctx).r, T_RESERVED); ((R_clusterContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_columnContext extends ParserRuleContext {
		public Token r;
		public R_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_column(this);
		}
	}

	public final R_columnContext r_column() throws RecognitionException {
		R_columnContext _localctx = new R_columnContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_r_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3859);
			((R_columnContext)_localctx).r = match(T__16);
			 ((R_columnContext)_localctx).r->setType(((R_columnContext)_localctx).r, T_RESERVED); ((R_columnContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_commentContext extends ParserRuleContext {
		public Token r;
		public R_commentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_comment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_comment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_comment(this);
		}
	}

	public final R_commentContext r_comment() throws RecognitionException {
		R_commentContext _localctx = new R_commentContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_r_comment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3862);
			((R_commentContext)_localctx).r = match(T__17);
			 ((R_commentContext)_localctx).r->setType(((R_commentContext)_localctx).r, T_RESERVED); ((R_commentContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_compressContext extends ParserRuleContext {
		public Token r;
		public R_compressContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_compress; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_compress(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_compress(this);
		}
	}

	public final R_compressContext r_compress() throws RecognitionException {
		R_compressContext _localctx = new R_compressContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_r_compress);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3865);
			((R_compressContext)_localctx).r = match(T__18);
			 ((R_compressContext)_localctx).r->setType(((R_compressContext)_localctx).r, T_RESERVED); ((R_compressContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_connectContext extends ParserRuleContext {
		public Token r;
		public R_connectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_connect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_connect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_connect(this);
		}
	}

	public final R_connectContext r_connect() throws RecognitionException {
		R_connectContext _localctx = new R_connectContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_r_connect);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3868);
			((R_connectContext)_localctx).r = match(T__19);
			 ((R_connectContext)_localctx).r->setType(((R_connectContext)_localctx).r, T_RESERVED); ((R_connectContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_createContext extends ParserRuleContext {
		public Token r;
		public R_createContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_create; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_create(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_create(this);
		}
	}

	public final R_createContext r_create() throws RecognitionException {
		R_createContext _localctx = new R_createContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_r_create);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3871);
			((R_createContext)_localctx).r = match(T__20);
			 ((R_createContext)_localctx).r->setType(((R_createContext)_localctx).r, T_RESERVED); ((R_createContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_currentContext extends ParserRuleContext {
		public Token r;
		public R_currentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_current; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_current(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_current(this);
		}
	}

	public final R_currentContext r_current() throws RecognitionException {
		R_currentContext _localctx = new R_currentContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_r_current);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3874);
			((R_currentContext)_localctx).r = match(T__21);
			 ((R_currentContext)_localctx).r->setType(((R_currentContext)_localctx).r, T_RESERVED); ((R_currentContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_dateContext extends ParserRuleContext {
		public Token r;
		public R_dateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_date; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_date(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_date(this);
		}
	}

	public final R_dateContext r_date() throws RecognitionException {
		R_dateContext _localctx = new R_dateContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_r_date);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3877);
			((R_dateContext)_localctx).r = match(T__22);
			 ((R_dateContext)_localctx).r->setType(((R_dateContext)_localctx).r, T_RESERVED); ((R_dateContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_decimalContext extends ParserRuleContext {
		public Token r;
		public R_decimalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_decimal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_decimal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_decimal(this);
		}
	}

	public final R_decimalContext r_decimal() throws RecognitionException {
		R_decimalContext _localctx = new R_decimalContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_r_decimal);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3880);
			((R_decimalContext)_localctx).r = match(T__23);
			 ((R_decimalContext)_localctx).r->setType(((R_decimalContext)_localctx).r, T_RESERVED); ((R_decimalContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_defaultContext extends ParserRuleContext {
		public Token r;
		public R_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_default(this);
		}
	}

	public final R_defaultContext r_default() throws RecognitionException {
		R_defaultContext _localctx = new R_defaultContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_r_default);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3883);
			((R_defaultContext)_localctx).r = match(T__24);
			 ((R_defaultContext)_localctx).r->setType(((R_defaultContext)_localctx).r, T_RESERVED); ((R_defaultContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_deleteContext extends ParserRuleContext {
		public Token r;
		public R_deleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_delete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_delete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_delete(this);
		}
	}

	public final R_deleteContext r_delete() throws RecognitionException {
		R_deleteContext _localctx = new R_deleteContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_r_delete);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3886);
			((R_deleteContext)_localctx).r = match(T__25);
			 ((R_deleteContext)_localctx).r->setType(((R_deleteContext)_localctx).r, T_RESERVED); ((R_deleteContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_descContext extends ParserRuleContext {
		public Token r;
		public R_descContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_desc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_desc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_desc(this);
		}
	}

	public final R_descContext r_desc() throws RecognitionException {
		R_descContext _localctx = new R_descContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_r_desc);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3889);
			((R_descContext)_localctx).r = match(T__26);
			 ((R_descContext)_localctx).r->setType(((R_descContext)_localctx).r, T_RESERVED); ((R_descContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_distinctContext extends ParserRuleContext {
		public Token r;
		public R_distinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_distinct; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_distinct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_distinct(this);
		}
	}

	public final R_distinctContext r_distinct() throws RecognitionException {
		R_distinctContext _localctx = new R_distinctContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_r_distinct);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3892);
			((R_distinctContext)_localctx).r = match(T__27);
			 ((R_distinctContext)_localctx).r->setType(((R_distinctContext)_localctx).r, T_RESERVED); ((R_distinctContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_dropContext extends ParserRuleContext {
		public Token r;
		public R_dropContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_drop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_drop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_drop(this);
		}
	}

	public final R_dropContext r_drop() throws RecognitionException {
		R_dropContext _localctx = new R_dropContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_r_drop);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3895);
			((R_dropContext)_localctx).r = match(T__28);
			 ((R_dropContext)_localctx).r->setType(((R_dropContext)_localctx).r, T_RESERVED); ((R_dropContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_elseContext extends ParserRuleContext {
		public Token r;
		public R_elseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_else; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_else(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_else(this);
		}
	}

	public final R_elseContext r_else() throws RecognitionException {
		R_elseContext _localctx = new R_elseContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_r_else);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3898);
			((R_elseContext)_localctx).r = match(T__29);
			 ((R_elseContext)_localctx).r->setType(((R_elseContext)_localctx).r, T_RESERVED); ((R_elseContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_exclusiveContext extends ParserRuleContext {
		public Token r;
		public R_exclusiveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_exclusive; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_exclusive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_exclusive(this);
		}
	}

	public final R_exclusiveContext r_exclusive() throws RecognitionException {
		R_exclusiveContext _localctx = new R_exclusiveContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_r_exclusive);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3901);
			((R_exclusiveContext)_localctx).r = match(T__30);
			 ((R_exclusiveContext)_localctx).r->setType(((R_exclusiveContext)_localctx).r, T_RESERVED); ((R_exclusiveContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_existsContext extends ParserRuleContext {
		public Token r;
		public R_existsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_exists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_exists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_exists(this);
		}
	}

	public final R_existsContext r_exists() throws RecognitionException {
		R_existsContext _localctx = new R_existsContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_r_exists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3904);
			((R_existsContext)_localctx).r = match(T__31);
			 ((R_existsContext)_localctx).r->setType(((R_existsContext)_localctx).r, T_RESERVED); ((R_existsContext)_localctx).r->user1 = T_OPERATOR_UNARY;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_falseContext extends ParserRuleContext {
		public Token r;
		public R_falseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_false; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_false(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_false(this);
		}
	}

	public final R_falseContext r_false() throws RecognitionException {
		R_falseContext _localctx = new R_falseContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_r_false);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3907);
			((R_falseContext)_localctx).r = match(T__32);
			 ((R_falseContext)_localctx).r->setType(((R_falseContext)_localctx).r, T_RESERVED); ((R_falseContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_fileContext extends ParserRuleContext {
		public Token r;
		public R_fileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_file; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_file(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_file(this);
		}
	}

	public final R_fileContext r_file() throws RecognitionException {
		R_fileContext _localctx = new R_fileContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_r_file);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3910);
			((R_fileContext)_localctx).r = match(T__33);
			 ((R_fileContext)_localctx).r->setType(((R_fileContext)_localctx).r, T_RESERVED); ((R_fileContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_floatContext extends ParserRuleContext {
		public Token r;
		public R_floatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_float; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_float(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_float(this);
		}
	}

	public final R_floatContext r_float() throws RecognitionException {
		R_floatContext _localctx = new R_floatContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_r_float);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3913);
			((R_floatContext)_localctx).r = match(T__34);
			 ((R_floatContext)_localctx).r->setType(((R_floatContext)_localctx).r, T_RESERVED); ((R_floatContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_forContext extends ParserRuleContext {
		public Token r;
		public R_forContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_for; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_for(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_for(this);
		}
	}

	public final R_forContext r_for() throws RecognitionException {
		R_forContext _localctx = new R_forContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_r_for);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3916);
			((R_forContext)_localctx).r = match(T__35);
			 ((R_forContext)_localctx).r->setType(((R_forContext)_localctx).r, T_RESERVED); ((R_forContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_fromContext extends ParserRuleContext {
		public Token r;
		public R_fromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_from; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_from(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_from(this);
		}
	}

	public final R_fromContext r_from() throws RecognitionException {
		R_fromContext _localctx = new R_fromContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_r_from);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3919);
			((R_fromContext)_localctx).r = match(T__36);
			 ((R_fromContext)_localctx).r->setType(((R_fromContext)_localctx).r, T_RESERVED); ((R_fromContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_grantContext extends ParserRuleContext {
		public Token r;
		public R_grantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_grant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_grant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_grant(this);
		}
	}

	public final R_grantContext r_grant() throws RecognitionException {
		R_grantContext _localctx = new R_grantContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_r_grant);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3922);
			((R_grantContext)_localctx).r = match(T__37);
			 ((R_grantContext)_localctx).r->setType(((R_grantContext)_localctx).r, T_RESERVED); ((R_grantContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_groupContext extends ParserRuleContext {
		public Token r;
		public R_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_group(this);
		}
	}

	public final R_groupContext r_group() throws RecognitionException {
		R_groupContext _localctx = new R_groupContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_r_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3925);
			((R_groupContext)_localctx).r = match(T__38);
			 ((R_groupContext)_localctx).r->setType(((R_groupContext)_localctx).r, T_RESERVED); ((R_groupContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_havingContext extends ParserRuleContext {
		public Token r;
		public R_havingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_having; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_having(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_having(this);
		}
	}

	public final R_havingContext r_having() throws RecognitionException {
		R_havingContext _localctx = new R_havingContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_r_having);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3928);
			((R_havingContext)_localctx).r = match(T__39);
			 ((R_havingContext)_localctx).r->setType(((R_havingContext)_localctx).r, T_RESERVED); ((R_havingContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_identifiedContext extends ParserRuleContext {
		public Token r;
		public R_identifiedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_identified; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_identified(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_identified(this);
		}
	}

	public final R_identifiedContext r_identified() throws RecognitionException {
		R_identifiedContext _localctx = new R_identifiedContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_r_identified);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3931);
			((R_identifiedContext)_localctx).r = match(T__40);
			 ((R_identifiedContext)_localctx).r->setType(((R_identifiedContext)_localctx).r, T_RESERVED); ((R_identifiedContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_immediateContext extends ParserRuleContext {
		public Token r;
		public R_immediateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_immediate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_immediate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_immediate(this);
		}
	}

	public final R_immediateContext r_immediate() throws RecognitionException {
		R_immediateContext _localctx = new R_immediateContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_r_immediate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3934);
			((R_immediateContext)_localctx).r = match(T__41);
			 ((R_immediateContext)_localctx).r->setType(((R_immediateContext)_localctx).r, T_RESERVED); ((R_immediateContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_inContext extends ParserRuleContext {
		public Token r;
		public R_inContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_in; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_in(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_in(this);
		}
	}

	public final R_inContext r_in() throws RecognitionException {
		R_inContext _localctx = new R_inContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_r_in);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3937);
			((R_inContext)_localctx).r = match(T__42);
			 ((R_inContext)_localctx).r->setType(((R_inContext)_localctx).r, T_RESERVED); ((R_inContext)_localctx).r->user1 = T_OPERATOR_BINARY;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_incrementContext extends ParserRuleContext {
		public Token r;
		public R_incrementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_increment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_increment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_increment(this);
		}
	}

	public final R_incrementContext r_increment() throws RecognitionException {
		R_incrementContext _localctx = new R_incrementContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_r_increment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3940);
			((R_incrementContext)_localctx).r = match(T__43);
			 ((R_incrementContext)_localctx).r->setType(((R_incrementContext)_localctx).r, T_RESERVED); ((R_incrementContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_indexContext extends ParserRuleContext {
		public Token r;
		public R_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_index(this);
		}
	}

	public final R_indexContext r_index() throws RecognitionException {
		R_indexContext _localctx = new R_indexContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_r_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3943);
			((R_indexContext)_localctx).r = match(T__44);
			 ((R_indexContext)_localctx).r->setType(((R_indexContext)_localctx).r, T_RESERVED); ((R_indexContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_initialContext extends ParserRuleContext {
		public Token r;
		public R_initialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_initial; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_initial(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_initial(this);
		}
	}

	public final R_initialContext r_initial() throws RecognitionException {
		R_initialContext _localctx = new R_initialContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_r_initial);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3946);
			((R_initialContext)_localctx).r = match(T__45);
			 ((R_initialContext)_localctx).r->setType(((R_initialContext)_localctx).r, T_RESERVED); ((R_initialContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_insertContext extends ParserRuleContext {
		public Token r;
		public R_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_insert(this);
		}
	}

	public final R_insertContext r_insert() throws RecognitionException {
		R_insertContext _localctx = new R_insertContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_r_insert);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3949);
			((R_insertContext)_localctx).r = match(T__46);
			 ((R_insertContext)_localctx).r->setType(((R_insertContext)_localctx).r, T_RESERVED); ((R_insertContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_integerContext extends ParserRuleContext {
		public Token r;
		public R_integerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_integer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_integer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_integer(this);
		}
	}

	public final R_integerContext r_integer() throws RecognitionException {
		R_integerContext _localctx = new R_integerContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_r_integer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3952);
			((R_integerContext)_localctx).r = match(T__47);
			 ((R_integerContext)_localctx).r->setType(((R_integerContext)_localctx).r, T_RESERVED); ((R_integerContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_intersectContext extends ParserRuleContext {
		public Token r;
		public R_intersectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_intersect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_intersect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_intersect(this);
		}
	}

	public final R_intersectContext r_intersect() throws RecognitionException {
		R_intersectContext _localctx = new R_intersectContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_r_intersect);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3955);
			((R_intersectContext)_localctx).r = match(T__48);
			 ((R_intersectContext)_localctx).r->setType(((R_intersectContext)_localctx).r, T_RESERVED); ((R_intersectContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_intoContext extends ParserRuleContext {
		public Token r;
		public R_intoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_into; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_into(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_into(this);
		}
	}

	public final R_intoContext r_into() throws RecognitionException {
		R_intoContext _localctx = new R_intoContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_r_into);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3958);
			((R_intoContext)_localctx).r = match(T__49);
			 ((R_intoContext)_localctx).r->setType(((R_intoContext)_localctx).r, T_RESERVED); ((R_intoContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_isContext extends ParserRuleContext {
		public Token r;
		public R_isContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_is; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_is(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_is(this);
		}
	}

	public final R_isContext r_is() throws RecognitionException {
		R_isContext _localctx = new R_isContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_r_is);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3961);
			((R_isContext)_localctx).r = match(T__50);
			 ((R_isContext)_localctx).r->setType(((R_isContext)_localctx).r, T_RESERVED); ((R_isContext)_localctx).r->user1 = T_OPERATOR_UNARY;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_levelContext extends ParserRuleContext {
		public Token r;
		public R_levelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_level; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_level(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_level(this);
		}
	}

	public final R_levelContext r_level() throws RecognitionException {
		R_levelContext _localctx = new R_levelContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_r_level);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3964);
			((R_levelContext)_localctx).r = match(T__51);
			 ((R_levelContext)_localctx).r->setType(((R_levelContext)_localctx).r, T_RESERVED); ((R_levelContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_likeContext extends ParserRuleContext {
		public Token r;
		public R_likeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_like; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_like(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_like(this);
		}
	}

	public final R_likeContext r_like() throws RecognitionException {
		R_likeContext _localctx = new R_likeContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_r_like);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3967);
			((R_likeContext)_localctx).r = match(T__52);
			 ((R_likeContext)_localctx).r->setType(((R_likeContext)_localctx).r, T_RESERVED); ((R_likeContext)_localctx).r->user1 = T_OPERATOR_BINARY;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_lockContext extends ParserRuleContext {
		public Token r;
		public R_lockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_lock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_lock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_lock(this);
		}
	}

	public final R_lockContext r_lock() throws RecognitionException {
		R_lockContext _localctx = new R_lockContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_r_lock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3970);
			((R_lockContext)_localctx).r = match(T__53);
			 ((R_lockContext)_localctx).r->setType(((R_lockContext)_localctx).r, T_RESERVED); ((R_lockContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_longContext extends ParserRuleContext {
		public Token r;
		public R_longContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_long; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_long(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_long(this);
		}
	}

	public final R_longContext r_long() throws RecognitionException {
		R_longContext _localctx = new R_longContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_r_long);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3973);
			((R_longContext)_localctx).r = match(T__54);
			 ((R_longContext)_localctx).r->setType(((R_longContext)_localctx).r, T_RESERVED); ((R_longContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_maxextentsContext extends ParserRuleContext {
		public Token r;
		public R_maxextentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_maxextents; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_maxextents(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_maxextents(this);
		}
	}

	public final R_maxextentsContext r_maxextents() throws RecognitionException {
		R_maxextentsContext _localctx = new R_maxextentsContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_r_maxextents);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3976);
			((R_maxextentsContext)_localctx).r = match(T__55);
			 ((R_maxextentsContext)_localctx).r->setType(((R_maxextentsContext)_localctx).r, T_RESERVED); ((R_maxextentsContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_minusContext extends ParserRuleContext {
		public Token r;
		public R_minusContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_minus; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_minus(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_minus(this);
		}
	}

	public final R_minusContext r_minus() throws RecognitionException {
		R_minusContext _localctx = new R_minusContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_r_minus);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3979);
			((R_minusContext)_localctx).r = match(T__56);
			 ((R_minusContext)_localctx).r->setType(((R_minusContext)_localctx).r, T_RESERVED); ((R_minusContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_modeContext extends ParserRuleContext {
		public Token r;
		public R_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_mode(this);
		}
	}

	public final R_modeContext r_mode() throws RecognitionException {
		R_modeContext _localctx = new R_modeContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_r_mode);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3982);
			((R_modeContext)_localctx).r = match(T__57);
			 ((R_modeContext)_localctx).r->setType(((R_modeContext)_localctx).r, T_RESERVED); ((R_modeContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_modifyContext extends ParserRuleContext {
		public Token r;
		public R_modifyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_modify; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_modify(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_modify(this);
		}
	}

	public final R_modifyContext r_modify() throws RecognitionException {
		R_modifyContext _localctx = new R_modifyContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_r_modify);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3985);
			((R_modifyContext)_localctx).r = match(T__58);
			 ((R_modifyContext)_localctx).r->setType(((R_modifyContext)_localctx).r, T_RESERVED); ((R_modifyContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_noauditContext extends ParserRuleContext {
		public Token r;
		public R_noauditContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_noaudit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_noaudit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_noaudit(this);
		}
	}

	public final R_noauditContext r_noaudit() throws RecognitionException {
		R_noauditContext _localctx = new R_noauditContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_r_noaudit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3988);
			((R_noauditContext)_localctx).r = match(T__59);
			 ((R_noauditContext)_localctx).r->setType(((R_noauditContext)_localctx).r, T_RESERVED); ((R_noauditContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_nocompressContext extends ParserRuleContext {
		public Token r;
		public R_nocompressContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_nocompress; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_nocompress(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_nocompress(this);
		}
	}

	public final R_nocompressContext r_nocompress() throws RecognitionException {
		R_nocompressContext _localctx = new R_nocompressContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_r_nocompress);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3991);
			((R_nocompressContext)_localctx).r = match(T__60);
			 ((R_nocompressContext)_localctx).r->setType(((R_nocompressContext)_localctx).r, T_RESERVED); ((R_nocompressContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_notContext extends ParserRuleContext {
		public Token r;
		public R_notContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_not; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_not(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_not(this);
		}
	}

	public final R_notContext r_not() throws RecognitionException {
		R_notContext _localctx = new R_notContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_r_not);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3994);
			((R_notContext)_localctx).r = match(T__61);
			 ((R_notContext)_localctx).r->setType(((R_notContext)_localctx).r, T_RESERVED); ((R_notContext)_localctx).r->user1 = T_OPERATOR_PART;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_notfoundContext extends ParserRuleContext {
		public Token r;
		public R_notfoundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_notfound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_notfound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_notfound(this);
		}
	}

	public final R_notfoundContext r_notfound() throws RecognitionException {
		R_notfoundContext _localctx = new R_notfoundContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_r_notfound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3997);
			((R_notfoundContext)_localctx).r = match(T__62);
			 ((R_notfoundContext)_localctx).r->setType(((R_notfoundContext)_localctx).r, T_RESERVED); ((R_notfoundContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_nowaitContext extends ParserRuleContext {
		public Token r;
		public R_nowaitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_nowait; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_nowait(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_nowait(this);
		}
	}

	public final R_nowaitContext r_nowait() throws RecognitionException {
		R_nowaitContext _localctx = new R_nowaitContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_r_nowait);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4000);
			((R_nowaitContext)_localctx).r = match(T__63);
			 ((R_nowaitContext)_localctx).r->setType(((R_nowaitContext)_localctx).r, T_RESERVED); ((R_nowaitContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_nullContext extends ParserRuleContext {
		public Token r;
		public R_nullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_null; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_null(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_null(this);
		}
	}

	public final R_nullContext r_null() throws RecognitionException {
		R_nullContext _localctx = new R_nullContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_r_null);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4003);
			((R_nullContext)_localctx).r = match(T__64);
			 ((R_nullContext)_localctx).r->setType(((R_nullContext)_localctx).r, T_RESERVED); ((R_nullContext)_localctx).r->user1 = T_OPERATOR_PART;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_numberContext extends ParserRuleContext {
		public Token r;
		public R_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_number(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_number(this);
		}
	}

	public final R_numberContext r_number() throws RecognitionException {
		R_numberContext _localctx = new R_numberContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_r_number);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4006);
			((R_numberContext)_localctx).r = match(T__65);
			 ((R_numberContext)_localctx).r->setType(((R_numberContext)_localctx).r, T_RESERVED); ((R_numberContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_ofContext extends ParserRuleContext {
		public Token r;
		public R_ofContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_of; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_of(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_of(this);
		}
	}

	public final R_ofContext r_of() throws RecognitionException {
		R_ofContext _localctx = new R_ofContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_r_of);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4009);
			((R_ofContext)_localctx).r = match(T__66);
			 ((R_ofContext)_localctx).r->setType(((R_ofContext)_localctx).r, T_RESERVED); ((R_ofContext)_localctx).r->user1 = T_OPERATOR_PART;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_offlineContext extends ParserRuleContext {
		public Token r;
		public R_offlineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_offline; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_offline(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_offline(this);
		}
	}

	public final R_offlineContext r_offline() throws RecognitionException {
		R_offlineContext _localctx = new R_offlineContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_r_offline);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4012);
			((R_offlineContext)_localctx).r = match(T__67);
			 ((R_offlineContext)_localctx).r->setType(((R_offlineContext)_localctx).r, T_RESERVED); ((R_offlineContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_onContext extends ParserRuleContext {
		public Token r;
		public R_onContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_on; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_on(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_on(this);
		}
	}

	public final R_onContext r_on() throws RecognitionException {
		R_onContext _localctx = new R_onContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_r_on);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4015);
			((R_onContext)_localctx).r = match(T__68);
			 ((R_onContext)_localctx).r->setType(((R_onContext)_localctx).r, T_RESERVED); ((R_onContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_onlineContext extends ParserRuleContext {
		public Token r;
		public R_onlineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_online; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_online(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_online(this);
		}
	}

	public final R_onlineContext r_online() throws RecognitionException {
		R_onlineContext _localctx = new R_onlineContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_r_online);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4018);
			((R_onlineContext)_localctx).r = match(T__69);
			 ((R_onlineContext)_localctx).r->setType(((R_onlineContext)_localctx).r, T_RESERVED); ((R_onlineContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_optionContext extends ParserRuleContext {
		public Token r;
		public R_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_option(this);
		}
	}

	public final R_optionContext r_option() throws RecognitionException {
		R_optionContext _localctx = new R_optionContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_r_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4021);
			((R_optionContext)_localctx).r = match(T__70);
			 ((R_optionContext)_localctx).r->setType(((R_optionContext)_localctx).r, T_RESERVED); ((R_optionContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_orContext extends ParserRuleContext {
		public Token r;
		public R_orContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_or; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_or(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_or(this);
		}
	}

	public final R_orContext r_or() throws RecognitionException {
		R_orContext _localctx = new R_orContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_r_or);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4024);
			((R_orContext)_localctx).r = match(T__71);
			 ((R_orContext)_localctx).r->setType(((R_orContext)_localctx).r, T_RESERVED); ((R_orContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_orderContext extends ParserRuleContext {
		public Token r;
		public R_orderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_order; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_order(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_order(this);
		}
	}

	public final R_orderContext r_order() throws RecognitionException {
		R_orderContext _localctx = new R_orderContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_r_order);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4027);
			((R_orderContext)_localctx).r = match(T__72);
			 ((R_orderContext)_localctx).r->setType(((R_orderContext)_localctx).r, T_RESERVED); ((R_orderContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_pctfreeContext extends ParserRuleContext {
		public Token r;
		public R_pctfreeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_pctfree; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_pctfree(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_pctfree(this);
		}
	}

	public final R_pctfreeContext r_pctfree() throws RecognitionException {
		R_pctfreeContext _localctx = new R_pctfreeContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_r_pctfree);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4030);
			((R_pctfreeContext)_localctx).r = match(T__73);
			 ((R_pctfreeContext)_localctx).r->setType(((R_pctfreeContext)_localctx).r, T_RESERVED); ((R_pctfreeContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_priorContext extends ParserRuleContext {
		public Token r;
		public R_priorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_prior; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_prior(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_prior(this);
		}
	}

	public final R_priorContext r_prior() throws RecognitionException {
		R_priorContext _localctx = new R_priorContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_r_prior);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4033);
			((R_priorContext)_localctx).r = match(T__74);
			 ((R_priorContext)_localctx).r->setType(((R_priorContext)_localctx).r, T_RESERVED); ((R_priorContext)_localctx).r->user1 = T_OPERATOR_PART;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_privilegesContext extends ParserRuleContext {
		public Token r;
		public R_privilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_privileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_privileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_privileges(this);
		}
	}

	public final R_privilegesContext r_privileges() throws RecognitionException {
		R_privilegesContext _localctx = new R_privilegesContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_r_privileges);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4036);
			((R_privilegesContext)_localctx).r = match(T__75);
			 ((R_privilegesContext)_localctx).r->setType(((R_privilegesContext)_localctx).r, T_RESERVED); ((R_privilegesContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_publicContext extends ParserRuleContext {
		public Token r;
		public R_publicContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_public; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_public(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_public(this);
		}
	}

	public final R_publicContext r_public() throws RecognitionException {
		R_publicContext _localctx = new R_publicContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_r_public);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4039);
			((R_publicContext)_localctx).r = match(T__76);
			 ((R_publicContext)_localctx).r->setType(((R_publicContext)_localctx).r, T_RESERVED); ((R_publicContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_rawContext extends ParserRuleContext {
		public Token r;
		public R_rawContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_raw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_raw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_raw(this);
		}
	}

	public final R_rawContext r_raw() throws RecognitionException {
		R_rawContext _localctx = new R_rawContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_r_raw);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4042);
			((R_rawContext)_localctx).r = match(T__77);
			 ((R_rawContext)_localctx).r->setType(((R_rawContext)_localctx).r, T_RESERVED); ((R_rawContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_renameContext extends ParserRuleContext {
		public Token r;
		public R_renameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_rename; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_rename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_rename(this);
		}
	}

	public final R_renameContext r_rename() throws RecognitionException {
		R_renameContext _localctx = new R_renameContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_r_rename);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4045);
			((R_renameContext)_localctx).r = match(T__78);
			 ((R_renameContext)_localctx).r->setType(((R_renameContext)_localctx).r, T_RESERVED); ((R_renameContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_resourceContext extends ParserRuleContext {
		public Token r;
		public R_resourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_resource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_resource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_resource(this);
		}
	}

	public final R_resourceContext r_resource() throws RecognitionException {
		R_resourceContext _localctx = new R_resourceContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_r_resource);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4048);
			((R_resourceContext)_localctx).r = match(T__79);
			 ((R_resourceContext)_localctx).r->setType(((R_resourceContext)_localctx).r, T_RESERVED); ((R_resourceContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_revokeContext extends ParserRuleContext {
		public Token r;
		public R_revokeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_revoke; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_revoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_revoke(this);
		}
	}

	public final R_revokeContext r_revoke() throws RecognitionException {
		R_revokeContext _localctx = new R_revokeContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_r_revoke);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4051);
			((R_revokeContext)_localctx).r = match(T__80);
			 ((R_revokeContext)_localctx).r->setType(((R_revokeContext)_localctx).r, T_RESERVED); ((R_revokeContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_rowContext extends ParserRuleContext {
		public Token r;
		public R_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_row(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_row(this);
		}
	}

	public final R_rowContext r_row() throws RecognitionException {
		R_rowContext _localctx = new R_rowContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_r_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4054);
			((R_rowContext)_localctx).r = match(T__81);
			 ((R_rowContext)_localctx).r->setType(((R_rowContext)_localctx).r, T_RESERVED); ((R_rowContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_rowidContext extends ParserRuleContext {
		public Token r;
		public R_rowidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_rowid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_rowid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_rowid(this);
		}
	}

	public final R_rowidContext r_rowid() throws RecognitionException {
		R_rowidContext _localctx = new R_rowidContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_r_rowid);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4057);
			((R_rowidContext)_localctx).r = match(T__82);
			 ((R_rowidContext)_localctx).r->setType(((R_rowidContext)_localctx).r, T_RESERVED); ((R_rowidContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_rowlabelContext extends ParserRuleContext {
		public Token r;
		public R_rowlabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_rowlabel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_rowlabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_rowlabel(this);
		}
	}

	public final R_rowlabelContext r_rowlabel() throws RecognitionException {
		R_rowlabelContext _localctx = new R_rowlabelContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_r_rowlabel);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4060);
			((R_rowlabelContext)_localctx).r = match(T__83);
			 ((R_rowlabelContext)_localctx).r->setType(((R_rowlabelContext)_localctx).r, T_RESERVED); ((R_rowlabelContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_rownumContext extends ParserRuleContext {
		public Token r;
		public R_rownumContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_rownum; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_rownum(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_rownum(this);
		}
	}

	public final R_rownumContext r_rownum() throws RecognitionException {
		R_rownumContext _localctx = new R_rownumContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_r_rownum);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4063);
			((R_rownumContext)_localctx).r = match(T__84);
			 ((R_rownumContext)_localctx).r->setType(((R_rownumContext)_localctx).r, T_RESERVED); ((R_rownumContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_rowsContext extends ParserRuleContext {
		public Token r;
		public R_rowsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_rows; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_rows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_rows(this);
		}
	}

	public final R_rowsContext r_rows() throws RecognitionException {
		R_rowsContext _localctx = new R_rowsContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_r_rows);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4066);
			((R_rowsContext)_localctx).r = match(T__85);
			 ((R_rowsContext)_localctx).r->setType(((R_rowsContext)_localctx).r, T_RESERVED); ((R_rowsContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_selectContext extends ParserRuleContext {
		public Token r;
		public R_selectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_select; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_select(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_select(this);
		}
	}

	public final R_selectContext r_select() throws RecognitionException {
		R_selectContext _localctx = new R_selectContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_r_select);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4069);
			((R_selectContext)_localctx).r = match(T__86);
			 ((R_selectContext)_localctx).r->setType(((R_selectContext)_localctx).r, T_RESERVED); ((R_selectContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_sessionContext extends ParserRuleContext {
		public Token r;
		public R_sessionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_session; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_session(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_session(this);
		}
	}

	public final R_sessionContext r_session() throws RecognitionException {
		R_sessionContext _localctx = new R_sessionContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_r_session);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4072);
			((R_sessionContext)_localctx).r = match(T__87);
			 ((R_sessionContext)_localctx).r->setType(((R_sessionContext)_localctx).r, T_RESERVED); ((R_sessionContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_setContext extends ParserRuleContext {
		public Token r;
		public R_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_set; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_set(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_set(this);
		}
	}

	public final R_setContext r_set() throws RecognitionException {
		R_setContext _localctx = new R_setContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_r_set);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4075);
			((R_setContext)_localctx).r = match(T__88);
			 ((R_setContext)_localctx).r->setType(((R_setContext)_localctx).r, T_RESERVED); ((R_setContext)_localctx).r->user1 = T_OPERATOR_PART;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_shareContext extends ParserRuleContext {
		public Token r;
		public R_shareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_share; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_share(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_share(this);
		}
	}

	public final R_shareContext r_share() throws RecognitionException {
		R_shareContext _localctx = new R_shareContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_r_share);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4078);
			((R_shareContext)_localctx).r = match(T__89);
			 ((R_shareContext)_localctx).r->setType(((R_shareContext)_localctx).r, T_RESERVED); ((R_shareContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_sizeContext extends ParserRuleContext {
		public Token r;
		public R_sizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_size; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_size(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_size(this);
		}
	}

	public final R_sizeContext r_size() throws RecognitionException {
		R_sizeContext _localctx = new R_sizeContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_r_size);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4081);
			((R_sizeContext)_localctx).r = match(T__90);
			 ((R_sizeContext)_localctx).r->setType(((R_sizeContext)_localctx).r, T_RESERVED); ((R_sizeContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_smallintContext extends ParserRuleContext {
		public Token r;
		public R_smallintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_smallint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_smallint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_smallint(this);
		}
	}

	public final R_smallintContext r_smallint() throws RecognitionException {
		R_smallintContext _localctx = new R_smallintContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_r_smallint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4084);
			((R_smallintContext)_localctx).r = match(T__91);
			 ((R_smallintContext)_localctx).r->setType(((R_smallintContext)_localctx).r, T_RESERVED); ((R_smallintContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_sqlbufContext extends ParserRuleContext {
		public Token r;
		public R_sqlbufContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_sqlbuf; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_sqlbuf(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_sqlbuf(this);
		}
	}

	public final R_sqlbufContext r_sqlbuf() throws RecognitionException {
		R_sqlbufContext _localctx = new R_sqlbufContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_r_sqlbuf);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4087);
			((R_sqlbufContext)_localctx).r = match(T__92);
			 ((R_sqlbufContext)_localctx).r->setType(((R_sqlbufContext)_localctx).r, T_RESERVED); ((R_sqlbufContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_startContext extends ParserRuleContext {
		public Token r;
		public R_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_start(this);
		}
	}

	public final R_startContext r_start() throws RecognitionException {
		R_startContext _localctx = new R_startContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_r_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4090);
			((R_startContext)_localctx).r = match(T__93);
			 ((R_startContext)_localctx).r->setType(((R_startContext)_localctx).r, T_RESERVED); ((R_startContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_successfulContext extends ParserRuleContext {
		public Token r;
		public R_successfulContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_successful; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_successful(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_successful(this);
		}
	}

	public final R_successfulContext r_successful() throws RecognitionException {
		R_successfulContext _localctx = new R_successfulContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_r_successful);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4093);
			((R_successfulContext)_localctx).r = match(T__94);
			 ((R_successfulContext)_localctx).r->setType(((R_successfulContext)_localctx).r, T_RESERVED); ((R_successfulContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_synonymContext extends ParserRuleContext {
		public Token r;
		public R_synonymContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_synonym; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_synonym(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_synonym(this);
		}
	}

	public final R_synonymContext r_synonym() throws RecognitionException {
		R_synonymContext _localctx = new R_synonymContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_r_synonym);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4096);
			((R_synonymContext)_localctx).r = match(T__95);
			 ((R_synonymContext)_localctx).r->setType(((R_synonymContext)_localctx).r, T_RESERVED); ((R_synonymContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_sysdateContext extends ParserRuleContext {
		public Token r;
		public R_sysdateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_sysdate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_sysdate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_sysdate(this);
		}
	}

	public final R_sysdateContext r_sysdate() throws RecognitionException {
		R_sysdateContext _localctx = new R_sysdateContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_r_sysdate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4099);
			((R_sysdateContext)_localctx).r = match(T__96);
			 ((R_sysdateContext)_localctx).r->setType(((R_sysdateContext)_localctx).r, T_RESERVED); ((R_sysdateContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_tableContext extends ParserRuleContext {
		public Token r;
		public R_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_table(this);
		}
	}

	public final R_tableContext r_table() throws RecognitionException {
		R_tableContext _localctx = new R_tableContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_r_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4102);
			((R_tableContext)_localctx).r = match(T__97);
			 ((R_tableContext)_localctx).r->setType(((R_tableContext)_localctx).r, T_RESERVED); ((R_tableContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_thenContext extends ParserRuleContext {
		public Token r;
		public R_thenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_then; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_then(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_then(this);
		}
	}

	public final R_thenContext r_then() throws RecognitionException {
		R_thenContext _localctx = new R_thenContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_r_then);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4105);
			((R_thenContext)_localctx).r = match(T__98);
			 ((R_thenContext)_localctx).r->setType(((R_thenContext)_localctx).r, T_RESERVED); ((R_thenContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_toContext extends ParserRuleContext {
		public Token r;
		public R_toContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_to; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_to(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_to(this);
		}
	}

	public final R_toContext r_to() throws RecognitionException {
		R_toContext _localctx = new R_toContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_r_to);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4108);
			((R_toContext)_localctx).r = match(T__99);
			 ((R_toContext)_localctx).r->setType(((R_toContext)_localctx).r, T_RESERVED); ((R_toContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_triggerContext extends ParserRuleContext {
		public Token r;
		public R_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_trigger(this);
		}
	}

	public final R_triggerContext r_trigger() throws RecognitionException {
		R_triggerContext _localctx = new R_triggerContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_r_trigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4111);
			((R_triggerContext)_localctx).r = match(T__100);
			 ((R_triggerContext)_localctx).r->setType(((R_triggerContext)_localctx).r, T_RESERVED); ((R_triggerContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_trueContext extends ParserRuleContext {
		public Token r;
		public R_trueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_true; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_true(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_true(this);
		}
	}

	public final R_trueContext r_true() throws RecognitionException {
		R_trueContext _localctx = new R_trueContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_r_true);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4114);
			((R_trueContext)_localctx).r = match(T__101);
			 ((R_trueContext)_localctx).r->setType(((R_trueContext)_localctx).r, T_RESERVED); ((R_trueContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_uidContext extends ParserRuleContext {
		public Token r;
		public R_uidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_uid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_uid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_uid(this);
		}
	}

	public final R_uidContext r_uid() throws RecognitionException {
		R_uidContext _localctx = new R_uidContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_r_uid);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4117);
			((R_uidContext)_localctx).r = match(T__102);
			 ((R_uidContext)_localctx).r->setType(((R_uidContext)_localctx).r, T_RESERVED); ((R_uidContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_unionContext extends ParserRuleContext {
		public Token r;
		public R_unionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_union; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_union(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_union(this);
		}
	}

	public final R_unionContext r_union() throws RecognitionException {
		R_unionContext _localctx = new R_unionContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_r_union);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4120);
			((R_unionContext)_localctx).r = match(T__103);
			 ((R_unionContext)_localctx).r->setType(((R_unionContext)_localctx).r, T_RESERVED); ((R_unionContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_uniqueContext extends ParserRuleContext {
		public Token r;
		public R_uniqueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_unique; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_unique(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_unique(this);
		}
	}

	public final R_uniqueContext r_unique() throws RecognitionException {
		R_uniqueContext _localctx = new R_uniqueContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_r_unique);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4123);
			((R_uniqueContext)_localctx).r = match(T__104);
			 ((R_uniqueContext)_localctx).r->setType(((R_uniqueContext)_localctx).r, T_RESERVED); ((R_uniqueContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_updateContext extends ParserRuleContext {
		public Token r;
		public R_updateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_update; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_update(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_update(this);
		}
	}

	public final R_updateContext r_update() throws RecognitionException {
		R_updateContext _localctx = new R_updateContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_r_update);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4126);
			((R_updateContext)_localctx).r = match(T__105);
			 ((R_updateContext)_localctx).r->setType(((R_updateContext)_localctx).r, T_RESERVED); ((R_updateContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_userContext extends ParserRuleContext {
		public Token r;
		public R_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_user(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_user(this);
		}
	}

	public final R_userContext r_user() throws RecognitionException {
		R_userContext _localctx = new R_userContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_r_user);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4129);
			((R_userContext)_localctx).r = match(T__106);
			 ((R_userContext)_localctx).r->setType(((R_userContext)_localctx).r, T_RESERVED); ((R_userContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_validateContext extends ParserRuleContext {
		public Token r;
		public R_validateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_validate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_validate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_validate(this);
		}
	}

	public final R_validateContext r_validate() throws RecognitionException {
		R_validateContext _localctx = new R_validateContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_r_validate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4132);
			((R_validateContext)_localctx).r = match(T__107);
			 ((R_validateContext)_localctx).r->setType(((R_validateContext)_localctx).r, T_RESERVED); ((R_validateContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_valuesContext extends ParserRuleContext {
		public Token r;
		public R_valuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_values; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_values(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_values(this);
		}
	}

	public final R_valuesContext r_values() throws RecognitionException {
		R_valuesContext _localctx = new R_valuesContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_r_values);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4135);
			((R_valuesContext)_localctx).r = match(T__108);
			 ((R_valuesContext)_localctx).r->setType(((R_valuesContext)_localctx).r, T_RESERVED); ((R_valuesContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_varcharContext extends ParserRuleContext {
		public Token r;
		public R_varcharContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_varchar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_varchar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_varchar(this);
		}
	}

	public final R_varcharContext r_varchar() throws RecognitionException {
		R_varcharContext _localctx = new R_varcharContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_r_varchar);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4138);
			((R_varcharContext)_localctx).r = match(T__109);
			 ((R_varcharContext)_localctx).r->setType(((R_varcharContext)_localctx).r, T_RESERVED); ((R_varcharContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_varchar2Context extends ParserRuleContext {
		public Token r;
		public R_varchar2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_varchar2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_varchar2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_varchar2(this);
		}
	}

	public final R_varchar2Context r_varchar2() throws RecognitionException {
		R_varchar2Context _localctx = new R_varchar2Context(_ctx, getState());
		enterRule(_localctx, 608, RULE_r_varchar2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4141);
			((R_varchar2Context)_localctx).r = match(T__110);
			 ((R_varchar2Context)_localctx).r->setType(((R_varchar2Context)_localctx).r, T_RESERVED); ((R_varchar2Context)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_viewContext extends ParserRuleContext {
		public Token r;
		public R_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_view(this);
		}
	}

	public final R_viewContext r_view() throws RecognitionException {
		R_viewContext _localctx = new R_viewContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_r_view);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4144);
			((R_viewContext)_localctx).r = match(T__111);
			 ((R_viewContext)_localctx).r->setType(((R_viewContext)_localctx).r, T_RESERVED); ((R_viewContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_wheneverContext extends ParserRuleContext {
		public Token r;
		public R_wheneverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_whenever; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_whenever(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_whenever(this);
		}
	}

	public final R_wheneverContext r_whenever() throws RecognitionException {
		R_wheneverContext _localctx = new R_wheneverContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_r_whenever);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4147);
			((R_wheneverContext)_localctx).r = match(T__112);
			 ((R_wheneverContext)_localctx).r->setType(((R_wheneverContext)_localctx).r, T_RESERVED); ((R_wheneverContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_whereContext extends ParserRuleContext {
		public Token r;
		public R_whereContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_where; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_where(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_where(this);
		}
	}

	public final R_whereContext r_where() throws RecognitionException {
		R_whereContext _localctx = new R_whereContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_r_where);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4150);
			((R_whereContext)_localctx).r = match(T__113);
			 ((R_whereContext)_localctx).r->setType(((R_whereContext)_localctx).r, T_RESERVED); ((R_whereContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_withContext extends ParserRuleContext {
		public Token r;
		public R_withContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_with; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterR_with(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitR_with(this);
		}
	}

	public final R_withContext r_with() throws RecognitionException {
		R_withContext _localctx = new R_withContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_r_with);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4153);
			((R_withContext)_localctx).r = match(T__114);
			 ((R_withContext)_localctx).r->setType(((R_withContext)_localctx).r, T_RESERVED); ((R_withContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_aContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_aContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_a; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_a(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_a(this);
		}
	}

	public final K_aContext k_a() throws RecognitionException {
		K_aContext _localctx = new K_aContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_k_a);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4156);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "A")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"A\")) ");
			setState(4157);
			((K_aContext)_localctx).r = match(ID);
			 ((K_aContext)_localctx).r->setType(((K_aContext)_localctx).r, T_RESERVED); ((K_aContext)_localctx).r->user1 = T_OPERATOR_PART;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_atContext extends ParserRuleContext {
		public Token r;
		public K_atContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_at; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_at(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_at(this);
		}
	}

	public final K_atContext k_at() throws RecognitionException {
		K_atContext _localctx = new K_atContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_k_at);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4160);
			((K_atContext)_localctx).r = match(T__115);
			 ((K_atContext)_localctx).r->setType(((K_atContext)_localctx).r, T_RESERVED); ((K_atContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_automaticContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_automaticContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_automatic; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_automatic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_automatic(this);
		}
	}

	public final K_automaticContext k_automatic() throws RecognitionException {
		K_automaticContext _localctx = new K_automaticContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_k_automatic);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4163);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "AUTOMATIC")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"AUTOMATIC\")) ");
			setState(4164);
			((K_automaticContext)_localctx).r = match(ID);
			 ((K_automaticContext)_localctx).r->setType(((K_automaticContext)_localctx).r, T_RESERVED); ((K_automaticContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_bfileContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_bfileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_bfile; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_bfile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_bfile(this);
		}
	}

	public final K_bfileContext k_bfile() throws RecognitionException {
		K_bfileContext _localctx = new K_bfileContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_k_bfile);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4167);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "BFILE")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"BFILE\")) ");
			setState(4168);
			((K_bfileContext)_localctx).r = match(ID);
			 ((K_bfileContext)_localctx).r->setType(((K_bfileContext)_localctx).r, T_RESERVED); ((K_bfileContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_binary_doubleContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_binary_doubleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_binary_double; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_binary_double(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_binary_double(this);
		}
	}

	public final K_binary_doubleContext k_binary_double() throws RecognitionException {
		K_binary_doubleContext _localctx = new K_binary_doubleContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_k_binary_double);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4171);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "BINARY_DOUBLE")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"BINARY_DOUBLE\")) ");
			setState(4172);
			((K_binary_doubleContext)_localctx).r = match(ID);
			 ((K_binary_doubleContext)_localctx).r->setType(((K_binary_doubleContext)_localctx).r, T_RESERVED); ((K_binary_doubleContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_binary_floatContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_binary_floatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_binary_float; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_binary_float(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_binary_float(this);
		}
	}

	public final K_binary_floatContext k_binary_float() throws RecognitionException {
		K_binary_floatContext _localctx = new K_binary_floatContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_k_binary_float);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4175);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "BINARY_FLOAT")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"BINARY_FLOAT\")) ");
			setState(4176);
			((K_binary_floatContext)_localctx).r = match(ID);
			 ((K_binary_floatContext)_localctx).r->setType(((K_binary_floatContext)_localctx).r, T_RESERVED); ((K_binary_floatContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_binary_integerContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_binary_integerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_binary_integer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_binary_integer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_binary_integer(this);
		}
	}

	public final K_binary_integerContext k_binary_integer() throws RecognitionException {
		K_binary_integerContext _localctx = new K_binary_integerContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_k_binary_integer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4179);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "BINARY_INTEGER")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"BINARY_INTEGER\")) ");
			setState(4180);
			((K_binary_integerContext)_localctx).r = match(ID);
			 ((K_binary_integerContext)_localctx).r->setType(((K_binary_integerContext)_localctx).r, T_RESERVED); ((K_binary_integerContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_blobContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_blobContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_blob; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_blob(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_blob(this);
		}
	}

	public final K_blobContext k_blob() throws RecognitionException {
		K_blobContext _localctx = new K_blobContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_k_blob);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4183);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "BLOB")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"BLOB\")) ");
			setState(4184);
			((K_blobContext)_localctx).r = match(ID);
			 ((K_blobContext)_localctx).r->setType(((K_blobContext)_localctx).r, T_RESERVED); ((K_blobContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_blockContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_block(this);
		}
	}

	public final K_blockContext k_block() throws RecognitionException {
		K_blockContext _localctx = new K_blockContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_k_block);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4187);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "BLOCK")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"BLOCK\")) ");
			setState(4188);
			((K_blockContext)_localctx).r = match(ID);
			 ((K_blockContext)_localctx).r->setType(((K_blockContext)_localctx).r, T_RESERVED); ((K_blockContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_booleanContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_booleanContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_boolean; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_boolean(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_boolean(this);
		}
	}

	public final K_booleanContext k_boolean() throws RecognitionException {
		K_booleanContext _localctx = new K_booleanContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_k_boolean);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4191);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "BOOLEAN")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"BOOLEAN\")) ");
			setState(4192);
			((K_booleanContext)_localctx).r = match(ID);
			 ((K_booleanContext)_localctx).r->setType(((K_booleanContext)_localctx).r, T_RESERVED); ((K_booleanContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_bothContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_bothContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_both; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_both(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_both(this);
		}
	}

	public final K_bothContext k_both() throws RecognitionException {
		K_bothContext _localctx = new K_bothContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_k_both);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4195);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "BOTH")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"BOTH\")) ");
			setState(4196);
			((K_bothContext)_localctx).r = match(ID);
			 ((K_bothContext)_localctx).r->setType(((K_bothContext)_localctx).r, T_RESERVED); ((K_bothContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_breadthContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_breadthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_breadth; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_breadth(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_breadth(this);
		}
	}

	public final K_breadthContext k_breadth() throws RecognitionException {
		K_breadthContext _localctx = new K_breadthContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_k_breadth);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4199);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "BREADTH")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"BREADTH\")) ");
			setState(4200);
			((K_breadthContext)_localctx).r = match(ID);
			 ((K_breadthContext)_localctx).r->setType(((K_breadthContext)_localctx).r, T_RESERVED); ((K_breadthContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_byteContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_byteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_byte; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_byte(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_byte(this);
		}
	}

	public final K_byteContext k_byte() throws RecognitionException {
		K_byteContext _localctx = new K_byteContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_k_byte);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4203);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "BYTE")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"BYTE\")) ");
			setState(4204);
			((K_byteContext)_localctx).r = match(ID);
			 ((K_byteContext)_localctx).r->setType(((K_byteContext)_localctx).r, T_RESERVED); ((K_byteContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_castContext extends ParserRuleContext {
		public Token r;
		public K_castContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_cast; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_cast(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_cast(this);
		}
	}

	public final K_castContext k_cast() throws RecognitionException {
		K_castContext _localctx = new K_castContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_k_cast);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4207);
			((K_castContext)_localctx).r = match(T__116);
			 ((K_castContext)_localctx).r->setType(((K_castContext)_localctx).r, T_RESERVED); ((K_castContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_characterContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_characterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_character; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_character(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_character(this);
		}
	}

	public final K_characterContext k_character() throws RecognitionException {
		K_characterContext _localctx = new K_characterContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_k_character);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4210);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "CHARACTER")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"CHARACTER\")) ");
			setState(4211);
			((K_characterContext)_localctx).r = match(ID);
			 ((K_characterContext)_localctx).r->setType(((K_characterContext)_localctx).r, T_RESERVED); ((K_characterContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_clobContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_clobContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_clob; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_clob(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_clob(this);
		}
	}

	public final K_clobContext k_clob() throws RecognitionException {
		K_clobContext _localctx = new K_clobContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_k_clob);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4214);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "CLOB")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"CLOB\")) ");
			setState(4215);
			((K_clobContext)_localctx).r = match(ID);
			 ((K_clobContext)_localctx).r->setType(((K_clobContext)_localctx).r, T_RESERVED); ((K_clobContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_cluster_setContext extends ParserRuleContext {
		public Token r;
		public K_cluster_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_cluster_set; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_cluster_set(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_cluster_set(this);
		}
	}

	public final K_cluster_setContext k_cluster_set() throws RecognitionException {
		K_cluster_setContext _localctx = new K_cluster_setContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_k_cluster_set);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4218);
			((K_cluster_setContext)_localctx).r = match(T__117);
			 ((K_cluster_setContext)_localctx).r->setType(((K_cluster_setContext)_localctx).r, T_RESERVED); ((K_cluster_setContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_connect_by_rootContext extends ParserRuleContext {
		public Token r;
		public K_connect_by_rootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_connect_by_root; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_connect_by_root(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_connect_by_root(this);
		}
	}

	public final K_connect_by_rootContext k_connect_by_root() throws RecognitionException {
		K_connect_by_rootContext _localctx = new K_connect_by_rootContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_k_connect_by_root);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4221);
			((K_connect_by_rootContext)_localctx).r = match(T__118);
			 ((K_connect_by_rootContext)_localctx).r->setType(((K_connect_by_rootContext)_localctx).r, T_RESERVED); ((K_connect_by_rootContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_constraintContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_constraint(this);
		}
	}

	public final K_constraintContext k_constraint() throws RecognitionException {
		K_constraintContext _localctx = new K_constraintContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_k_constraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4224);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "CONSTRAINT")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"CONSTRAINT\")) ");
			setState(4225);
			((K_constraintContext)_localctx).r = match(ID);
			 ((K_constraintContext)_localctx).r->setType(((K_constraintContext)_localctx).r, T_RESERVED); ((K_constraintContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_countContext extends ParserRuleContext {
		public Token r;
		public K_countContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_count; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_count(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_count(this);
		}
	}

	public final K_countContext k_count() throws RecognitionException {
		K_countContext _localctx = new K_countContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_k_count);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4228);
			((K_countContext)_localctx).r = match(T__119);
			 ((K_countContext)_localctx).r->setType(((K_countContext)_localctx).r, T_RESERVED); ((K_countContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_crossContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_crossContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_cross; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_cross(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_cross(this);
		}
	}

	public final K_crossContext k_cross() throws RecognitionException {
		K_crossContext _localctx = new K_crossContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_k_cross);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4231);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "CROSS")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"CROSS\")) ");
			setState(4232);
			((K_crossContext)_localctx).r = match(ID);
			 ((K_crossContext)_localctx).r->setType(((K_crossContext)_localctx).r, T_RESERVED); ((K_crossContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_cubeContext extends ParserRuleContext {
		public Token r;
		public K_cubeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_cube; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_cube(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_cube(this);
		}
	}

	public final K_cubeContext k_cube() throws RecognitionException {
		K_cubeContext _localctx = new K_cubeContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_k_cube);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4235);
			((K_cubeContext)_localctx).r = match(T__120);
			 ((K_cubeContext)_localctx).r->setType(((K_cubeContext)_localctx).r, T_RESERVED); ((K_cubeContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_cursorContext extends ParserRuleContext {
		public Token r;
		public K_cursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_cursor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_cursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_cursor(this);
		}
	}

	public final K_cursorContext k_cursor() throws RecognitionException {
		K_cursorContext _localctx = new K_cursorContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_k_cursor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4238);
			((K_cursorContext)_localctx).r = match(T__121);
			 ((K_cursorContext)_localctx).r->setType(((K_cursorContext)_localctx).r, T_RESERVED); ((K_cursorContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_cycleContext extends ParserRuleContext {
		public Token r;
		public K_cycleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_cycle; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_cycle(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_cycle(this);
		}
	}

	public final K_cycleContext k_cycle() throws RecognitionException {
		K_cycleContext _localctx = new K_cycleContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_k_cycle);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4241);
			((K_cycleContext)_localctx).r = match(T__122);
			 ((K_cycleContext)_localctx).r->setType(((K_cycleContext)_localctx).r, T_RESERVED); ((K_cycleContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_dayContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_dayContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_day; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_day(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_day(this);
		}
	}

	public final K_dayContext k_day() throws RecognitionException {
		K_dayContext _localctx = new K_dayContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_k_day);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4244);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "DAY")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"DAY\")) ");
			setState(4245);
			((K_dayContext)_localctx).r = match(ID);
			 ((K_dayContext)_localctx).r->setType(((K_dayContext)_localctx).r, T_RESERVED); ((K_dayContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_dbtimezoneContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_dbtimezoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_dbtimezone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_dbtimezone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_dbtimezone(this);
		}
	}

	public final K_dbtimezoneContext k_dbtimezone() throws RecognitionException {
		K_dbtimezoneContext _localctx = new K_dbtimezoneContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_k_dbtimezone);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4248);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "DBTIMEZONE")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"DBTIMEZONE\")) ");
			setState(4249);
			((K_dbtimezoneContext)_localctx).r = match(ID);
			 ((K_dbtimezoneContext)_localctx).r->setType(((K_dbtimezoneContext)_localctx).r, T_RESERVED); ((K_dbtimezoneContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_decContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_dec(this);
		}
	}

	public final K_decContext k_dec() throws RecognitionException {
		K_decContext _localctx = new K_decContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_k_dec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4252);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "DEC")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"DEC\")) ");
			setState(4253);
			((K_decContext)_localctx).r = match(ID);
			 ((K_decContext)_localctx).r->setType(((K_decContext)_localctx).r, T_RESERVED); ((K_decContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_decrementContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_decrementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_decrement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_decrement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_decrement(this);
		}
	}

	public final K_decrementContext k_decrement() throws RecognitionException {
		K_decrementContext _localctx = new K_decrementContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_k_decrement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4256);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "DECREMENT")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"DECREMENT\")) ");
			setState(4257);
			((K_decrementContext)_localctx).r = match(ID);
			 ((K_decrementContext)_localctx).r->setType(((K_decrementContext)_localctx).r, T_RESERVED); ((K_decrementContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_dense_rankContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_dense_rankContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_dense_rank; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_dense_rank(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_dense_rank(this);
		}
	}

	public final K_dense_rankContext k_dense_rank() throws RecognitionException {
		K_dense_rankContext _localctx = new K_dense_rankContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_k_dense_rank);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4260);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "DENSE_RANK")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"DENSE_RANK\")) ");
			setState(4261);
			((K_dense_rankContext)_localctx).r = match(ID);
			 ((K_dense_rankContext)_localctx).r->setType(((K_dense_rankContext)_localctx).r, T_RESERVED); ((K_dense_rankContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_depthContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_depthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_depth; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_depth(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_depth(this);
		}
	}

	public final K_depthContext k_depth() throws RecognitionException {
		K_depthContext _localctx = new K_depthContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_k_depth);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4264);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "DEPTH")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"DEPTH\")) ");
			setState(4265);
			((K_depthContext)_localctx).r = match(ID);
			 ((K_depthContext)_localctx).r->setType(((K_depthContext)_localctx).r, T_RESERVED); ((K_depthContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_dimensionContext extends ParserRuleContext {
		public Token r;
		public K_dimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_dimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_dimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_dimension(this);
		}
	}

	public final K_dimensionContext k_dimension() throws RecognitionException {
		K_dimensionContext _localctx = new K_dimensionContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_k_dimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4268);
			((K_dimensionContext)_localctx).r = match(T__123);
			 ((K_dimensionContext)_localctx).r->setType(((K_dimensionContext)_localctx).r, T_RESERVED); ((K_dimensionContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_doubleContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_doubleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_double; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_double(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_double(this);
		}
	}

	public final K_doubleContext k_double() throws RecognitionException {
		K_doubleContext _localctx = new K_doubleContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_k_double);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4271);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "DOUBLE")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"DOUBLE\")) ");
			setState(4272);
			((K_doubleContext)_localctx).r = match(ID);
			 ((K_doubleContext)_localctx).r->setType(((K_doubleContext)_localctx).r, T_RESERVED); ((K_doubleContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_emptyContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_emptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_empty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_empty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_empty(this);
		}
	}

	public final K_emptyContext k_empty() throws RecognitionException {
		K_emptyContext _localctx = new K_emptyContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_k_empty);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4275);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "EMPTY")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"EMPTY\")) ");
			setState(4276);
			((K_emptyContext)_localctx).r = match(ID);
			 ((K_emptyContext)_localctx).r->setType(((K_emptyContext)_localctx).r, T_RESERVED); ((K_emptyContext)_localctx).r->user1 = T_OPERATOR_PART;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_endContext extends ParserRuleContext {
		public Token r;
		public K_endContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_end; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_end(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_end(this);
		}
	}

	public final K_endContext k_end() throws RecognitionException {
		K_endContext _localctx = new K_endContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_k_end);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4279);
			((K_endContext)_localctx).r = match(T__124);
			 ((K_endContext)_localctx).r->setType(((K_endContext)_localctx).r, T_RESERVED); ((K_endContext)_localctx).r->user1 = T_OPERATOR_PART;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_equals_pathContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_equals_pathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_equals_path; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_equals_path(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_equals_path(this);
		}
	}

	public final K_equals_pathContext k_equals_path() throws RecognitionException {
		K_equals_pathContext _localctx = new K_equals_pathContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_k_equals_path);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4282);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "EQUALS_PATH")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"EQUALS_PATH\")) ");
			setState(4283);
			((K_equals_pathContext)_localctx).r = match(ID);
			 ((K_equals_pathContext)_localctx).r->setType(((K_equals_pathContext)_localctx).r, T_RESERVED); ((K_equals_pathContext)_localctx).r->user1 = T_OPERATOR_UNARY;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_errorsContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_errorsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_errors; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_errors(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_errors(this);
		}
	}

	public final K_errorsContext k_errors() throws RecognitionException {
		K_errorsContext _localctx = new K_errorsContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_k_errors);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4286);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "ERRORS")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"ERRORS\")) ");
			setState(4287);
			((K_errorsContext)_localctx).r = match(ID);
			 ((K_errorsContext)_localctx).r->setType(((K_errorsContext)_localctx).r, T_RESERVED); ((K_errorsContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_escapeContext extends ParserRuleContext {
		public Token r;
		public K_escapeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_escape; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_escape(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_escape(this);
		}
	}

	public final K_escapeContext k_escape() throws RecognitionException {
		K_escapeContext _localctx = new K_escapeContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_k_escape);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4290);
			((K_escapeContext)_localctx).r = match(T__125);
			 ((K_escapeContext)_localctx).r->setType(((K_escapeContext)_localctx).r, T_RESERVED); ((K_escapeContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_excludeContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_excludeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_exclude; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_exclude(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_exclude(this);
		}
	}

	public final K_excludeContext k_exclude() throws RecognitionException {
		K_excludeContext _localctx = new K_excludeContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_k_exclude);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4293);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "EXCLUDE")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"EXCLUDE\")) ");
			setState(4294);
			((K_excludeContext)_localctx).r = match(ID);
			 ((K_excludeContext)_localctx).r->setType(((K_excludeContext)_localctx).r, T_RESERVED); ((K_excludeContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_extractContext extends ParserRuleContext {
		public Token r;
		public K_extractContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_extract; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_extract(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_extract(this);
		}
	}

	public final K_extractContext k_extract() throws RecognitionException {
		K_extractContext _localctx = new K_extractContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_k_extract);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4297);
			((K_extractContext)_localctx).r = match(T__126);
			 ((K_extractContext)_localctx).r->setType(((K_extractContext)_localctx).r, T_RESERVED); ((K_extractContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_firstContext extends ParserRuleContext {
		public Token r;
		public K_firstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_first; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_first(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_first(this);
		}
	}

	public final K_firstContext k_first() throws RecognitionException {
		K_firstContext _localctx = new K_firstContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_k_first);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4300);
			((K_firstContext)_localctx).r = match(T__127);
			 ((K_firstContext)_localctx).r->setType(((K_firstContext)_localctx).r, T_RESERVED); ((K_firstContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_followingContext extends ParserRuleContext {
		public Token r;
		public K_followingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_following; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_following(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_following(this);
		}
	}

	public final K_followingContext k_following() throws RecognitionException {
		K_followingContext _localctx = new K_followingContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_k_following);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4303);
			((K_followingContext)_localctx).r = match(T__128);
			 ((K_followingContext)_localctx).r->setType(((K_followingContext)_localctx).r, T_RESERVED); ((K_followingContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_fullContext extends ParserRuleContext {
		public Token r;
		public K_fullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_full; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_full(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_full(this);
		}
	}

	public final K_fullContext k_full() throws RecognitionException {
		K_fullContext _localctx = new K_fullContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_k_full);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4306);
			((K_fullContext)_localctx).r = match(T__129);
			 ((K_fullContext)_localctx).r->setType(((K_fullContext)_localctx).r, T_RESERVED); ((K_fullContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_groupingContext extends ParserRuleContext {
		public Token r;
		public K_groupingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_grouping; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_grouping(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_grouping(this);
		}
	}

	public final K_groupingContext k_grouping() throws RecognitionException {
		K_groupingContext _localctx = new K_groupingContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_k_grouping);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4309);
			((K_groupingContext)_localctx).r = match(T__130);
			 ((K_groupingContext)_localctx).r->setType(((K_groupingContext)_localctx).r, T_RESERVED); ((K_groupingContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_hourContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_hourContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_hour; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_hour(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_hour(this);
		}
	}

	public final K_hourContext k_hour() throws RecognitionException {
		K_hourContext _localctx = new K_hourContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_k_hour);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4312);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "HOUR")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"HOUR\")) ");
			setState(4313);
			((K_hourContext)_localctx).r = match(ID);
			 ((K_hourContext)_localctx).r->setType(((K_hourContext)_localctx).r, T_RESERVED); ((K_hourContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_ignoreContext extends ParserRuleContext {
		public Token r;
		public K_ignoreContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_ignore; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_ignore(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_ignore(this);
		}
	}

	public final K_ignoreContext k_ignore() throws RecognitionException {
		K_ignoreContext _localctx = new K_ignoreContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_k_ignore);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4316);
			((K_ignoreContext)_localctx).r = match(T__131);
			 ((K_ignoreContext)_localctx).r->setType(((K_ignoreContext)_localctx).r, T_RESERVED); ((K_ignoreContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_includeContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_includeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_include; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_include(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_include(this);
		}
	}

	public final K_includeContext k_include() throws RecognitionException {
		K_includeContext _localctx = new K_includeContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_k_include);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4319);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "INCLUDE")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"INCLUDE\")) ");
			setState(4320);
			((K_includeContext)_localctx).r = match(ID);
			 ((K_includeContext)_localctx).r->setType(((K_includeContext)_localctx).r, T_RESERVED); ((K_includeContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_infiniteContext extends ParserRuleContext {
		public Token r;
		public K_infiniteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_infinite; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_infinite(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_infinite(this);
		}
	}

	public final K_infiniteContext k_infinite() throws RecognitionException {
		K_infiniteContext _localctx = new K_infiniteContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_k_infinite);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4323);
			((K_infiniteContext)_localctx).r = match(T__132);
			 ((K_infiniteContext)_localctx).r->setType(((K_infiniteContext)_localctx).r, T_RESERVED); ((K_infiniteContext)_localctx).r->user1 = T_OPERATOR_PART;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_innerContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_innerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_inner; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_inner(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_inner(this);
		}
	}

	public final K_innerContext k_inner() throws RecognitionException {
		K_innerContext _localctx = new K_innerContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_k_inner);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4326);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "INNER")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"INNER\")) ");
			setState(4327);
			((K_innerContext)_localctx).r = match(ID);
			 ((K_innerContext)_localctx).r->setType(((K_innerContext)_localctx).r, T_RESERVED); ((K_innerContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_intContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_intContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_int; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_int(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_int(this);
		}
	}

	public final K_intContext k_int() throws RecognitionException {
		K_intContext _localctx = new K_intContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_k_int);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4330);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "INT")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"INT\")) ");
			setState(4331);
			((K_intContext)_localctx).r = match(ID);
			 ((K_intContext)_localctx).r->setType(((K_intContext)_localctx).r, T_RESERVED); ((K_intContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_intervalContext extends ParserRuleContext {
		public Token r;
		public K_intervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_interval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_interval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_interval(this);
		}
	}

	public final K_intervalContext k_interval() throws RecognitionException {
		K_intervalContext _localctx = new K_intervalContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_k_interval);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4334);
			((K_intervalContext)_localctx).r = match(T__133);
			 ((K_intervalContext)_localctx).r->setType(((K_intervalContext)_localctx).r, T_RESERVED); ((K_intervalContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_iterateContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_iterateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_iterate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_iterate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_iterate(this);
		}
	}

	public final K_iterateContext k_iterate() throws RecognitionException {
		K_iterateContext _localctx = new K_iterateContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_k_iterate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4337);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "ITERATE")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"ITERATE\")) ");
			setState(4338);
			((K_iterateContext)_localctx).r = match(ID);
			 ((K_iterateContext)_localctx).r->setType(((K_iterateContext)_localctx).r, T_RESERVED); ((K_iterateContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_joinContext extends ParserRuleContext {
		public Token r;
		public K_joinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_join; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_join(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_join(this);
		}
	}

	public final K_joinContext k_join() throws RecognitionException {
		K_joinContext _localctx = new K_joinContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_k_join);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4341);
			((K_joinContext)_localctx).r = match(T__134);
			 ((K_joinContext)_localctx).r->setType(((K_joinContext)_localctx).r, T_RESERVED); ((K_joinContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_keepContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_keepContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_keep; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_keep(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_keep(this);
		}
	}

	public final K_keepContext k_keep() throws RecognitionException {
		K_keepContext _localctx = new K_keepContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_k_keep);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4344);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "KEEP")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"KEEP\")) ");
			setState(4345);
			((K_keepContext)_localctx).r = match(ID);
			 ((K_keepContext)_localctx).r->setType(((K_keepContext)_localctx).r, T_RESERVED); ((K_keepContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_lastContext extends ParserRuleContext {
		public Token r;
		public K_lastContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_last; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_last(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_last(this);
		}
	}

	public final K_lastContext k_last() throws RecognitionException {
		K_lastContext _localctx = new K_lastContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_k_last);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4348);
			((K_lastContext)_localctx).r = match(T__135);
			 ((K_lastContext)_localctx).r->setType(((K_lastContext)_localctx).r, T_RESERVED); ((K_lastContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_leadingContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_leadingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_leading; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_leading(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_leading(this);
		}
	}

	public final K_leadingContext k_leading() throws RecognitionException {
		K_leadingContext _localctx = new K_leadingContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_k_leading);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4351);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "LEADING")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"LEADING\")) ");
			setState(4352);
			((K_leadingContext)_localctx).r = match(ID);
			 ((K_leadingContext)_localctx).r->setType(((K_leadingContext)_localctx).r, T_RESERVED); ((K_leadingContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_leftContext extends ParserRuleContext {
		public Token r;
		public K_leftContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_left; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_left(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_left(this);
		}
	}

	public final K_leftContext k_left() throws RecognitionException {
		K_leftContext _localctx = new K_leftContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_k_left);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4355);
			((K_leftContext)_localctx).r = match(T__136);
			 ((K_leftContext)_localctx).r->setType(((K_leftContext)_localctx).r, T_RESERVED); ((K_leftContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_like2Context extends ParserRuleContext {
		public Token r;
		public K_like2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_like2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_like2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_like2(this);
		}
	}

	public final K_like2Context k_like2() throws RecognitionException {
		K_like2Context _localctx = new K_like2Context(_ctx, getState());
		enterRule(_localctx, 730, RULE_k_like2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4358);
			((K_like2Context)_localctx).r = match(T__137);
			 ((K_like2Context)_localctx).r->setType(((K_like2Context)_localctx).r, T_RESERVED); ((K_like2Context)_localctx).r->user1 = T_OPERATOR_BINARY;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_like4Context extends ParserRuleContext {
		public Token r;
		public K_like4Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_like4; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_like4(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_like4(this);
		}
	}

	public final K_like4Context k_like4() throws RecognitionException {
		K_like4Context _localctx = new K_like4Context(_ctx, getState());
		enterRule(_localctx, 732, RULE_k_like4);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4361);
			((K_like4Context)_localctx).r = match(T__138);
			 ((K_like4Context)_localctx).r->setType(((K_like4Context)_localctx).r, T_RESERVED); ((K_like4Context)_localctx).r->user1 = T_OPERATOR_BINARY;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_likecContext extends ParserRuleContext {
		public Token r;
		public K_likecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_likec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_likec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_likec(this);
		}
	}

	public final K_likecContext k_likec() throws RecognitionException {
		K_likecContext _localctx = new K_likecContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_k_likec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4364);
			((K_likecContext)_localctx).r = match(T__139);
			 ((K_likecContext)_localctx).r->setType(((K_likecContext)_localctx).r, T_RESERVED); ((K_likecContext)_localctx).r->user1 = T_OPERATOR_BINARY;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_limitContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_limitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_limit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_limit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_limit(this);
		}
	}

	public final K_limitContext k_limit() throws RecognitionException {
		K_limitContext _localctx = new K_limitContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_k_limit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4367);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "LIMIT")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"LIMIT\")) ");
			setState(4368);
			((K_limitContext)_localctx).r = match(ID);
			 ((K_limitContext)_localctx).r->setType(((K_limitContext)_localctx).r, T_RESERVED); ((K_limitContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_listaggContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_listaggContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_listagg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_listagg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_listagg(this);
		}
	}

	public final K_listaggContext k_listagg() throws RecognitionException {
		K_listaggContext _localctx = new K_listaggContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_k_listagg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4371);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "LISTAGG")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"LISTAGG\")) ");
			setState(4372);
			((K_listaggContext)_localctx).r = match(ID);
			 ((K_listaggContext)_localctx).r->setType(((K_listaggContext)_localctx).r, T_RESERVED); ((K_listaggContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_lnnvlContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_lnnvlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_lnnvl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_lnnvl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_lnnvl(this);
		}
	}

	public final K_lnnvlContext k_lnnvl() throws RecognitionException {
		K_lnnvlContext _localctx = new K_lnnvlContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_k_lnnvl);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4375);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "LNNVL")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"LNNVL\")) ");
			setState(4376);
			((K_lnnvlContext)_localctx).r = match(ID);
			 ((K_lnnvlContext)_localctx).r->setType(((K_lnnvlContext)_localctx).r, T_RESERVED); ((K_lnnvlContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_localContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_localContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_local; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_local(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_local(this);
		}
	}

	public final K_localContext k_local() throws RecognitionException {
		K_localContext _localctx = new K_localContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_k_local);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4379);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "LOCAL")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"LOCAL\")) ");
			setState(4380);
			((K_localContext)_localctx).r = match(ID);
			 ((K_localContext)_localctx).r->setType(((K_localContext)_localctx).r, T_RESERVED); ((K_localContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_lockedContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_lockedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_locked; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_locked(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_locked(this);
		}
	}

	public final K_lockedContext k_locked() throws RecognitionException {
		K_lockedContext _localctx = new K_lockedContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_k_locked);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4383);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "LOCKED")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"LOCKED\")) ");
			setState(4384);
			((K_lockedContext)_localctx).r = match(ID);
			 ((K_lockedContext)_localctx).r->setType(((K_lockedContext)_localctx).r, T_RESERVED); ((K_lockedContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_logContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_logContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_log; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_log(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_log(this);
		}
	}

	public final K_logContext k_log() throws RecognitionException {
		K_logContext _localctx = new K_logContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_k_log);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4387);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "LOG"   )) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"LOG\"   )) ");
			setState(4388);
			((K_logContext)_localctx).r = match(ID);
			 ((K_logContext)_localctx).r->setType(((K_logContext)_localctx).r, T_RESERVED); ((K_logContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_mainContext extends ParserRuleContext {
		public Token r;
		public K_mainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_main; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_main(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_main(this);
		}
	}

	public final K_mainContext k_main() throws RecognitionException {
		K_mainContext _localctx = new K_mainContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_k_main);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4391);
			((K_mainContext)_localctx).r = match(T__140);
			 ((K_mainContext)_localctx).r->setType(((K_mainContext)_localctx).r, T_RESERVED); ((K_mainContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_matchedContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_matchedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_matched; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_matched(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_matched(this);
		}
	}

	public final K_matchedContext k_matched() throws RecognitionException {
		K_matchedContext _localctx = new K_matchedContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_k_matched);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4394);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "MATCHED")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"MATCHED\")) ");
			setState(4395);
			((K_matchedContext)_localctx).r = match(ID);
			 ((K_matchedContext)_localctx).r->setType(((K_matchedContext)_localctx).r, T_RESERVED); ((K_matchedContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_maxvalueContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_maxvalueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_maxvalue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_maxvalue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_maxvalue(this);
		}
	}

	public final K_maxvalueContext k_maxvalue() throws RecognitionException {
		K_maxvalueContext _localctx = new K_maxvalueContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_k_maxvalue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4398);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "MAXVALUE")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"MAXVALUE\")) ");
			setState(4399);
			((K_maxvalueContext)_localctx).r = match(ID);
			 ((K_maxvalueContext)_localctx).r->setType(((K_maxvalueContext)_localctx).r, T_RESERVED); ((K_maxvalueContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_measuresContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_measuresContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_measures; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_measures(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_measures(this);
		}
	}

	public final K_measuresContext k_measures() throws RecognitionException {
		K_measuresContext _localctx = new K_measuresContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_k_measures);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4402);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "MEASURES")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"MEASURES\")) ");
			setState(4403);
			((K_measuresContext)_localctx).r = match(ID);
			 ((K_measuresContext)_localctx).r->setType(((K_measuresContext)_localctx).r, T_RESERVED); ((K_measuresContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_memberContext extends ParserRuleContext {
		public Token r;
		public K_memberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_member; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_member(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_member(this);
		}
	}

	public final K_memberContext k_member() throws RecognitionException {
		K_memberContext _localctx = new K_memberContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_k_member);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4406);
			((K_memberContext)_localctx).r = match(T__141);
			 ((K_memberContext)_localctx).r->setType(((K_memberContext)_localctx).r, T_RESERVED); ((K_memberContext)_localctx).r->user1 = T_OPERATOR_BINARY;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_mergeContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_mergeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_merge; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_merge(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_merge(this);
		}
	}

	public final K_mergeContext k_merge() throws RecognitionException {
		K_mergeContext _localctx = new K_mergeContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_k_merge);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4409);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "MERGE")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"MERGE\")) ");
			setState(4410);
			((K_mergeContext)_localctx).r = match(ID);
			 ((K_mergeContext)_localctx).r->setType(((K_mergeContext)_localctx).r, T_RESERVED); ((K_mergeContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_minuteContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_minuteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_minute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_minute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_minute(this);
		}
	}

	public final K_minuteContext k_minute() throws RecognitionException {
		K_minuteContext _localctx = new K_minuteContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_k_minute);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4413);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "MINUTE")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"MINUTE\")) ");
			setState(4414);
			((K_minuteContext)_localctx).r = match(ID);
			 ((K_minuteContext)_localctx).r->setType(((K_minuteContext)_localctx).r, T_RESERVED); ((K_minuteContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_mivalueContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_mivalueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_mivalue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_mivalue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_mivalue(this);
		}
	}

	public final K_mivalueContext k_mivalue() throws RecognitionException {
		K_mivalueContext _localctx = new K_mivalueContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_k_mivalue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4417);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "MIVALUE")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"MIVALUE\")) ");
			setState(4418);
			((K_mivalueContext)_localctx).r = match(ID);
			 ((K_mivalueContext)_localctx).r->setType(((K_mivalueContext)_localctx).r, T_RESERVED); ((K_mivalueContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_mlslabelContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_mlslabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_mlslabel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_mlslabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_mlslabel(this);
		}
	}

	public final K_mlslabelContext k_mlslabel() throws RecognitionException {
		K_mlslabelContext _localctx = new K_mlslabelContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_k_mlslabel);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4421);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "MLSLABEL")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"MLSLABEL\")) ");
			setState(4422);
			((K_mlslabelContext)_localctx).r = match(ID);
			 ((K_mlslabelContext)_localctx).r->setType(((K_mlslabelContext)_localctx).r, T_RESERVED); ((K_mlslabelContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_modelContext extends ParserRuleContext {
		public Token r;
		public K_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_model(this);
		}
	}

	public final K_modelContext k_model() throws RecognitionException {
		K_modelContext _localctx = new K_modelContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_k_model);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4425);
			if (!(
			    !(strcasecmp((const char*)LT(2)->getText(LT(2))->chars, "MAIN")) ||
			    !(strcasecmp((const char*)LT(2)->getText(LT(2))->chars, "PARTITION")) ||
			    !(strcasecmp((const char*)LT(2)->getText(LT(2))->chars, "DIMENSION"))
			   )) throw new FailedPredicateException(this, "\n    !(strcasecmp((const char*)LT(2)->getText(LT(2))->chars, \"MAIN\")) ||\n    !(strcasecmp((const char*)LT(2)->getText(LT(2))->chars, \"PARTITION\")) ||\n    !(strcasecmp((const char*)LT(2)->getText(LT(2))->chars, \"DIMENSION\"))\n   ");
			setState(4426);
			((K_modelContext)_localctx).r = match(T__142);
			 ((K_modelContext)_localctx).r->setType(((K_modelContext)_localctx).r, T_RESERVED); ((K_modelContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_monthContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_monthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_month; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_month(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_month(this);
		}
	}

	public final K_monthContext k_month() throws RecognitionException {
		K_monthContext _localctx = new K_monthContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_k_month);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4429);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "MONTH")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"MONTH\")) ");
			setState(4430);
			((K_monthContext)_localctx).r = match(ID);
			 ((K_monthContext)_localctx).r->setType(((K_monthContext)_localctx).r, T_RESERVED); ((K_monthContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_multisetContext extends ParserRuleContext {
		public Token r;
		public K_multisetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_multiset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_multiset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_multiset(this);
		}
	}

	public final K_multisetContext k_multiset() throws RecognitionException {
		K_multisetContext _localctx = new K_multisetContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_k_multiset);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4433);
			((K_multisetContext)_localctx).r = match(T__143);
			 ((K_multisetContext)_localctx).r->setType(((K_multisetContext)_localctx).r, T_RESERVED); ((K_multisetContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_nanContext extends ParserRuleContext {
		public Token r;
		public K_nanContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_nan; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_nan(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_nan(this);
		}
	}

	public final K_nanContext k_nan() throws RecognitionException {
		K_nanContext _localctx = new K_nanContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_k_nan);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4436);
			((K_nanContext)_localctx).r = match(T__144);
			 ((K_nanContext)_localctx).r->setType(((K_nanContext)_localctx).r, T_RESERVED); ((K_nanContext)_localctx).r->user1 = T_OPERATOR_PART;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_nationalContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_nationalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_national; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_national(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_national(this);
		}
	}

	public final K_nationalContext k_national() throws RecognitionException {
		K_nationalContext _localctx = new K_nationalContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_k_national);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4439);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "NATIONAL")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"NATIONAL\")) ");
			setState(4440);
			((K_nationalContext)_localctx).r = match(ID);
			 ((K_nationalContext)_localctx).r->setType(((K_nationalContext)_localctx).r, T_RESERVED); ((K_nationalContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_naturalContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_naturalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_natural; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_natural(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_natural(this);
		}
	}

	public final K_naturalContext k_natural() throws RecognitionException {
		K_naturalContext _localctx = new K_naturalContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_k_natural);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4443);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "NATURAL")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"NATURAL\")) ");
			setState(4444);
			((K_naturalContext)_localctx).r = match(ID);
			 ((K_naturalContext)_localctx).r->setType(((K_naturalContext)_localctx).r, T_RESERVED); ((K_naturalContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_navContext extends ParserRuleContext {
		public Token r;
		public K_navContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_nav; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_nav(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_nav(this);
		}
	}

	public final K_navContext k_nav() throws RecognitionException {
		K_navContext _localctx = new K_navContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_k_nav);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4447);
			((K_navContext)_localctx).r = match(T__145);
			 ((K_navContext)_localctx).r->setType(((K_navContext)_localctx).r, T_RESERVED); ((K_navContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_ncharContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_ncharContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_nchar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_nchar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_nchar(this);
		}
	}

	public final K_ncharContext k_nchar() throws RecognitionException {
		K_ncharContext _localctx = new K_ncharContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_k_nchar);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4450);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "NCHAR")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"NCHAR\")) ");
			setState(4451);
			((K_ncharContext)_localctx).r = match(ID);
			 ((K_ncharContext)_localctx).r->setType(((K_ncharContext)_localctx).r, T_RESERVED); ((K_ncharContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_nclobContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_nclobContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_nclob; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_nclob(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_nclob(this);
		}
	}

	public final K_nclobContext k_nclob() throws RecognitionException {
		K_nclobContext _localctx = new K_nclobContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_k_nclob);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4454);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "NCLOB")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"NCLOB\")) ");
			setState(4455);
			((K_nclobContext)_localctx).r = match(ID);
			 ((K_nclobContext)_localctx).r->setType(((K_nclobContext)_localctx).r, T_RESERVED); ((K_nclobContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_nocycleContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_nocycleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_nocycle; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_nocycle(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_nocycle(this);
		}
	}

	public final K_nocycleContext k_nocycle() throws RecognitionException {
		K_nocycleContext _localctx = new K_nocycleContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_k_nocycle);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4458);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "NOCYCLE")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"NOCYCLE\")) ");
			setState(4459);
			((K_nocycleContext)_localctx).r = match(ID);
			 ((K_nocycleContext)_localctx).r->setType(((K_nocycleContext)_localctx).r, T_RESERVED); ((K_nocycleContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_nullsContext extends ParserRuleContext {
		public Token r;
		public K_nullsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_nulls; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_nulls(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_nulls(this);
		}
	}

	public final K_nullsContext k_nulls() throws RecognitionException {
		K_nullsContext _localctx = new K_nullsContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_k_nulls);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4462);
			((K_nullsContext)_localctx).r = match(T__146);
			 ((K_nullsContext)_localctx).r->setType(((K_nullsContext)_localctx).r, T_RESERVED); ((K_nullsContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_numericContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_numericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_numeric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_numeric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_numeric(this);
		}
	}

	public final K_numericContext k_numeric() throws RecognitionException {
		K_numericContext _localctx = new K_numericContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_k_numeric);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4465);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "NUMERIC")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"NUMERIC\")) ");
			setState(4466);
			((K_numericContext)_localctx).r = match(ID);
			 ((K_numericContext)_localctx).r->setType(((K_numericContext)_localctx).r, T_RESERVED); ((K_numericContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_nvarcharContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_nvarcharContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_nvarchar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_nvarchar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_nvarchar(this);
		}
	}

	public final K_nvarcharContext k_nvarchar() throws RecognitionException {
		K_nvarcharContext _localctx = new K_nvarcharContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_k_nvarchar);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4469);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "NVARCHAR")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"NVARCHAR\")) ");
			setState(4470);
			((K_nvarcharContext)_localctx).r = match(ID);
			 ((K_nvarcharContext)_localctx).r->setType(((K_nvarcharContext)_localctx).r, T_RESERVED); ((K_nvarcharContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_nvarchar2Context extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_nvarchar2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_nvarchar2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_nvarchar2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_nvarchar2(this);
		}
	}

	public final K_nvarchar2Context k_nvarchar2() throws RecognitionException {
		K_nvarchar2Context _localctx = new K_nvarchar2Context(_ctx, getState());
		enterRule(_localctx, 792, RULE_k_nvarchar2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4473);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "NVARCHAR2")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"NVARCHAR2\")) ");
			setState(4474);
			((K_nvarchar2Context)_localctx).r = match(ID);
			 ((K_nvarchar2Context)_localctx).r->setType(((K_nvarchar2Context)_localctx).r, T_RESERVED); ((K_nvarchar2Context)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_onlyContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_onlyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_only; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_only(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_only(this);
		}
	}

	public final K_onlyContext k_only() throws RecognitionException {
		K_onlyContext _localctx = new K_onlyContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_k_only);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4477);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "ONLY")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"ONLY\")) ");
			setState(4478);
			((K_onlyContext)_localctx).r = match(ID);
			 ((K_onlyContext)_localctx).r->setType(((K_onlyContext)_localctx).r, T_RESERVED); ((K_onlyContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_outerContext extends ParserRuleContext {
		public Token r;
		public K_outerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_outer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_outer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_outer(this);
		}
	}

	public final K_outerContext k_outer() throws RecognitionException {
		K_outerContext _localctx = new K_outerContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_k_outer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4481);
			((K_outerContext)_localctx).r = match(T__147);
			 ((K_outerContext)_localctx).r->setType(((K_outerContext)_localctx).r, T_RESERVED); ((K_outerContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_overContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_overContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_over; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_over(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_over(this);
		}
	}

	public final K_overContext k_over() throws RecognitionException {
		K_overContext _localctx = new K_overContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_k_over);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4484);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "OVER")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"OVER\")) ");
			setState(4485);
			((K_overContext)_localctx).r = match(ID);
			 ((K_overContext)_localctx).r->setType(((K_overContext)_localctx).r, T_RESERVED); ((K_overContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_partitionContext extends ParserRuleContext {
		public Token r;
		public K_partitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_partition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_partition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_partition(this);
		}
	}

	public final K_partitionContext k_partition() throws RecognitionException {
		K_partitionContext _localctx = new K_partitionContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_k_partition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4488);
			((K_partitionContext)_localctx).r = match(T__148);
			 ((K_partitionContext)_localctx).r->setType(((K_partitionContext)_localctx).r, T_RESERVED); ((K_partitionContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_percent_rankContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_percent_rankContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_percent_rank; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_percent_rank(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_percent_rank(this);
		}
	}

	public final K_percent_rankContext k_percent_rank() throws RecognitionException {
		K_percent_rankContext _localctx = new K_percent_rankContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_k_percent_rank);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4491);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "PERCENT_RANK")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"PERCENT_RANK\")) ");
			setState(4492);
			((K_percent_rankContext)_localctx).r = match(ID);
			 ((K_percent_rankContext)_localctx).r->setType(((K_percent_rankContext)_localctx).r, T_RESERVED); ((K_percent_rankContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_percentile_contContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_percentile_contContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_percentile_cont; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_percentile_cont(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_percentile_cont(this);
		}
	}

	public final K_percentile_contContext k_percentile_cont() throws RecognitionException {
		K_percentile_contContext _localctx = new K_percentile_contContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_k_percentile_cont);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4495);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "PERCENTILE_CONT")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"PERCENTILE_CONT\")) ");
			setState(4496);
			((K_percentile_contContext)_localctx).r = match(ID);
			 ((K_percentile_contContext)_localctx).r->setType(((K_percentile_contContext)_localctx).r, T_RESERVED); ((K_percentile_contContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_percentile_discContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_percentile_discContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_percentile_disc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_percentile_disc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_percentile_disc(this);
		}
	}

	public final K_percentile_discContext k_percentile_disc() throws RecognitionException {
		K_percentile_discContext _localctx = new K_percentile_discContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_k_percentile_disc);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4499);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "PERCENTILE_DISC")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"PERCENTILE_DISC\")) ");
			setState(4500);
			((K_percentile_discContext)_localctx).r = match(ID);
			 ((K_percentile_discContext)_localctx).r->setType(((K_percentile_discContext)_localctx).r, T_RESERVED); ((K_percentile_discContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_pivotContext extends ParserRuleContext {
		public Token r;
		public K_pivotContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_pivot; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_pivot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_pivot(this);
		}
	}

	public final K_pivotContext k_pivot() throws RecognitionException {
		K_pivotContext _localctx = new K_pivotContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_k_pivot);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4503);
			((K_pivotContext)_localctx).r = match(T__149);
			 ((K_pivotContext)_localctx).r->setType(((K_pivotContext)_localctx).r, T_RESERVED); ((K_pivotContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_pls_integerContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_pls_integerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_pls_integer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_pls_integer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_pls_integer(this);
		}
	}

	public final K_pls_integerContext k_pls_integer() throws RecognitionException {
		K_pls_integerContext _localctx = new K_pls_integerContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_k_pls_integer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4506);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "PLS_INTEGER")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"PLS_INTEGER\")) ");
			setState(4507);
			((K_pls_integerContext)_localctx).r = match(ID);
			 ((K_pls_integerContext)_localctx).r->setType(((K_pls_integerContext)_localctx).r, T_RESERVED); ((K_pls_integerContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_positiveContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_positiveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_positive; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_positive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_positive(this);
		}
	}

	public final K_positiveContext k_positive() throws RecognitionException {
		K_positiveContext _localctx = new K_positiveContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_k_positive);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4510);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "POSITIVE")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"POSITIVE\")) ");
			setState(4511);
			((K_positiveContext)_localctx).r = match(ID);
			 ((K_positiveContext)_localctx).r->setType(((K_positiveContext)_localctx).r, T_RESERVED); ((K_positiveContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_precedingContext extends ParserRuleContext {
		public Token r;
		public K_precedingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_preceding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_preceding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_preceding(this);
		}
	}

	public final K_precedingContext k_preceding() throws RecognitionException {
		K_precedingContext _localctx = new K_precedingContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_k_preceding);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4514);
			((K_precedingContext)_localctx).r = match(T__150);
			 ((K_precedingContext)_localctx).r->setType(((K_precedingContext)_localctx).r, T_RESERVED); ((K_precedingContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_precisionContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_precisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_precision; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_precision(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_precision(this);
		}
	}

	public final K_precisionContext k_precision() throws RecognitionException {
		K_precisionContext _localctx = new K_precisionContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_k_precision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4517);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "PRECISION")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"PRECISION\")) ");
			setState(4518);
			((K_precisionContext)_localctx).r = match(ID);
			 ((K_precisionContext)_localctx).r->setType(((K_precisionContext)_localctx).r, T_RESERVED); ((K_precisionContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_presentContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_presentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_present; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_present(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_present(this);
		}
	}

	public final K_presentContext k_present() throws RecognitionException {
		K_presentContext _localctx = new K_presentContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_k_present);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4521);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "PRESENT")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"PRESENT\")) ");
			setState(4522);
			((K_presentContext)_localctx).r = match(ID);
			 ((K_presentContext)_localctx).r->setType(((K_presentContext)_localctx).r, T_RESERVED); ((K_presentContext)_localctx).r->user1 = T_OPERATOR_PART;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_rangeContext extends ParserRuleContext {
		public Token r;
		public K_rangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_range; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_range(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_range(this);
		}
	}

	public final K_rangeContext k_range() throws RecognitionException {
		K_rangeContext _localctx = new K_rangeContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_k_range);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4525);
			((K_rangeContext)_localctx).r = match(T__151);
			 ((K_rangeContext)_localctx).r->setType(((K_rangeContext)_localctx).r, T_RESERVED); ((K_rangeContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_readContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_readContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_read; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_read(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_read(this);
		}
	}

	public final K_readContext k_read() throws RecognitionException {
		K_readContext _localctx = new K_readContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_k_read);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4528);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "READ")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"READ\")) ");
			setState(4529);
			((K_readContext)_localctx).r = match(ID);
			 ((K_readContext)_localctx).r->setType(((K_readContext)_localctx).r, T_RESERVED); ((K_readContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_realContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_realContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_real; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_real(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_real(this);
		}
	}

	public final K_realContext k_real() throws RecognitionException {
		K_realContext _localctx = new K_realContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_k_real);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4532);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "REAL")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"REAL\")) ");
			setState(4533);
			((K_realContext)_localctx).r = match(ID);
			 ((K_realContext)_localctx).r->setType(((K_realContext)_localctx).r, T_RESERVED); ((K_realContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_referenceContext extends ParserRuleContext {
		public Token r;
		public K_referenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_reference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_reference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_reference(this);
		}
	}

	public final K_referenceContext k_reference() throws RecognitionException {
		K_referenceContext _localctx = new K_referenceContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_k_reference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4536);
			((K_referenceContext)_localctx).r = match(T__152);
			 ((K_referenceContext)_localctx).r->setType(((K_referenceContext)_localctx).r, T_RESERVED); ((K_referenceContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_regexp_likeContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_regexp_likeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_regexp_like; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_regexp_like(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_regexp_like(this);
		}
	}

	public final K_regexp_likeContext k_regexp_like() throws RecognitionException {
		K_regexp_likeContext _localctx = new K_regexp_likeContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_k_regexp_like);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4539);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "REGEXP_LIKE")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"REGEXP_LIKE\")) ");
			setState(4540);
			((K_regexp_likeContext)_localctx).r = match(ID);
			 ((K_regexp_likeContext)_localctx).r->setType(((K_regexp_likeContext)_localctx).r, T_RESERVED); ((K_regexp_likeContext)_localctx).r->user1 = T_OPERATOR_UNARY;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_rejectContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_rejectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_reject; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_reject(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_reject(this);
		}
	}

	public final K_rejectContext k_reject() throws RecognitionException {
		K_rejectContext _localctx = new K_rejectContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_k_reject);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4543);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "REJECT")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"REJECT\")) ");
			setState(4544);
			((K_rejectContext)_localctx).r = match(ID);
			 ((K_rejectContext)_localctx).r->setType(((K_rejectContext)_localctx).r, T_RESERVED); ((K_rejectContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_respectContext extends ParserRuleContext {
		public Token r;
		public K_respectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_respect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_respect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_respect(this);
		}
	}

	public final K_respectContext k_respect() throws RecognitionException {
		K_respectContext _localctx = new K_respectContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_k_respect);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4547);
			((K_respectContext)_localctx).r = match(T__153);
			 ((K_respectContext)_localctx).r->setType(((K_respectContext)_localctx).r, T_RESERVED); ((K_respectContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_returnContext extends ParserRuleContext {
		public Token r;
		public K_returnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_return; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_return(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_return(this);
		}
	}

	public final K_returnContext k_return() throws RecognitionException {
		K_returnContext _localctx = new K_returnContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_k_return);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4550);
			((K_returnContext)_localctx).r = match(T__154);
			 ((K_returnContext)_localctx).r->setType(((K_returnContext)_localctx).r, T_RESERVED); ((K_returnContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_returningContext extends ParserRuleContext {
		public Token r;
		public K_returningContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_returning; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_returning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_returning(this);
		}
	}

	public final K_returningContext k_returning() throws RecognitionException {
		K_returningContext _localctx = new K_returningContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_k_returning);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4553);
			((K_returningContext)_localctx).r = match(T__155);
			 ((K_returningContext)_localctx).r->setType(((K_returningContext)_localctx).r, T_RESERVED); ((K_returningContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_rightContext extends ParserRuleContext {
		public Token r;
		public K_rightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_right; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_right(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_right(this);
		}
	}

	public final K_rightContext k_right() throws RecognitionException {
		K_rightContext _localctx = new K_rightContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_k_right);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4556);
			((K_rightContext)_localctx).r = match(T__156);
			 ((K_rightContext)_localctx).r->setType(((K_rightContext)_localctx).r, T_RESERVED); ((K_rightContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_rollupContext extends ParserRuleContext {
		public Token r;
		public K_rollupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_rollup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_rollup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_rollup(this);
		}
	}

	public final K_rollupContext k_rollup() throws RecognitionException {
		K_rollupContext _localctx = new K_rollupContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_k_rollup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4559);
			((K_rollupContext)_localctx).r = match(T__157);
			 ((K_rollupContext)_localctx).r->setType(((K_rollupContext)_localctx).r, T_RESERVED); ((K_rollupContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_rulesContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_rulesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_rules; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_rules(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_rules(this);
		}
	}

	public final K_rulesContext k_rules() throws RecognitionException {
		K_rulesContext _localctx = new K_rulesContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_k_rules);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4562);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "RULES")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"RULES\")) ");
			setState(4563);
			((K_rulesContext)_localctx).r = match(ID);
			 ((K_rulesContext)_localctx).r->setType(((K_rulesContext)_localctx).r, T_RESERVED); ((K_rulesContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_sampleContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_sampleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_sample; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_sample(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_sample(this);
		}
	}

	public final K_sampleContext k_sample() throws RecognitionException {
		K_sampleContext _localctx = new K_sampleContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_k_sample);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4566);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "SAMPLE")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"SAMPLE\")) ");
			setState(4567);
			((K_sampleContext)_localctx).r = match(ID);
			 ((K_sampleContext)_localctx).r->setType(((K_sampleContext)_localctx).r, T_RESERVED); ((K_sampleContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_scnContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_scnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_scn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_scn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_scn(this);
		}
	}

	public final K_scnContext k_scn() throws RecognitionException {
		K_scnContext _localctx = new K_scnContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_k_scn);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4570);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "SCN")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"SCN\")) ");
			setState(4571);
			((K_scnContext)_localctx).r = match(ID);
			 ((K_scnContext)_localctx).r->setType(((K_scnContext)_localctx).r, T_RESERVED); ((K_scnContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_searchContext extends ParserRuleContext {
		public Token r;
		public K_searchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_search; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_search(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_search(this);
		}
	}

	public final K_searchContext k_search() throws RecognitionException {
		K_searchContext _localctx = new K_searchContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_k_search);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4574);
			((K_searchContext)_localctx).r = match(T__158);
			 ((K_searchContext)_localctx).r->setType(((K_searchContext)_localctx).r, T_RESERVED); ((K_searchContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_secondContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_secondContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_second; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_second(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_second(this);
		}
	}

	public final K_secondContext k_second() throws RecognitionException {
		K_secondContext _localctx = new K_secondContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_k_second);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4577);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "SECOND")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"SECOND\")) ");
			setState(4578);
			((K_secondContext)_localctx).r = match(ID);
			 ((K_secondContext)_localctx).r->setType(((K_secondContext)_localctx).r, T_RESERVED); ((K_secondContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_seedContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_seedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_seed; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_seed(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_seed(this);
		}
	}

	public final K_seedContext k_seed() throws RecognitionException {
		K_seedContext _localctx = new K_seedContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_k_seed);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4581);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "SEED")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"SEED\")) ");
			setState(4582);
			((K_seedContext)_localctx).r = match(ID);
			 ((K_seedContext)_localctx).r->setType(((K_seedContext)_localctx).r, T_RESERVED); ((K_seedContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_sequentialContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_sequentialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_sequential; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_sequential(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_sequential(this);
		}
	}

	public final K_sequentialContext k_sequential() throws RecognitionException {
		K_sequentialContext _localctx = new K_sequentialContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_k_sequential);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4585);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "SEQUENTIAL")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"SEQUENTIAL\")) ");
			setState(4586);
			((K_sequentialContext)_localctx).r = match(ID);
			 ((K_sequentialContext)_localctx).r->setType(((K_sequentialContext)_localctx).r, T_RESERVED); ((K_sequentialContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_sessiontimezoneContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_sessiontimezoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_sessiontimezone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_sessiontimezone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_sessiontimezone(this);
		}
	}

	public final K_sessiontimezoneContext k_sessiontimezone() throws RecognitionException {
		K_sessiontimezoneContext _localctx = new K_sessiontimezoneContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_k_sessiontimezone);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4589);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "SESSIONTIMEZONE")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"SESSIONTIMEZONE\")) ");
			setState(4590);
			((K_sessiontimezoneContext)_localctx).r = match(ID);
			 ((K_sessiontimezoneContext)_localctx).r->setType(((K_sessiontimezoneContext)_localctx).r, T_RESERVED); ((K_sessiontimezoneContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_setsContext extends ParserRuleContext {
		public Token r;
		public K_setsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_sets; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_sets(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_sets(this);
		}
	}

	public final K_setsContext k_sets() throws RecognitionException {
		K_setsContext _localctx = new K_setsContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_k_sets);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4593);
			((K_setsContext)_localctx).r = match(T__159);
			 ((K_setsContext)_localctx).r->setType(((K_setsContext)_localctx).r, T_RESERVED); ((K_setsContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_siblingsContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_siblingsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_siblings; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_siblings(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_siblings(this);
		}
	}

	public final K_siblingsContext k_siblings() throws RecognitionException {
		K_siblingsContext _localctx = new K_siblingsContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_k_siblings);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4596);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "SIBLINGS")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"SIBLINGS\")) ");
			setState(4597);
			((K_siblingsContext)_localctx).r = match(ID);
			 ((K_siblingsContext)_localctx).r->setType(((K_siblingsContext)_localctx).r, T_RESERVED); ((K_siblingsContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_singleContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_singleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_single; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_single(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_single(this);
		}
	}

	public final K_singleContext k_single() throws RecognitionException {
		K_singleContext _localctx = new K_singleContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_k_single);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4600);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "SINGLE")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"SINGLE\")) ");
			setState(4601);
			((K_singleContext)_localctx).r = match(ID);
			 ((K_singleContext)_localctx).r->setType(((K_singleContext)_localctx).r, T_RESERVED); ((K_singleContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_skipContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_skipContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_skip; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_skip(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_skip(this);
		}
	}

	public final K_skipContext k_skip() throws RecognitionException {
		K_skipContext _localctx = new K_skipContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_k_skip);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4604);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "SKIP")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"SKIP\")) ");
			setState(4605);
			((K_skipContext)_localctx).r = match(ID);
			 ((K_skipContext)_localctx).r->setType(((K_skipContext)_localctx).r, T_RESERVED); ((K_skipContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_someContext extends ParserRuleContext {
		public Token r;
		public K_someContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_some; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_some(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_some(this);
		}
	}

	public final K_someContext k_some() throws RecognitionException {
		K_someContext _localctx = new K_someContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_k_some);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4608);
			((K_someContext)_localctx).r = match(T__160);
			 ((K_someContext)_localctx).r->setType(((K_someContext)_localctx).r, T_RESERVED); ((K_someContext)_localctx).r->user1 = T_OPERATOR_PART;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_sqlContext extends ParserRuleContext {
		public Token r;
		public K_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_sql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_sql(this);
		}
	}

	public final K_sqlContext k_sql() throws RecognitionException {
		K_sqlContext _localctx = new K_sqlContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_k_sql);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4611);
			((K_sqlContext)_localctx).r = match(T__161);
			 ((K_sqlContext)_localctx).r->setType(((K_sqlContext)_localctx).r, T_RESERVED); ((K_sqlContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_submultisetContext extends ParserRuleContext {
		public Token r;
		public K_submultisetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_submultiset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_submultiset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_submultiset(this);
		}
	}

	public final K_submultisetContext k_submultiset() throws RecognitionException {
		K_submultisetContext _localctx = new K_submultisetContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_k_submultiset);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4614);
			((K_submultisetContext)_localctx).r = match(T__162);
			 ((K_submultisetContext)_localctx).r->setType(((K_submultisetContext)_localctx).r, T_RESERVED); ((K_submultisetContext)_localctx).r->user1 = T_OPERATOR_BINARY;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_subpartitionContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_subpartitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_subpartition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_subpartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_subpartition(this);
		}
	}

	public final K_subpartitionContext k_subpartition() throws RecognitionException {
		K_subpartitionContext _localctx = new K_subpartitionContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_k_subpartition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4617);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "SUBPARTITION")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"SUBPARTITION\")) ");
			setState(4618);
			((K_subpartitionContext)_localctx).r = match(ID);
			 ((K_subpartitionContext)_localctx).r->setType(((K_subpartitionContext)_localctx).r, T_RESERVED); ((K_subpartitionContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_theContext extends ParserRuleContext {
		public Token r;
		public K_theContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_the; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_the(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_the(this);
		}
	}

	public final K_theContext k_the() throws RecognitionException {
		K_theContext _localctx = new K_theContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_k_the);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4621);
			((K_theContext)_localctx).r = match(T__163);
			 ((K_theContext)_localctx).r->setType(((K_theContext)_localctx).r, T_RESERVED); ((K_theContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_timeContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_timeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_time; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_time(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_time(this);
		}
	}

	public final K_timeContext k_time() throws RecognitionException {
		K_timeContext _localctx = new K_timeContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_k_time);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4624);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "TIME")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"TIME\")) ");
			setState(4625);
			((K_timeContext)_localctx).r = match(ID);
			 ((K_timeContext)_localctx).r->setType(((K_timeContext)_localctx).r, T_RESERVED); ((K_timeContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_timestampContext extends ParserRuleContext {
		public Token r;
		public K_timestampContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_timestamp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_timestamp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_timestamp(this);
		}
	}

	public final K_timestampContext k_timestamp() throws RecognitionException {
		K_timestampContext _localctx = new K_timestampContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_k_timestamp);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4628);
			((K_timestampContext)_localctx).r = match(T__164);
			 ((K_timestampContext)_localctx).r->setType(((K_timestampContext)_localctx).r, T_RESERVED); ((K_timestampContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_timezone_hourContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_timezone_hourContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_timezone_hour; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_timezone_hour(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_timezone_hour(this);
		}
	}

	public final K_timezone_hourContext k_timezone_hour() throws RecognitionException {
		K_timezone_hourContext _localctx = new K_timezone_hourContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_k_timezone_hour);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4631);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "TIMEZONE_HOUR")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"TIMEZONE_HOUR\")) ");
			setState(4632);
			((K_timezone_hourContext)_localctx).r = match(ID);
			 ((K_timezone_hourContext)_localctx).r->setType(((K_timezone_hourContext)_localctx).r, T_RESERVED); ((K_timezone_hourContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_timezone_minuteContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_timezone_minuteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_timezone_minute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_timezone_minute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_timezone_minute(this);
		}
	}

	public final K_timezone_minuteContext k_timezone_minute() throws RecognitionException {
		K_timezone_minuteContext _localctx = new K_timezone_minuteContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_k_timezone_minute);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4635);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "TIMEZONE_MINUTE")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"TIMEZONE_MINUTE\")) ");
			setState(4636);
			((K_timezone_minuteContext)_localctx).r = match(ID);
			 ((K_timezone_minuteContext)_localctx).r->setType(((K_timezone_minuteContext)_localctx).r, T_RESERVED); ((K_timezone_minuteContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_timezone_regionContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_timezone_regionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_timezone_region; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_timezone_region(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_timezone_region(this);
		}
	}

	public final K_timezone_regionContext k_timezone_region() throws RecognitionException {
		K_timezone_regionContext _localctx = new K_timezone_regionContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_k_timezone_region);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4639);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "TIMEZONE_REGION")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"TIMEZONE_REGION\")) ");
			setState(4640);
			((K_timezone_regionContext)_localctx).r = match(ID);
			 ((K_timezone_regionContext)_localctx).r->setType(((K_timezone_regionContext)_localctx).r, T_RESERVED); ((K_timezone_regionContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_timezone_abbrContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_timezone_abbrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_timezone_abbr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_timezone_abbr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_timezone_abbr(this);
		}
	}

	public final K_timezone_abbrContext k_timezone_abbr() throws RecognitionException {
		K_timezone_abbrContext _localctx = new K_timezone_abbrContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_k_timezone_abbr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4643);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "TIMEZONE_ABBR")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"TIMEZONE_ABBR\")) ");
			setState(4644);
			((K_timezone_abbrContext)_localctx).r = match(ID);
			 ((K_timezone_abbrContext)_localctx).r->setType(((K_timezone_abbrContext)_localctx).r, T_RESERVED); ((K_timezone_abbrContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_toContext extends ParserRuleContext {
		public Token r;
		public K_toContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_to; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_to(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_to(this);
		}
	}

	public final K_toContext k_to() throws RecognitionException {
		K_toContext _localctx = new K_toContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_k_to);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4647);
			((K_toContext)_localctx).r = match(T__99);
			 ((K_toContext)_localctx).r->setType(((K_toContext)_localctx).r, T_RESERVED); ((K_toContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_trailingContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_trailingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_trailing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_trailing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_trailing(this);
		}
	}

	public final K_trailingContext k_trailing() throws RecognitionException {
		K_trailingContext _localctx = new K_trailingContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_k_trailing);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4650);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "TRAILING")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"TRAILING\")) ");
			setState(4651);
			((K_trailingContext)_localctx).r = match(ID);
			 ((K_trailingContext)_localctx).r->setType(((K_trailingContext)_localctx).r, T_RESERVED); ((K_trailingContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_trimContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_trimContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_trim; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_trim(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_trim(this);
		}
	}

	public final K_trimContext k_trim() throws RecognitionException {
		K_trimContext _localctx = new K_trimContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_k_trim);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4654);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "TRIM")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"TRIM\")) ");
			setState(4655);
			((K_trimContext)_localctx).r = match(ID);
			 ((K_trimContext)_localctx).r->setType(((K_trimContext)_localctx).r, T_RESERVED); ((K_trimContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_typeContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_type(this);
		}
	}

	public final K_typeContext k_type() throws RecognitionException {
		K_typeContext _localctx = new K_typeContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_k_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4658);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "TYPE")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"TYPE\")) ");
			setState(4659);
			((K_typeContext)_localctx).r = match(ID);
			 ((K_typeContext)_localctx).r->setType(((K_typeContext)_localctx).r, T_RESERVED); ((K_typeContext)_localctx).r->user1 = T_OPERATOR_PART;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_unboundedContext extends ParserRuleContext {
		public Token r;
		public K_unboundedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_unbounded; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_unbounded(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_unbounded(this);
		}
	}

	public final K_unboundedContext k_unbounded() throws RecognitionException {
		K_unboundedContext _localctx = new K_unboundedContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_k_unbounded);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4662);
			((K_unboundedContext)_localctx).r = match(T__165);
			 ((K_unboundedContext)_localctx).r->setType(((K_unboundedContext)_localctx).r, T_RESERVED); ((K_unboundedContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_under_pathContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_under_pathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_under_path; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_under_path(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_under_path(this);
		}
	}

	public final K_under_pathContext k_under_path() throws RecognitionException {
		K_under_pathContext _localctx = new K_under_pathContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_k_under_path);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4665);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "UNDER_PATH")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"UNDER_PATH\")) ");
			setState(4666);
			((K_under_pathContext)_localctx).r = match(ID);
			 ((K_under_pathContext)_localctx).r->setType(((K_under_pathContext)_localctx).r, T_RESERVED); ((K_under_pathContext)_localctx).r->user1 = T_OPERATOR_UNARY;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_unlimitedContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_unlimitedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_unlimited; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_unlimited(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_unlimited(this);
		}
	}

	public final K_unlimitedContext k_unlimited() throws RecognitionException {
		K_unlimitedContext _localctx = new K_unlimitedContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_k_unlimited);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4669);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "UNLIMITED")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"UNLIMITED\")) ");
			setState(4670);
			((K_unlimitedContext)_localctx).r = match(ID);
			 ((K_unlimitedContext)_localctx).r->setType(((K_unlimitedContext)_localctx).r, T_RESERVED); ((K_unlimitedContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_unpivotContext extends ParserRuleContext {
		public Token r;
		public K_unpivotContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_unpivot; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_unpivot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_unpivot(this);
		}
	}

	public final K_unpivotContext k_unpivot() throws RecognitionException {
		K_unpivotContext _localctx = new K_unpivotContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_k_unpivot);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4673);
			((K_unpivotContext)_localctx).r = match(T__166);
			 ((K_unpivotContext)_localctx).r->setType(((K_unpivotContext)_localctx).r, T_RESERVED); ((K_unpivotContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_untilContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_untilContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_until; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_until(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_until(this);
		}
	}

	public final K_untilContext k_until() throws RecognitionException {
		K_untilContext _localctx = new K_untilContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_k_until);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4676);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "UNTIL")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"UNTIL\")) ");
			setState(4677);
			((K_untilContext)_localctx).r = match(ID);
			 ((K_untilContext)_localctx).r->setType(((K_untilContext)_localctx).r, T_RESERVED); ((K_untilContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_updatedContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_updatedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_updated; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_updated(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_updated(this);
		}
	}

	public final K_updatedContext k_updated() throws RecognitionException {
		K_updatedContext _localctx = new K_updatedContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_k_updated);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4680);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "UPDATED")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"UPDATED\")) ");
			setState(4681);
			((K_updatedContext)_localctx).r = match(ID);
			 ((K_updatedContext)_localctx).r->setType(((K_updatedContext)_localctx).r, T_RESERVED); ((K_updatedContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_upsertContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_upsertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_upsert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_upsert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_upsert(this);
		}
	}

	public final K_upsertContext k_upsert() throws RecognitionException {
		K_upsertContext _localctx = new K_upsertContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_k_upsert);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4684);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "UPSERT")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"UPSERT\")) ");
			setState(4685);
			((K_upsertContext)_localctx).r = match(ID);
			 ((K_upsertContext)_localctx).r->setType(((K_upsertContext)_localctx).r, T_RESERVED); ((K_upsertContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_urowidContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_urowidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_urowid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_urowid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_urowid(this);
		}
	}

	public final K_urowidContext k_urowid() throws RecognitionException {
		K_urowidContext _localctx = new K_urowidContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_k_urowid);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4688);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "UROWID")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"UROWID\")) ");
			setState(4689);
			((K_urowidContext)_localctx).r = match(ID);
			 ((K_urowidContext)_localctx).r->setType(((K_urowidContext)_localctx).r, T_RESERVED); ((K_urowidContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_usingContext extends ParserRuleContext {
		public Token r;
		public K_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_using; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_using(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_using(this);
		}
	}

	public final K_usingContext k_using() throws RecognitionException {
		K_usingContext _localctx = new K_usingContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_k_using);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4692);
			((K_usingContext)_localctx).r = match(T__167);
			 ((K_usingContext)_localctx).r->setType(((K_usingContext)_localctx).r, T_RESERVED); ((K_usingContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_valueContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_value(this);
		}
	}

	public final K_valueContext k_value() throws RecognitionException {
		K_valueContext _localctx = new K_valueContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_k_value);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4695);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "VALUE")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"VALUE\")) ");
			setState(4696);
			((K_valueContext)_localctx).r = match(ID);
			 ((K_valueContext)_localctx).r->setType(((K_valueContext)_localctx).r, T_RESERVED); ((K_valueContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_varyingContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_varyingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_varying; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_varying(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_varying(this);
		}
	}

	public final K_varyingContext k_varying() throws RecognitionException {
		K_varyingContext _localctx = new K_varyingContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_k_varying);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4699);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "VARYING")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"VARYING\")) ");
			setState(4700);
			((K_varyingContext)_localctx).r = match(ID);
			 ((K_varyingContext)_localctx).r->setType(((K_varyingContext)_localctx).r, T_RESERVED); ((K_varyingContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_versionsContext extends ParserRuleContext {
		public Token r;
		public K_versionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_versions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_versions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_versions(this);
		}
	}

	public final K_versionsContext k_versions() throws RecognitionException {
		K_versionsContext _localctx = new K_versionsContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_k_versions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4703);
			((K_versionsContext)_localctx).r = match(T__168);
			 ((K_versionsContext)_localctx).r->setType(((K_versionsContext)_localctx).r, T_RESERVED); ((K_versionsContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_waitContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_waitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_wait; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_wait(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_wait(this);
		}
	}

	public final K_waitContext k_wait() throws RecognitionException {
		K_waitContext _localctx = new K_waitContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_k_wait);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4706);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "WAIT")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"WAIT\")) ");
			setState(4707);
			((K_waitContext)_localctx).r = match(ID);
			 ((K_waitContext)_localctx).r->setType(((K_waitContext)_localctx).r, T_RESERVED); ((K_waitContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_whenContext extends ParserRuleContext {
		public Token r;
		public K_whenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_when; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_when(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_when(this);
		}
	}

	public final K_whenContext k_when() throws RecognitionException {
		K_whenContext _localctx = new K_whenContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_k_when);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4710);
			((K_whenContext)_localctx).r = match(T__169);
			 ((K_whenContext)_localctx).r->setType(((K_whenContext)_localctx).r, T_RESERVED); ((K_whenContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_withinContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_withinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_within; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_within(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_within(this);
		}
	}

	public final K_withinContext k_within() throws RecognitionException {
		K_withinContext _localctx = new K_withinContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_k_within);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4713);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "WITHIN")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"WITHIN\")) ");
			setState(4714);
			((K_withinContext)_localctx).r = match(ID);
			 ((K_withinContext)_localctx).r->setType(((K_withinContext)_localctx).r, T_RESERVED); ((K_withinContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_xmlContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_xmlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_xml; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_xml(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_xml(this);
		}
	}

	public final K_xmlContext k_xml() throws RecognitionException {
		K_xmlContext _localctx = new K_xmlContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_k_xml);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4717);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "XML")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"XML\")) ");
			setState(4718);
			((K_xmlContext)_localctx).r = match(ID);
			 ((K_xmlContext)_localctx).r->setType(((K_xmlContext)_localctx).r, T_RESERVED); ((K_xmlContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_yearContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_yearContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_year; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_year(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_year(this);
		}
	}

	public final K_yearContext k_year() throws RecognitionException {
		K_yearContext _localctx = new K_yearContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_k_year);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4721);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "YEAR")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"YEAR\")) ");
			setState(4722);
			((K_yearContext)_localctx).r = match(ID);
			 ((K_yearContext)_localctx).r->setType(((K_yearContext)_localctx).r, T_RESERVED); ((K_yearContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class K_zoneContext extends ParserRuleContext {
		public Token r;
		public TerminalNode ID() { return getToken(OracleSQLParser.ID, 0); }
		public K_zoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_k_zone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterK_zone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitK_zone(this);
		}
	}

	public final K_zoneContext k_zone() throws RecognitionException {
		K_zoneContext _localctx = new K_zoneContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_k_zone);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4725);
			if (!( !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "ZONE")) )) throw new FailedPredicateException(this, " !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, \"ZONE\")) ");
			setState(4726);
			((K_zoneContext)_localctx).r = match(ID);
			 ((K_zoneContext)_localctx).r->setType(((K_zoneContext)_localctx).r, T_RESERVED); ((K_zoneContext)_localctx).r->user1 = T_RESERVED;  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeywordContext extends ParserRuleContext {
		public int identifierClass;
		public int usageType;
		public Token k;
		public KeywordContext(ParserRuleContext parent, int invokingState) { super(parent, invokingState); }
		public KeywordContext(ParserRuleContext parent, int invokingState, int identifierClass, int usageType) {
			super(parent, invokingState);
			this.identifierClass = identifierClass;
			this.usageType = usageType;
		}
		@Override public int getRuleIndex() { return RULE_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitKeyword(this);
		}
	}

	public final KeywordContext keyword(int identifierClass,int usageType) throws RecognitionException {
		KeywordContext _localctx = new KeywordContext(_ctx, getState(), identifierClass, usageType);
		enterRule(_localctx, 932, RULE_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4729);
			((KeywordContext)_localctx).k = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==T__12 || ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (T__115 - 116)) | (1L << (T__119 - 116)) | (1L << (T__120 - 116)) | (1L << (T__122 - 116)) | (1L << (T__125 - 116)) | (1L << (T__126 - 116)) | (1L << (T__127 - 116)) | (1L << (T__130 - 116)) | (1L << (T__132 - 116)) | (1L << (T__133 - 116)) | (1L << (T__135 - 116)) | (1L << (T__137 - 116)) | (1L << (T__138 - 116)) | (1L << (T__139 - 116)) | (1L << (T__141 - 116)) | (1L << (T__144 - 116)) | (1L << (T__146 - 116)) | (1L << (T__147 - 116)) | (1L << (T__149 - 116)) | (1L << (T__152 - 116)) | (1L << (T__154 - 116)) | (1L << (T__157 - 116)) | (1L << (T__158 - 116)) | (1L << (T__161 - 116)) | (1L << (T__164 - 116)) | (1L << (T__166 - 116)) | (1L << (T__169 - 116)))) != 0)) ) {
				((KeywordContext)_localctx).k = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			 ((KeywordContext)_localctx).k->user1 = identifierClass; ((KeywordContext)_localctx).k->user2 = usageType; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quoted_stringContext extends ParserRuleContext {
		public TerminalNode QUOTED_STRING() { return getToken(OracleSQLParser.QUOTED_STRING, 0); }
		public TerminalNode QSTRING() { return getToken(OracleSQLParser.QSTRING, 0); }
		public Quoted_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quoted_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterQuoted_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitQuoted_string(this);
		}
	}

	public final Quoted_stringContext quoted_string() throws RecognitionException {
		Quoted_stringContext _localctx = new Quoted_stringContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_quoted_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4732);
			_la = _input.LA(1);
			if ( !(_la==QUOTED_STRING || _la==QSTRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoublevertbarContext extends ParserRuleContext {
		public TerminalNode DOUBLEVERTBAR() { return getToken(OracleSQLParser.DOUBLEVERTBAR, 0); }
		public List<TerminalNode> VERTBAR() { return getTokens(OracleSQLParser.VERTBAR); }
		public TerminalNode VERTBAR(int i) {
			return getToken(OracleSQLParser.VERTBAR, i);
		}
		public DoublevertbarContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doublevertbar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterDoublevertbar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitDoublevertbar(this);
		}
	}

	public final DoublevertbarContext doublevertbar() throws RecognitionException {
		DoublevertbarContext _localctx = new DoublevertbarContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_doublevertbar);
		try {
			setState(4737);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOUBLEVERTBAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4734);
				match(DOUBLEVERTBAR);
				}
				break;
			case VERTBAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4735);
				match(VERTBAR);
				setState(4736);
				match(VERTBAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Not_equalContext extends ParserRuleContext {
		public TerminalNode NOT_EQ() { return getToken(OracleSQLParser.NOT_EQ, 0); }
		public TerminalNode LTH() { return getToken(OracleSQLParser.LTH, 0); }
		public TerminalNode GTH() { return getToken(OracleSQLParser.GTH, 0); }
		public TerminalNode EQ() { return getToken(OracleSQLParser.EQ, 0); }
		public Not_equalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_not_equal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterNot_equal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitNot_equal(this);
		}
	}

	public final Not_equalContext not_equal() throws RecognitionException {
		Not_equalContext _localctx = new Not_equalContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_not_equal);
		try {
			setState(4746);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT_EQ:
				enterOuterAlt(_localctx, 1);
				{
				setState(4739);
				match(NOT_EQ);
				}
				break;
			case LTH:
				enterOuterAlt(_localctx, 2);
				{
				setState(4740);
				match(LTH);
				setState(4741);
				match(GTH);
				}
				break;
			case T__170:
				enterOuterAlt(_localctx, 3);
				{
				setState(4742);
				match(T__170);
				setState(4743);
				match(EQ);
				}
				break;
			case T__171:
				enterOuterAlt(_localctx, 4);
				{
				setState(4744);
				match(T__171);
				setState(4745);
				match(EQ);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LeqContext extends ParserRuleContext {
		public TerminalNode LEQ() { return getToken(OracleSQLParser.LEQ, 0); }
		public TerminalNode LTH() { return getToken(OracleSQLParser.LTH, 0); }
		public TerminalNode EQ() { return getToken(OracleSQLParser.EQ, 0); }
		public LeqContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leq; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterLeq(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitLeq(this);
		}
	}

	public final LeqContext leq() throws RecognitionException {
		LeqContext _localctx = new LeqContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_leq);
		try {
			setState(4751);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEQ:
				enterOuterAlt(_localctx, 1);
				{
				setState(4748);
				match(LEQ);
				}
				break;
			case LTH:
				enterOuterAlt(_localctx, 2);
				{
				setState(4749);
				match(LTH);
				setState(4750);
				match(EQ);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GeqContext extends ParserRuleContext {
		public TerminalNode GEQ() { return getToken(OracleSQLParser.GEQ, 0); }
		public TerminalNode GTH() { return getToken(OracleSQLParser.GTH, 0); }
		public TerminalNode EQ() { return getToken(OracleSQLParser.EQ, 0); }
		public GeqContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_geq; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).enterGeq(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLListener ) ((OracleSQLListener)listener).exitGeq(this);
		}
	}

	public final GeqContext geq() throws RecognitionException {
		GeqContext _localctx = new GeqContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_geq);
		try {
			setState(4756);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GEQ:
				enterOuterAlt(_localctx, 1);
				{
				setState(4753);
				match(GEQ);
				}
				break;
			case GTH:
				enterOuterAlt(_localctx, 2);
				{
				setState(4754);
				match(GTH);
				setState(4755);
				match(EQ);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 309:
			return k_a_sempred((K_aContext)_localctx, predIndex);
		case 311:
			return k_automatic_sempred((K_automaticContext)_localctx, predIndex);
		case 312:
			return k_bfile_sempred((K_bfileContext)_localctx, predIndex);
		case 313:
			return k_binary_double_sempred((K_binary_doubleContext)_localctx, predIndex);
		case 314:
			return k_binary_float_sempred((K_binary_floatContext)_localctx, predIndex);
		case 315:
			return k_binary_integer_sempred((K_binary_integerContext)_localctx, predIndex);
		case 316:
			return k_blob_sempred((K_blobContext)_localctx, predIndex);
		case 317:
			return k_block_sempred((K_blockContext)_localctx, predIndex);
		case 318:
			return k_boolean_sempred((K_booleanContext)_localctx, predIndex);
		case 319:
			return k_both_sempred((K_bothContext)_localctx, predIndex);
		case 320:
			return k_breadth_sempred((K_breadthContext)_localctx, predIndex);
		case 321:
			return k_byte_sempred((K_byteContext)_localctx, predIndex);
		case 323:
			return k_character_sempred((K_characterContext)_localctx, predIndex);
		case 324:
			return k_clob_sempred((K_clobContext)_localctx, predIndex);
		case 327:
			return k_constraint_sempred((K_constraintContext)_localctx, predIndex);
		case 329:
			return k_cross_sempred((K_crossContext)_localctx, predIndex);
		case 333:
			return k_day_sempred((K_dayContext)_localctx, predIndex);
		case 334:
			return k_dbtimezone_sempred((K_dbtimezoneContext)_localctx, predIndex);
		case 335:
			return k_dec_sempred((K_decContext)_localctx, predIndex);
		case 336:
			return k_decrement_sempred((K_decrementContext)_localctx, predIndex);
		case 337:
			return k_dense_rank_sempred((K_dense_rankContext)_localctx, predIndex);
		case 338:
			return k_depth_sempred((K_depthContext)_localctx, predIndex);
		case 340:
			return k_double_sempred((K_doubleContext)_localctx, predIndex);
		case 341:
			return k_empty_sempred((K_emptyContext)_localctx, predIndex);
		case 343:
			return k_equals_path_sempred((K_equals_pathContext)_localctx, predIndex);
		case 344:
			return k_errors_sempred((K_errorsContext)_localctx, predIndex);
		case 346:
			return k_exclude_sempred((K_excludeContext)_localctx, predIndex);
		case 352:
			return k_hour_sempred((K_hourContext)_localctx, predIndex);
		case 354:
			return k_include_sempred((K_includeContext)_localctx, predIndex);
		case 356:
			return k_inner_sempred((K_innerContext)_localctx, predIndex);
		case 357:
			return k_int_sempred((K_intContext)_localctx, predIndex);
		case 359:
			return k_iterate_sempred((K_iterateContext)_localctx, predIndex);
		case 361:
			return k_keep_sempred((K_keepContext)_localctx, predIndex);
		case 363:
			return k_leading_sempred((K_leadingContext)_localctx, predIndex);
		case 368:
			return k_limit_sempred((K_limitContext)_localctx, predIndex);
		case 369:
			return k_listagg_sempred((K_listaggContext)_localctx, predIndex);
		case 370:
			return k_lnnvl_sempred((K_lnnvlContext)_localctx, predIndex);
		case 371:
			return k_local_sempred((K_localContext)_localctx, predIndex);
		case 372:
			return k_locked_sempred((K_lockedContext)_localctx, predIndex);
		case 373:
			return k_log_sempred((K_logContext)_localctx, predIndex);
		case 375:
			return k_matched_sempred((K_matchedContext)_localctx, predIndex);
		case 376:
			return k_maxvalue_sempred((K_maxvalueContext)_localctx, predIndex);
		case 377:
			return k_measures_sempred((K_measuresContext)_localctx, predIndex);
		case 379:
			return k_merge_sempred((K_mergeContext)_localctx, predIndex);
		case 380:
			return k_minute_sempred((K_minuteContext)_localctx, predIndex);
		case 381:
			return k_mivalue_sempred((K_mivalueContext)_localctx, predIndex);
		case 382:
			return k_mlslabel_sempred((K_mlslabelContext)_localctx, predIndex);
		case 383:
			return k_model_sempred((K_modelContext)_localctx, predIndex);
		case 384:
			return k_month_sempred((K_monthContext)_localctx, predIndex);
		case 387:
			return k_national_sempred((K_nationalContext)_localctx, predIndex);
		case 388:
			return k_natural_sempred((K_naturalContext)_localctx, predIndex);
		case 390:
			return k_nchar_sempred((K_ncharContext)_localctx, predIndex);
		case 391:
			return k_nclob_sempred((K_nclobContext)_localctx, predIndex);
		case 392:
			return k_nocycle_sempred((K_nocycleContext)_localctx, predIndex);
		case 394:
			return k_numeric_sempred((K_numericContext)_localctx, predIndex);
		case 395:
			return k_nvarchar_sempred((K_nvarcharContext)_localctx, predIndex);
		case 396:
			return k_nvarchar2_sempred((K_nvarchar2Context)_localctx, predIndex);
		case 397:
			return k_only_sempred((K_onlyContext)_localctx, predIndex);
		case 399:
			return k_over_sempred((K_overContext)_localctx, predIndex);
		case 401:
			return k_percent_rank_sempred((K_percent_rankContext)_localctx, predIndex);
		case 402:
			return k_percentile_cont_sempred((K_percentile_contContext)_localctx, predIndex);
		case 403:
			return k_percentile_disc_sempred((K_percentile_discContext)_localctx, predIndex);
		case 405:
			return k_pls_integer_sempred((K_pls_integerContext)_localctx, predIndex);
		case 406:
			return k_positive_sempred((K_positiveContext)_localctx, predIndex);
		case 408:
			return k_precision_sempred((K_precisionContext)_localctx, predIndex);
		case 409:
			return k_present_sempred((K_presentContext)_localctx, predIndex);
		case 411:
			return k_read_sempred((K_readContext)_localctx, predIndex);
		case 412:
			return k_real_sempred((K_realContext)_localctx, predIndex);
		case 414:
			return k_regexp_like_sempred((K_regexp_likeContext)_localctx, predIndex);
		case 415:
			return k_reject_sempred((K_rejectContext)_localctx, predIndex);
		case 421:
			return k_rules_sempred((K_rulesContext)_localctx, predIndex);
		case 422:
			return k_sample_sempred((K_sampleContext)_localctx, predIndex);
		case 423:
			return k_scn_sempred((K_scnContext)_localctx, predIndex);
		case 425:
			return k_second_sempred((K_secondContext)_localctx, predIndex);
		case 426:
			return k_seed_sempred((K_seedContext)_localctx, predIndex);
		case 427:
			return k_sequential_sempred((K_sequentialContext)_localctx, predIndex);
		case 428:
			return k_sessiontimezone_sempred((K_sessiontimezoneContext)_localctx, predIndex);
		case 430:
			return k_siblings_sempred((K_siblingsContext)_localctx, predIndex);
		case 431:
			return k_single_sempred((K_singleContext)_localctx, predIndex);
		case 432:
			return k_skip_sempred((K_skipContext)_localctx, predIndex);
		case 436:
			return k_subpartition_sempred((K_subpartitionContext)_localctx, predIndex);
		case 438:
			return k_time_sempred((K_timeContext)_localctx, predIndex);
		case 440:
			return k_timezone_hour_sempred((K_timezone_hourContext)_localctx, predIndex);
		case 441:
			return k_timezone_minute_sempred((K_timezone_minuteContext)_localctx, predIndex);
		case 442:
			return k_timezone_region_sempred((K_timezone_regionContext)_localctx, predIndex);
		case 443:
			return k_timezone_abbr_sempred((K_timezone_abbrContext)_localctx, predIndex);
		case 445:
			return k_trailing_sempred((K_trailingContext)_localctx, predIndex);
		case 446:
			return k_trim_sempred((K_trimContext)_localctx, predIndex);
		case 447:
			return k_type_sempred((K_typeContext)_localctx, predIndex);
		case 449:
			return k_under_path_sempred((K_under_pathContext)_localctx, predIndex);
		case 450:
			return k_unlimited_sempred((K_unlimitedContext)_localctx, predIndex);
		case 452:
			return k_until_sempred((K_untilContext)_localctx, predIndex);
		case 453:
			return k_updated_sempred((K_updatedContext)_localctx, predIndex);
		case 454:
			return k_upsert_sempred((K_upsertContext)_localctx, predIndex);
		case 455:
			return k_urowid_sempred((K_urowidContext)_localctx, predIndex);
		case 457:
			return k_value_sempred((K_valueContext)_localctx, predIndex);
		case 458:
			return k_varying_sempred((K_varyingContext)_localctx, predIndex);
		case 460:
			return k_wait_sempred((K_waitContext)_localctx, predIndex);
		case 462:
			return k_within_sempred((K_withinContext)_localctx, predIndex);
		case 463:
			return k_xml_sempred((K_xmlContext)_localctx, predIndex);
		case 464:
			return k_year_sempred((K_yearContext)_localctx, predIndex);
		case 465:
			return k_zone_sempred((K_zoneContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean k_a_sempred(K_aContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "A")) ;
		}
		return true;
	}
	private boolean k_automatic_sempred(K_automaticContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "AUTOMATIC")) ;
		}
		return true;
	}
	private boolean k_bfile_sempred(K_bfileContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "BFILE")) ;
		}
		return true;
	}
	private boolean k_binary_double_sempred(K_binary_doubleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "BINARY_DOUBLE")) ;
		}
		return true;
	}
	private boolean k_binary_float_sempred(K_binary_floatContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "BINARY_FLOAT")) ;
		}
		return true;
	}
	private boolean k_binary_integer_sempred(K_binary_integerContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "BINARY_INTEGER")) ;
		}
		return true;
	}
	private boolean k_blob_sempred(K_blobContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "BLOB")) ;
		}
		return true;
	}
	private boolean k_block_sempred(K_blockContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "BLOCK")) ;
		}
		return true;
	}
	private boolean k_boolean_sempred(K_booleanContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "BOOLEAN")) ;
		}
		return true;
	}
	private boolean k_both_sempred(K_bothContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "BOTH")) ;
		}
		return true;
	}
	private boolean k_breadth_sempred(K_breadthContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "BREADTH")) ;
		}
		return true;
	}
	private boolean k_byte_sempred(K_byteContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "BYTE")) ;
		}
		return true;
	}
	private boolean k_character_sempred(K_characterContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "CHARACTER")) ;
		}
		return true;
	}
	private boolean k_clob_sempred(K_clobContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "CLOB")) ;
		}
		return true;
	}
	private boolean k_constraint_sempred(K_constraintContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "CONSTRAINT")) ;
		}
		return true;
	}
	private boolean k_cross_sempred(K_crossContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "CROSS")) ;
		}
		return true;
	}
	private boolean k_day_sempred(K_dayContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "DAY")) ;
		}
		return true;
	}
	private boolean k_dbtimezone_sempred(K_dbtimezoneContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "DBTIMEZONE")) ;
		}
		return true;
	}
	private boolean k_dec_sempred(K_decContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "DEC")) ;
		}
		return true;
	}
	private boolean k_decrement_sempred(K_decrementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "DECREMENT")) ;
		}
		return true;
	}
	private boolean k_dense_rank_sempred(K_dense_rankContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "DENSE_RANK")) ;
		}
		return true;
	}
	private boolean k_depth_sempred(K_depthContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "DEPTH")) ;
		}
		return true;
	}
	private boolean k_double_sempred(K_doubleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "DOUBLE")) ;
		}
		return true;
	}
	private boolean k_empty_sempred(K_emptyContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "EMPTY")) ;
		}
		return true;
	}
	private boolean k_equals_path_sempred(K_equals_pathContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "EQUALS_PATH")) ;
		}
		return true;
	}
	private boolean k_errors_sempred(K_errorsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "ERRORS")) ;
		}
		return true;
	}
	private boolean k_exclude_sempred(K_excludeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 26:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "EXCLUDE")) ;
		}
		return true;
	}
	private boolean k_hour_sempred(K_hourContext _localctx, int predIndex) {
		switch (predIndex) {
		case 27:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "HOUR")) ;
		}
		return true;
	}
	private boolean k_include_sempred(K_includeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 28:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "INCLUDE")) ;
		}
		return true;
	}
	private boolean k_inner_sempred(K_innerContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "INNER")) ;
		}
		return true;
	}
	private boolean k_int_sempred(K_intContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "INT")) ;
		}
		return true;
	}
	private boolean k_iterate_sempred(K_iterateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "ITERATE")) ;
		}
		return true;
	}
	private boolean k_keep_sempred(K_keepContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "KEEP")) ;
		}
		return true;
	}
	private boolean k_leading_sempred(K_leadingContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "LEADING")) ;
		}
		return true;
	}
	private boolean k_limit_sempred(K_limitContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "LIMIT")) ;
		}
		return true;
	}
	private boolean k_listagg_sempred(K_listaggContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "LISTAGG")) ;
		}
		return true;
	}
	private boolean k_lnnvl_sempred(K_lnnvlContext _localctx, int predIndex) {
		switch (predIndex) {
		case 36:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "LNNVL")) ;
		}
		return true;
	}
	private boolean k_local_sempred(K_localContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "LOCAL")) ;
		}
		return true;
	}
	private boolean k_locked_sempred(K_lockedContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "LOCKED")) ;
		}
		return true;
	}
	private boolean k_log_sempred(K_logContext _localctx, int predIndex) {
		switch (predIndex) {
		case 39:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "LOG"   )) ;
		}
		return true;
	}
	private boolean k_matched_sempred(K_matchedContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "MATCHED")) ;
		}
		return true;
	}
	private boolean k_maxvalue_sempred(K_maxvalueContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "MAXVALUE")) ;
		}
		return true;
	}
	private boolean k_measures_sempred(K_measuresContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "MEASURES")) ;
		}
		return true;
	}
	private boolean k_merge_sempred(K_mergeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 43:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "MERGE")) ;
		}
		return true;
	}
	private boolean k_minute_sempred(K_minuteContext _localctx, int predIndex) {
		switch (predIndex) {
		case 44:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "MINUTE")) ;
		}
		return true;
	}
	private boolean k_mivalue_sempred(K_mivalueContext _localctx, int predIndex) {
		switch (predIndex) {
		case 45:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "MIVALUE")) ;
		}
		return true;
	}
	private boolean k_mlslabel_sempred(K_mlslabelContext _localctx, int predIndex) {
		switch (predIndex) {
		case 46:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "MLSLABEL")) ;
		}
		return true;
	}
	private boolean k_model_sempred(K_modelContext _localctx, int predIndex) {
		switch (predIndex) {
		case 47:
			return 
		    !(strcasecmp((const char*)LT(2)->getText(LT(2))->chars, "MAIN")) ||
		    !(strcasecmp((const char*)LT(2)->getText(LT(2))->chars, "PARTITION")) ||
		    !(strcasecmp((const char*)LT(2)->getText(LT(2))->chars, "DIMENSION"))
		   ;
		}
		return true;
	}
	private boolean k_month_sempred(K_monthContext _localctx, int predIndex) {
		switch (predIndex) {
		case 48:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "MONTH")) ;
		}
		return true;
	}
	private boolean k_national_sempred(K_nationalContext _localctx, int predIndex) {
		switch (predIndex) {
		case 49:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "NATIONAL")) ;
		}
		return true;
	}
	private boolean k_natural_sempred(K_naturalContext _localctx, int predIndex) {
		switch (predIndex) {
		case 50:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "NATURAL")) ;
		}
		return true;
	}
	private boolean k_nchar_sempred(K_ncharContext _localctx, int predIndex) {
		switch (predIndex) {
		case 51:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "NCHAR")) ;
		}
		return true;
	}
	private boolean k_nclob_sempred(K_nclobContext _localctx, int predIndex) {
		switch (predIndex) {
		case 52:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "NCLOB")) ;
		}
		return true;
	}
	private boolean k_nocycle_sempred(K_nocycleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "NOCYCLE")) ;
		}
		return true;
	}
	private boolean k_numeric_sempred(K_numericContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "NUMERIC")) ;
		}
		return true;
	}
	private boolean k_nvarchar_sempred(K_nvarcharContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "NVARCHAR")) ;
		}
		return true;
	}
	private boolean k_nvarchar2_sempred(K_nvarchar2Context _localctx, int predIndex) {
		switch (predIndex) {
		case 56:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "NVARCHAR2")) ;
		}
		return true;
	}
	private boolean k_only_sempred(K_onlyContext _localctx, int predIndex) {
		switch (predIndex) {
		case 57:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "ONLY")) ;
		}
		return true;
	}
	private boolean k_over_sempred(K_overContext _localctx, int predIndex) {
		switch (predIndex) {
		case 58:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "OVER")) ;
		}
		return true;
	}
	private boolean k_percent_rank_sempred(K_percent_rankContext _localctx, int predIndex) {
		switch (predIndex) {
		case 59:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "PERCENT_RANK")) ;
		}
		return true;
	}
	private boolean k_percentile_cont_sempred(K_percentile_contContext _localctx, int predIndex) {
		switch (predIndex) {
		case 60:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "PERCENTILE_CONT")) ;
		}
		return true;
	}
	private boolean k_percentile_disc_sempred(K_percentile_discContext _localctx, int predIndex) {
		switch (predIndex) {
		case 61:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "PERCENTILE_DISC")) ;
		}
		return true;
	}
	private boolean k_pls_integer_sempred(K_pls_integerContext _localctx, int predIndex) {
		switch (predIndex) {
		case 62:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "PLS_INTEGER")) ;
		}
		return true;
	}
	private boolean k_positive_sempred(K_positiveContext _localctx, int predIndex) {
		switch (predIndex) {
		case 63:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "POSITIVE")) ;
		}
		return true;
	}
	private boolean k_precision_sempred(K_precisionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 64:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "PRECISION")) ;
		}
		return true;
	}
	private boolean k_present_sempred(K_presentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 65:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "PRESENT")) ;
		}
		return true;
	}
	private boolean k_read_sempred(K_readContext _localctx, int predIndex) {
		switch (predIndex) {
		case 66:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "READ")) ;
		}
		return true;
	}
	private boolean k_real_sempred(K_realContext _localctx, int predIndex) {
		switch (predIndex) {
		case 67:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "REAL")) ;
		}
		return true;
	}
	private boolean k_regexp_like_sempred(K_regexp_likeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 68:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "REGEXP_LIKE")) ;
		}
		return true;
	}
	private boolean k_reject_sempred(K_rejectContext _localctx, int predIndex) {
		switch (predIndex) {
		case 69:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "REJECT")) ;
		}
		return true;
	}
	private boolean k_rules_sempred(K_rulesContext _localctx, int predIndex) {
		switch (predIndex) {
		case 70:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "RULES")) ;
		}
		return true;
	}
	private boolean k_sample_sempred(K_sampleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 71:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "SAMPLE")) ;
		}
		return true;
	}
	private boolean k_scn_sempred(K_scnContext _localctx, int predIndex) {
		switch (predIndex) {
		case 72:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "SCN")) ;
		}
		return true;
	}
	private boolean k_second_sempred(K_secondContext _localctx, int predIndex) {
		switch (predIndex) {
		case 73:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "SECOND")) ;
		}
		return true;
	}
	private boolean k_seed_sempred(K_seedContext _localctx, int predIndex) {
		switch (predIndex) {
		case 74:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "SEED")) ;
		}
		return true;
	}
	private boolean k_sequential_sempred(K_sequentialContext _localctx, int predIndex) {
		switch (predIndex) {
		case 75:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "SEQUENTIAL")) ;
		}
		return true;
	}
	private boolean k_sessiontimezone_sempred(K_sessiontimezoneContext _localctx, int predIndex) {
		switch (predIndex) {
		case 76:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "SESSIONTIMEZONE")) ;
		}
		return true;
	}
	private boolean k_siblings_sempred(K_siblingsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 77:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "SIBLINGS")) ;
		}
		return true;
	}
	private boolean k_single_sempred(K_singleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 78:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "SINGLE")) ;
		}
		return true;
	}
	private boolean k_skip_sempred(K_skipContext _localctx, int predIndex) {
		switch (predIndex) {
		case 79:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "SKIP")) ;
		}
		return true;
	}
	private boolean k_subpartition_sempred(K_subpartitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 80:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "SUBPARTITION")) ;
		}
		return true;
	}
	private boolean k_time_sempred(K_timeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 81:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "TIME")) ;
		}
		return true;
	}
	private boolean k_timezone_hour_sempred(K_timezone_hourContext _localctx, int predIndex) {
		switch (predIndex) {
		case 82:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "TIMEZONE_HOUR")) ;
		}
		return true;
	}
	private boolean k_timezone_minute_sempred(K_timezone_minuteContext _localctx, int predIndex) {
		switch (predIndex) {
		case 83:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "TIMEZONE_MINUTE")) ;
		}
		return true;
	}
	private boolean k_timezone_region_sempred(K_timezone_regionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 84:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "TIMEZONE_REGION")) ;
		}
		return true;
	}
	private boolean k_timezone_abbr_sempred(K_timezone_abbrContext _localctx, int predIndex) {
		switch (predIndex) {
		case 85:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "TIMEZONE_ABBR")) ;
		}
		return true;
	}
	private boolean k_trailing_sempred(K_trailingContext _localctx, int predIndex) {
		switch (predIndex) {
		case 86:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "TRAILING")) ;
		}
		return true;
	}
	private boolean k_trim_sempred(K_trimContext _localctx, int predIndex) {
		switch (predIndex) {
		case 87:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "TRIM")) ;
		}
		return true;
	}
	private boolean k_type_sempred(K_typeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 88:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "TYPE")) ;
		}
		return true;
	}
	private boolean k_under_path_sempred(K_under_pathContext _localctx, int predIndex) {
		switch (predIndex) {
		case 89:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "UNDER_PATH")) ;
		}
		return true;
	}
	private boolean k_unlimited_sempred(K_unlimitedContext _localctx, int predIndex) {
		switch (predIndex) {
		case 90:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "UNLIMITED")) ;
		}
		return true;
	}
	private boolean k_until_sempred(K_untilContext _localctx, int predIndex) {
		switch (predIndex) {
		case 91:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "UNTIL")) ;
		}
		return true;
	}
	private boolean k_updated_sempred(K_updatedContext _localctx, int predIndex) {
		switch (predIndex) {
		case 92:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "UPDATED")) ;
		}
		return true;
	}
	private boolean k_upsert_sempred(K_upsertContext _localctx, int predIndex) {
		switch (predIndex) {
		case 93:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "UPSERT")) ;
		}
		return true;
	}
	private boolean k_urowid_sempred(K_urowidContext _localctx, int predIndex) {
		switch (predIndex) {
		case 94:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "UROWID")) ;
		}
		return true;
	}
	private boolean k_value_sempred(K_valueContext _localctx, int predIndex) {
		switch (predIndex) {
		case 95:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "VALUE")) ;
		}
		return true;
	}
	private boolean k_varying_sempred(K_varyingContext _localctx, int predIndex) {
		switch (predIndex) {
		case 96:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "VARYING")) ;
		}
		return true;
	}
	private boolean k_wait_sempred(K_waitContext _localctx, int predIndex) {
		switch (predIndex) {
		case 97:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "WAIT")) ;
		}
		return true;
	}
	private boolean k_within_sempred(K_withinContext _localctx, int predIndex) {
		switch (predIndex) {
		case 98:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "WITHIN")) ;
		}
		return true;
	}
	private boolean k_xml_sempred(K_xmlContext _localctx, int predIndex) {
		switch (predIndex) {
		case 99:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "XML")) ;
		}
		return true;
	}
	private boolean k_year_sempred(K_yearContext _localctx, int predIndex) {
		switch (predIndex) {
		case 100:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "YEAR")) ;
		}
		return true;
	}
	private boolean k_zone_sempred(K_zoneContext _localctx, int predIndex) {
		switch (predIndex) {
		case 101:
			return  !(strcasecmp((const char*)LT(1)->getText(LT(1))->chars, "ZONE")) ;
		}
		return true;
	}

	private static final int _serializedATNSegments = 2;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0110\u1299\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2\t\u01b2"+
		"\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7"+
		"\t\u01b7\4\u01b8\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb"+
		"\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0"+
		"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3\4\u01c4\t\u01c4"+
		"\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9"+
		"\t\u01c9\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd"+
		"\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1\4\u01d2"+
		"\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6"+
		"\4\u01d7\t\u01d7\4\u01d8\t\u01d8\4\u01d9\t\u01d9\3\2\3\2\3\2\3\2\3\2\5"+
		"\2\u03b8\n\2\3\2\3\2\3\3\3\3\5\3\u03be\n\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3"+
		"\u03c6\n\3\3\3\5\3\u03c9\n\3\3\3\5\3\u03cc\n\3\3\3\5\3\u03cf\n\3\3\3\5"+
		"\3\u03d2\n\3\3\4\3\4\3\4\3\4\3\4\5\4\u03d9\n\4\3\4\3\4\5\4\u03dd\n\4\3"+
		"\4\3\4\3\4\3\4\3\4\5\4\u03e4\n\4\3\4\5\4\u03e7\n\4\3\4\5\4\u03ea\n\4\3"+
		"\4\3\4\3\4\3\4\3\4\3\4\5\4\u03f2\n\4\3\4\3\4\5\4\u03f6\n\4\5\4\u03f8\n"+
		"\4\3\4\5\4\u03fb\n\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0406\n\5"+
		"\3\5\3\5\3\5\3\5\3\5\5\5\u040d\n\5\7\5\u040f\n\5\f\5\16\5\u0412\13\5\3"+
		"\5\5\5\u0415\n\5\3\5\3\5\3\5\5\5\u041a\n\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6"+
		"\3\6\3\6\5\6\u0425\n\6\3\6\3\6\3\6\3\6\5\6\u042b\n\6\3\6\3\6\3\6\5\6\u0430"+
		"\n\6\7\6\u0432\n\6\f\6\16\6\u0435\13\6\3\6\3\6\5\6\u0439\n\6\3\7\3\7\3"+
		"\7\5\7\u043e\n\7\3\b\3\b\3\b\5\b\u0443\n\b\3\b\3\b\5\b\u0447\n\b\3\b\5"+
		"\b\u044a\n\b\3\t\3\t\3\t\5\t\u044f\n\t\3\t\3\t\3\t\3\t\5\t\u0455\n\t\3"+
		"\n\3\n\3\n\3\n\5\n\u045b\n\n\3\n\3\n\3\n\5\n\u0460\n\n\7\n\u0462\n\n\f"+
		"\n\16\n\u0465\13\n\3\n\3\n\3\13\3\13\5\13\u046b\n\13\3\13\3\13\3\13\7"+
		"\13\u0470\n\13\f\13\16\13\u0473\13\13\3\13\3\13\3\13\3\13\7\13\u0479\n"+
		"\13\f\13\16\13\u047c\13\13\3\f\3\f\3\f\5\f\u0481\n\f\3\f\5\f\u0484\n\f"+
		"\6\f\u0486\n\f\r\f\16\f\u0487\3\f\5\f\u048b\n\f\3\f\3\f\3\r\3\r\5\r\u0491"+
		"\n\r\3\r\3\r\3\r\3\r\3\r\5\r\u0498\n\r\6\r\u049a\n\r\r\r\16\r\u049b\6"+
		"\r\u049e\n\r\r\r\16\r\u049f\3\r\3\r\3\r\5\r\u04a5\n\r\6\r\u04a7\n\r\r"+
		"\r\16\r\u04a8\3\16\3\16\3\16\5\16\u04ae\n\16\3\16\3\16\3\16\3\16\5\16"+
		"\u04b4\n\16\3\16\3\16\5\16\u04b8\n\16\3\16\3\16\5\16\u04bc\n\16\3\16\3"+
		"\16\3\16\5\16\u04c1\n\16\3\16\3\16\3\16\5\16\u04c6\n\16\3\17\3\17\3\17"+
		"\3\17\3\17\3\17\5\17\u04ce\n\17\3\17\3\17\5\17\u04d2\n\17\3\17\3\17\3"+
		"\17\3\17\5\17\u04d8\n\17\3\17\3\17\3\17\3\17\5\17\u04de\n\17\5\17\u04e0"+
		"\n\17\3\20\3\20\5\20\u04e4\n\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21"+
		"\u04ed\n\21\3\21\5\21\u04f0\n\21\3\21\3\21\5\21\u04f4\n\21\3\21\5\21\u04f7"+
		"\n\21\3\21\5\21\u04fa\n\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22"+
		"\u0504\n\22\3\22\3\22\5\22\u0508\n\22\3\22\3\22\3\22\5\22\u050d\n\22\7"+
		"\22\u050f\n\22\f\22\16\22\u0512\13\22\5\22\u0514\n\22\3\23\3\23\3\23\3"+
		"\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\5\24\u0521\n\24\3\25\5\25\u0524"+
		"\n\25\3\25\3\25\3\25\3\25\3\25\5\25\u052b\n\25\3\25\3\25\3\25\3\25\3\25"+
		"\7\25\u0532\n\25\f\25\16\25\u0535\13\25\5\25\u0537\n\25\3\25\3\25\3\25"+
		"\5\25\u053c\n\25\3\25\5\25\u053f\n\25\3\25\5\25\u0542\n\25\3\25\5\25\u0545"+
		"\n\25\3\25\7\25\u0548\n\25\f\25\16\25\u054b\13\25\3\25\5\25\u054e\n\25"+
		"\3\25\5\25\u0551\n\25\3\25\5\25\u0554\n\25\3\25\5\25\u0557\n\25\3\26\3"+
		"\26\3\26\7\26\u055c\n\26\f\26\16\26\u055f\13\26\3\26\5\26\u0562\n\26\3"+
		"\26\5\26\u0565\n\26\3\27\3\27\3\27\3\27\3\27\5\27\u056c\n\27\3\27\3\27"+
		"\3\27\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u0577\n\30\3\30\3\30\3\30\3\31"+
		"\3\31\3\31\5\31\u057f\n\31\3\31\3\31\3\31\3\31\5\31\u0585\n\31\3\31\5"+
		"\31\u0588\n\31\3\31\3\31\3\31\5\31\u058d\n\31\3\31\3\31\3\31\5\31\u0592"+
		"\n\31\3\31\3\31\3\31\5\31\u0597\n\31\3\31\5\31\u059a\n\31\3\31\3\31\3"+
		"\31\5\31\u059f\n\31\3\31\3\31\3\31\5\31\u05a4\n\31\7\31\u05a6\n\31\f\31"+
		"\16\31\u05a9\13\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32\7\32\u05b2\n\32"+
		"\f\32\16\32\u05b5\13\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\33\3\33\7"+
		"\33\u05c0\n\33\f\33\16\33\u05c3\13\33\3\34\3\34\3\35\3\35\3\35\3\36\3"+
		"\36\3\36\3\36\5\36\u05ce\n\36\3\36\3\36\3\36\3\36\3\36\5\36\u05d5\n\36"+
		"\3\36\5\36\u05d8\n\36\3\37\3\37\3 \3 \3 \3 \5 \u05e0\n \3 \7 \u05e3\n"+
		" \f \16 \u05e6\13 \3!\3!\3!\7!\u05eb\n!\f!\16!\u05ee\13!\3\"\3\"\3\"\3"+
		"\"\5\"\u05f4\n\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#"+
		"\3#\5#\u0608\n#\3$\3$\3$\3$\3%\3%\3&\3&\5&\u0612\n&\3&\3&\5&\u0616\n&"+
		"\3&\3&\3\'\3\'\3\'\3\'\7\'\u061e\n\'\f\'\16\'\u0621\13\'\5\'\u0623\n\'"+
		"\3(\3(\3(\5(\u0628\n(\3(\3(\3)\3)\3*\3*\3*\3*\3*\5*\u0633\n*\3*\5*\u0636"+
		"\n*\3*\5*\u0639\n*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u0648\n*"+
		"\3+\3+\3+\5+\u064d\n+\3+\5+\u0650\n+\3+\3+\3,\3,\3,\3-\3-\3-\3-\3-\3-"+
		"\6-\u065d\n-\r-\16-\u065e\3.\3.\3.\3.\3.\6.\u0666\n.\r.\16.\u0667\3/\3"+
		"/\3/\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u0678"+
		"\n\60\3\60\3\60\3\60\7\60\u067d\n\60\f\60\16\60\u0680\13\60\3\60\3\60"+
		"\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\5\61\u068d\n\61\3\62\3\62"+
		"\3\62\3\62\5\62\u0693\n\62\3\62\3\62\3\62\3\62\5\62\u0699\n\62\3\62\5"+
		"\62\u069c\n\62\3\62\5\62\u069f\n\62\3\62\5\62\u06a2\n\62\3\63\3\63\3\63"+
		"\3\63\5\63\u06a8\n\63\3\63\5\63\u06ab\n\63\3\63\7\63\u06ae\n\63\f\63\16"+
		"\63\u06b1\13\63\3\63\5\63\u06b4\n\63\3\63\5\63\u06b7\n\63\3\63\5\63\u06ba"+
		"\n\63\3\63\3\63\3\63\3\63\5\63\u06c0\n\63\3\63\5\63\u06c3\n\63\3\63\7"+
		"\63\u06c6\n\63\f\63\16\63\u06c9\13\63\3\63\5\63\u06cc\n\63\3\63\5\63\u06cf"+
		"\n\63\3\63\5\63\u06d2\n\63\5\63\u06d4\n\63\3\64\3\64\5\64\u06d8\n\64\3"+
		"\64\3\64\3\65\3\65\3\65\5\65\u06df\n\65\3\65\3\65\5\65\u06e3\n\65\3\65"+
		"\3\65\3\65\3\65\5\65\u06e9\n\65\3\65\3\65\3\65\5\65\u06ee\n\65\5\65\u06f0"+
		"\n\65\3\65\3\65\5\65\u06f4\n\65\3\65\3\65\3\65\3\65\5\65\u06fa\n\65\3"+
		"\65\3\65\3\65\3\65\5\65\u0700\n\65\3\65\3\65\5\65\u0704\n\65\3\65\3\65"+
		"\3\65\3\65\3\65\5\65\u070b\n\65\3\65\3\65\3\65\3\65\5\65\u0711\n\65\5"+
		"\65\u0713\n\65\5\65\u0715\n\65\3\66\3\66\5\66\u0719\n\66\3\67\3\67\3\67"+
		"\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\5\67\u0727\n\67\3\67\3\67"+
		"\3\67\3\67\38\38\38\58\u0730\n8\38\38\38\38\38\38\38\38\58\u073a\n8\5"+
		"8\u073c\n8\39\39\39\39\59\u0742\n9\39\39\39\39\59\u0748\n9\39\39\39\3"+
		"9\39\59\u074f\n9\39\39\39\39\39\59\u0756\n9\39\39\39\39\59\u075c\n9\3"+
		"9\39\39\39\39\59\u0763\n9\59\u0765\n9\3:\3:\3;\3;\3;\3;\3;\5;\u076e\n"+
		";\3;\3;\5;\u0772\n;\3;\3;\3;\5;\u0777\n;\3;\3;\3<\3<\3<\3<\3<\3<\5<\u0781"+
		"\n<\3<\3<\3<\5<\u0786\n<\3<\3<\3=\3=\3=\3=\3=\3=\3=\3=\3=\5=\u0793\n="+
		"\3=\3=\3=\3=\5=\u0799\n=\3=\5=\u079c\n=\3=\3=\5=\u07a0\n=\3=\3=\3=\5="+
		"\u07a5\n=\3=\3=\3=\3=\5=\u07ab\n=\3=\3=\3=\3=\3=\3=\3=\5=\u07b4\n=\3="+
		"\3=\3=\3=\3=\5=\u07bb\n=\3=\3=\3=\3=\3=\5=\u07c2\n=\3=\3=\3=\3=\3=\5="+
		"\u07c9\n=\3=\3=\3=\5=\u07ce\n=\3=\3=\5=\u07d2\n=\3=\3=\3=\5=\u07d7\n="+
		"\3=\3=\3=\3=\3=\3=\3=\5=\u07e0\n=\3=\3=\3=\3=\3=\3=\5=\u07e8\n=\3=\3="+
		"\3=\3=\5=\u07ee\n=\3=\5=\u07f1\n=\3=\3=\3=\3=\3=\3=\5=\u07f9\n=\5=\u07fb"+
		"\n=\3=\3=\3=\3=\3=\5=\u0802\n=\3=\5=\u0805\n=\3=\3=\3=\3=\3=\3=\5=\u080d"+
		"\n=\5=\u080f\n=\3=\3=\3=\3=\3=\5=\u0816\n=\3=\5=\u0819\n=\3=\3=\3=\3="+
		"\3=\3=\5=\u0821\n=\5=\u0823\n=\3=\3=\5=\u0827\n=\3=\3=\3=\5=\u082c\n="+
		"\3=\3=\5=\u0830\n=\3=\3=\3=\5=\u0835\n=\3=\3=\3=\3=\5=\u083b\n=\3=\3="+
		"\3=\3=\5=\u0841\n=\3=\3=\3=\5=\u0846\n=\3=\5=\u0849\n=\3=\3=\3=\5=\u084e"+
		"\n=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\5=\u085a\n=\5=\u085c\n=\3=\3=\3=\3="+
		"\3=\3=\3=\5=\u0865\n=\5=\u0867\n=\3>\3>\5>\u086b\n>\3?\3?\3@\5@\u0870"+
		"\n@\3@\3@\5@\u0874\n@\3A\3A\3A\5A\u0879\nA\3A\3A\3A\5A\u087e\nA\3A\3A"+
		"\5A\u0882\nA\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\5A\u088e\nA\3B\3B\3B\3B\5B"+
		"\u0894\nB\3C\3C\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u08a3\nD\3E\3E\3E"+
		"\3F\3F\3F\3F\3F\3F\5F\u08ae\nF\3G\3G\3G\3G\5G\u08b4\nG\3H\3H\5H\u08b8"+
		"\nH\3H\3H\3H\5H\u08bd\nH\7H\u08bf\nH\fH\16H\u08c2\13H\3I\3I\3I\3I\3I\3"+
		"I\5I\u08ca\nI\3I\5I\u08cd\nI\3I\5I\u08d0\nI\3J\3J\3J\5J\u08d5\nJ\3J\3"+
		"J\3J\3J\5J\u08db\nJ\3J\5J\u08de\nJ\3J\3J\5J\u08e2\nJ\3J\3J\5J\u08e6\n"+
		"J\3J\3J\5J\u08ea\nJ\3J\3J\3J\5J\u08ef\nJ\3J\3J\5J\u08f3\nJ\3J\3J\3J\3"+
		"J\3J\5J\u08fa\nJ\5J\u08fc\nJ\3K\3K\3K\3K\5K\u0902\nK\3K\3K\5K\u0906\n"+
		"K\3K\3K\3K\5K\u090b\nK\5K\u090d\nK\3K\3K\3K\3K\5K\u0913\nK\3K\3K\3L\3"+
		"L\5L\u0919\nL\3L\3L\3L\3L\5L\u091f\nL\3L\3L\3L\3L\3L\3L\5L\u0927\nL\3"+
		"M\3M\3M\3M\3M\3M\3M\3M\3M\3M\7M\u0933\nM\fM\16M\u0936\13M\3M\3M\5M\u093a"+
		"\nM\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\7M\u0946\nM\fM\16M\u0949\13M\3M\3M\5"+
		"M\u094d\nM\5M\u094f\nM\3N\3N\3N\3N\3N\3N\3N\3N\3N\5N\u095a\nN\5N\u095c"+
		"\nN\3O\3O\5O\u0960\nO\3O\3O\5O\u0964\nO\3P\3P\3P\3P\3P\5P\u096b\nP\3P"+
		"\3P\6P\u096f\nP\rP\16P\u0970\3P\3P\3P\3P\5P\u0977\nP\3Q\5Q\u097a\nQ\3"+
		"Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\7Q\u0986\nQ\fQ\16Q\u0989\13Q\3Q\3Q\3Q\5Q"+
		"\u098e\nQ\5Q\u0990\nQ\3Q\3Q\3Q\5Q\u0995\nQ\3R\5R\u0998\nR\3R\3R\3R\3R"+
		"\3R\5R\u099f\nR\3R\3R\5R\u09a3\nR\3R\3R\5R\u09a7\nR\3R\3R\3R\3R\3R\3R"+
		"\3R\3R\5R\u09b1\nR\3S\3S\3S\3S\3T\3T\3T\5T\u09ba\nT\3T\5T\u09bd\nT\3U"+
		"\3U\5U\u09c1\nU\3V\3V\5V\u09c5\nV\3W\3W\3W\3W\3X\3X\3Y\3Y\3Z\3Z\3[\3["+
		"\3\\\3\\\3\\\7\\\u09d6\n\\\f\\\16\\\u09d9\13\\\3]\3]\3^\3^\5^\u09df\n"+
		"^\3_\3_\5_\u09e3\n_\3`\3`\3a\3a\3a\3a\5a\u09eb\na\3a\3a\3a\3a\3a\3a\5"+
		"a\u09f3\na\3b\3b\3b\3c\3c\3c\5c\u09fb\nc\3c\3c\3c\3c\3c\5c\u0a02\nc\3"+
		"c\3c\3c\3c\3c\3c\3c\5c\u0a0b\nc\3c\3c\5c\u0a0f\nc\3d\3d\3d\3d\3d\3d\5"+
		"d\u0a17\nd\3d\3d\3d\3d\3d\3d\5d\u0a1f\nd\5d\u0a21\nd\3e\3e\3e\7e\u0a26"+
		"\ne\fe\16e\u0a29\13e\3f\3f\3f\5f\u0a2e\nf\3g\3g\5g\u0a32\ng\3g\3g\3g\3"+
		"g\3h\3h\3h\3h\3h\3h\3i\3i\3i\7i\u0a41\ni\fi\16i\u0a44\13i\3j\3j\5j\u0a48"+
		"\nj\3k\3k\3l\3l\3l\3l\7l\u0a50\nl\fl\16l\u0a53\13l\3m\3m\3m\3m\7m\u0a59"+
		"\nm\fm\16m\u0a5c\13m\3n\3n\3n\3n\5n\u0a62\nn\3o\3o\3o\3o\3o\3o\3o\3o\3"+
		"o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\5o\u0a77\no\3p\3p\3p\3q\3q\5q\u0a7e\n"+
		"q\3q\3q\5q\u0a82\nq\3q\3q\3q\5q\u0a87\nq\3q\3q\3q\5q\u0a8c\nq\3q\3q\3"+
		"q\5q\u0a91\nq\5q\u0a93\nq\3r\3r\3r\3r\5r\u0a99\nr\3r\3r\5r\u0a9d\nr\3"+
		"r\3r\5r\u0aa1\nr\3r\5r\u0aa4\nr\3r\3r\5r\u0aa8\nr\3r\3r\3r\3r\3r\3r\5"+
		"r\u0ab0\nr\3r\5r\u0ab3\nr\3r\3r\3r\3r\3r\5r\u0aba\nr\3r\5r\u0abd\nr\5"+
		"r\u0abf\nr\3s\3s\3s\3s\3s\5s\u0ac6\ns\3s\3s\3s\5s\u0acb\ns\3s\3s\3s\5"+
		"s\u0ad0\ns\3s\3s\3s\3s\3s\3s\3s\3s\3s\5s\u0adb\ns\3s\3s\3s\5s\u0ae0\n"+
		"s\3s\3s\3s\5s\u0ae5\ns\3s\3s\5s\u0ae9\ns\3t\3t\3t\3t\5t\u0aef\nt\3t\3"+
		"t\3t\3t\5t\u0af5\nt\3t\3t\3t\3t\5t\u0afb\nt\3t\3t\3t\3t\5t\u0b01\nt\3"+
		"t\3t\3t\3t\5t\u0b07\nt\3t\3t\3t\5t\u0b0c\nt\3u\3u\3u\5u\u0b11\nu\3u\3"+
		"u\3u\3v\3v\3v\5v\u0b19\nv\3v\3v\3w\3w\3w\5w\u0b20\nw\3w\3w\3x\3x\3x\5"+
		"x\u0b27\nx\3x\3x\5x\u0b2b\nx\3x\3x\3x\3x\3y\3y\3y\3y\3z\3z\5z\u0b37\n"+
		"z\3z\3z\3z\3z\5z\u0b3d\nz\3z\3z\3z\3z\5z\u0b43\nz\3{\3{\5{\u0b47\n{\3"+
		"{\3{\5{\u0b4b\n{\3{\3{\5{\u0b4f\n{\3|\3|\5|\u0b53\n|\3|\3|\3|\3|\3|\3"+
		"}\3}\3}\3}\3}\3~\3~\5~\u0b61\n~\3~\3~\5~\u0b65\n~\3~\3~\3\177\3\177\3"+
		"\177\3\177\3\177\3\177\3\177\5\177\u0b70\n\177\3\177\3\177\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\5\u0080\u0b79\n\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\5\u0080\u0b7f\n\u0080\3\u0080\3\u0080\3\u0081\3\u0081\3\u0082"+
		"\3\u0082\3\u0083\3\u0083\3\u0084\5\u0084\u0b8a\n\u0084\3\u0084\3\u0084"+
		"\3\u0084\5\u0084\u0b8f\n\u0084\3\u0084\3\u0084\5\u0084\u0b93\n\u0084\3"+
		"\u0084\3\u0084\3\u0084\5\u0084\u0b98\n\u0084\3\u0084\7\u0084\u0b9b\n\u0084"+
		"\f\u0084\16\u0084\u0b9e\13\u0084\3\u0085\3\u0085\3\u0086\3\u0086\3\u0087"+
		"\3\u0087\3\u0088\3\u0088\3\u0088\5\u0088\u0ba9\n\u0088\3\u0088\3\u0088"+
		"\3\u0088\5\u0088\u0bae\n\u0088\3\u0088\3\u0088\3\u0088\5\u0088\u0bb3\n"+
		"\u0088\3\u0088\3\u0088\3\u0089\3\u0089\3\u0089\7\u0089\u0bba\n\u0089\f"+
		"\u0089\16\u0089\u0bbd\13\u0089\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a"+
		"\3\u008a\3\u008a\5\u008a\u0bc6\n\u008a\3\u008a\3\u008a\3\u008a\3\u008a"+
		"\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u0bd0\n\u008a\7\u008a\u0bd2\n"+
		"\u008a\f\u008a\16\u008a\u0bd5\13\u008a\3\u008b\3\u008b\3\u008b\7\u008b"+
		"\u0bda\n\u008b\f\u008b\16\u008b\u0bdd\13\u008b\3\u008c\3\u008c\3\u008c"+
		"\3\u008c\3\u008c\5\u008c\u0be4\n\u008c\3\u008d\3\u008d\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008f\3\u008f\3\u008f\3\u008f\5\u008f\u0bf0\n\u008f"+
		"\3\u008f\7\u008f\u0bf3\n\u008f\f\u008f\16\u008f\u0bf6\13\u008f\3\u0090"+
		"\3\u0090\5\u0090\u0bfa\n\u0090\3\u0090\3\u0090\5\u0090\u0bfe\n\u0090\3"+
		"\u0090\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u0c05\n\u0090\5\u0090\u0c07"+
		"\n\u0090\3\u0091\3\u0091\3\u0091\5\u0091\u0c0c\n\u0091\3\u0091\3\u0091"+
		"\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\3\u0093\3\u0093\3\u0094\3\u0094\3\u0094\5\u0094\u0c1e\n\u0094\3\u0094"+
		"\3\u0094\3\u0094\3\u0094\3\u0095\3\u0095\3\u0096\3\u0096\5\u0096\u0c28"+
		"\n\u0096\5\u0096\u0c2a\n\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096"+
		"\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0097\3\u0097\3\u0097\7\u0097"+
		"\u0c39\n\u0097\f\u0097\16\u0097\u0c3c\13\u0097\3\u0098\3\u0098\5\u0098"+
		"\u0c40\n\u0098\3\u0098\5\u0098\u0c43\n\u0098\3\u0099\3\u0099\3\u0099\3"+
		"\u0099\5\u0099\u0c49\n\u0099\5\u0099\u0c4b\n\u0099\3\u0099\3\u0099\5\u0099"+
		"\u0c4f\n\u0099\3\u0099\3\u0099\5\u0099\u0c53\n\u0099\5\u0099\u0c55\n\u0099"+
		"\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099"+
		"\5\u0099\u0c60\n\u0099\5\u0099\u0c62\n\u0099\3\u0099\3\u0099\3\u0099\3"+
		"\u0099\3\u009a\3\u009a\3\u009a\7\u009a\u0c6b\n\u009a\f\u009a\16\u009a"+
		"\u0c6e\13\u009a\3\u009b\3\u009b\3\u009b\5\u009b\u0c73\n\u009b\5\u009b"+
		"\u0c75\n\u009b\3\u009b\3\u009b\5\u009b\u0c79\n\u009b\3\u009b\3\u009b\3"+
		"\u009b\3\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0c82\n\u009c\3\u009c\3"+
		"\u009c\3\u009d\3\u009d\3\u009d\7\u009d\u0c89\n\u009d\f\u009d\16\u009d"+
		"\u0c8c\13\u009d\3\u009e\3\u009e\3\u009e\5\u009e\u0c91\n\u009e\3\u009f"+
		"\3\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0\u0c9b"+
		"\n\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0\u0ca2\n\u00a0"+
		"\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0\u0caa\n\u00a0"+
		"\3\u00a0\3\u00a0\5\u00a0\u0cae\n\u00a0\3\u00a1\3\u00a1\3\u00a2\5\u00a2"+
		"\u0cb3\n\u00a2\3\u00a2\3\u00a2\5\u00a2\u0cb7\n\u00a2\3\u00a3\3\u00a3\3"+
		"\u00a3\7\u00a3\u0cbc\n\u00a3\f\u00a3\16\u00a3\u0cbf\13\u00a3\3\u00a4\3"+
		"\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0cc9\n"+
		"\u00a4\3\u00a4\3\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a6\3\u00a6"+
		"\3\u00a6\7\u00a6\u0cd4\n\u00a6\f\u00a6\16\u00a6\u0cd7\13\u00a6\3\u00a7"+
		"\3\u00a7\5\u00a7\u0cdb\n\u00a7\3\u00a7\3\u00a7\5\u00a7\u0cdf\n\u00a7\3"+
		"\u00a7\3\u00a7\5\u00a7\u0ce3\n\u00a7\3\u00a8\3\u00a8\5\u00a8\u0ce7\n\u00a8"+
		"\3\u00a8\3\u00a8\3\u00a8\7\u00a8\u0cec\n\u00a8\f\u00a8\16\u00a8\u0cef"+
		"\13\u00a8\3\u00a9\3\u00a9\5\u00a9\u0cf3\n\u00a9\3\u00a9\5\u00a9\u0cf6"+
		"\n\u00a9\3\u00a9\3\u00a9\3\u00a9\5\u00a9\u0cfb\n\u00a9\3\u00a9\3\u00a9"+
		"\3\u00a9\5\u00a9\u0d00\n\u00a9\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0d05\n"+
		"\u00aa\3\u00aa\5\u00aa\u0d08\n\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0d0d"+
		"\n\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0d12\n\u00aa\3\u00ab\3\u00ab"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0d1b\n\u00ac\3\u00ac"+
		"\5\u00ac\u0d1e\n\u00ac\3\u00ac\3\u00ac\7\u00ac\u0d22\n\u00ac\f\u00ac\16"+
		"\u00ac\u0d25\13\u00ac\3\u00ac\3\u00ac\5\u00ac\u0d29\n\u00ac\3\u00ac\3"+
		"\u00ac\5\u00ac\u0d2d\n\u00ac\3\u00ac\3\u00ac\3\u00ad\3\u00ad\3\u00ad\3"+
		"\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0d39\n\u00ad\3\u00ad\3"+
		"\u00ad\5\u00ad\u0d3d\n\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5"+
		"\u00ad\u0d44\n\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\5"+
		"\u00ae\u0d4c\n\u00ae\3\u00ae\5\u00ae\u0d4f\n\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u0d57\n\u00ae\3\u00af\5\u00af\u0d5a\n"+
		"\u00af\3\u00af\3\u00af\5\u00af\u0d5e\n\u00af\5\u00af\u0d60\n\u00af\3\u00b0"+
		"\3\u00b0\3\u00b0\5\u00b0\u0d65\n\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0"+
		"\3\u00b0\3\u00b0\5\u00b0\u0d6d\n\u00b0\5\u00b0\u0d6f\n\u00b0\3\u00b1\3"+
		"\u00b1\5\u00b1\u0d73\n\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3"+
		"\u00b1\5\u00b1\u0d7b\n\u00b1\3\u00b2\3\u00b2\5\u00b2\u0d7f\n\u00b2\3\u00b3"+
		"\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3"+
		"\5\u00b3\u0d8b\n\u00b3\3\u00b3\5\u00b3\u0d8e\n\u00b3\3\u00b3\3\u00b3\3"+
		"\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u0d96\n\u00b3\5\u00b3\u0d98\n\u00b3"+
		"\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4"+
		"\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u0da6\n\u00b4\3\u00b4\3\u00b4\3\u00b4"+
		"\5\u00b4\u0dab\n\u00b4\5\u00b4\u0dad\n\u00b4\3\u00b4\3\u00b4\3\u00b4\3"+
		"\u00b4\5\u00b4\u0db3\n\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u0db8\n\u00b4"+
		"\5\u00b4\u0dba\n\u00b4\7\u00b4\u0dbc\n\u00b4\f\u00b4\16\u00b4\u0dbf\13"+
		"\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u0dcd\n\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\5\u00b5\u0dd2\n\u00b5\5\u00b5\u0dd4\n\u00b5\3\u00b5\3\u00b5\3"+
		"\u00b5\3\u00b5\5\u00b5\u0dda\n\u00b5\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u0ddf"+
		"\n\u00b5\5\u00b5\u0de1\n\u00b5\7\u00b5\u0de3\n\u00b5\f\u00b5\16\u00b5"+
		"\u0de6\13\u00b5\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b6\3\u00b7\3\u00b7\5\u00b7\u0df2\n\u00b7\3\u00b7\3\u00b7\3\u00b7"+
		"\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7"+
		"\3\u00b7\5\u00b7\u0e01\n\u00b7\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8"+
		"\3\u00b8\3\u00b8\3\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9"+
		"\5\u00b9\u0e11\n\u00b9\3\u00b9\5\u00b9\u0e14\n\u00b9\3\u00b9\3\u00b9\3"+
		"\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u0e1c\n\u00b9\3\u00b9\3\u00b9\3"+
		"\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u0e25\n\u00b9\3\u00ba\3"+
		"\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u0e2c\n\u00ba\3\u00ba\3\u00ba\3"+
		"\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba"+
		"\5\u00ba\u0e39\n\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\7\u00bb"+
		"\u0e40\n\u00bb\f\u00bb\16\u00bb\u0e43\13\u00bb\5\u00bb\u0e45\n\u00bb\3"+
		"\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u0e4e\n"+
		"\u00bb\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u0e53\n\u00bc\3\u00bc\3\u00bc\3"+
		"\u00bc\5\u00bc\u0e58\n\u00bc\3\u00bc\3\u00bc\3\u00bd\3\u00bd\3\u00bd\3"+
		"\u00bd\5\u00bd\u0e60\n\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u0e65\n\u00bd"+
		"\3\u00bd\3\u00bd\3\u00be\3\u00be\5\u00be\u0e6b\n\u00be\3\u00be\3\u00be"+
		"\3\u00be\5\u00be\u0e70\n\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u0e75\n"+
		"\u00be\7\u00be\u0e77\n\u00be\f\u00be\16\u00be\u0e7a\13\u00be\3\u00be\3"+
		"\u00be\3\u00be\3\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\5\u00bf\u0e87\n\u00bf\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0"+
		"\3\u00c0\7\u00c0\u0e8f\n\u00c0\f\u00c0\16\u00c0\u0e92\13\u00c0\3\u00c0"+
		"\3\u00c0\5\u00c0\u0e96\n\u00c0\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u0e9b\n"+
		"\u00c0\5\u00c0\u0e9d\n\u00c0\3\u00c0\3\u00c0\3\u00c1\3\u00c1\3\u00c1\5"+
		"\u00c1\u0ea4\n\u00c1\3\u00c1\3\u00c1\5\u00c1\u0ea8\n\u00c1\3\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u0eb0\n\u00c1\3\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\5\u00c2\u0ebd\n\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\5\u00c2\u0ec5\n\u00c2\5\u00c2\u0ec7\n\u00c2\3\u00c2\3\u00c2\3\u00c2\3"+
		"\u00c2\3\u00c2\3\u00c2\5\u00c2\u0ecf\n\u00c2\3\u00c2\3\u00c2\3\u00c2\3"+
		"\u00c2\3\u00c2\3\u00c2\5\u00c2\u0ed7\n\u00c2\5\u00c2\u0ed9\n\u00c2\7\u00c2"+
		"\u0edb\n\u00c2\f\u00c2\16\u00c2\u0ede\13\u00c2\3\u00c2\3\u00c2\3\u00c3"+
		"\3\u00c3\5\u00c3\u0ee4\n\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c8\3\u00c8"+
		"\3\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00ca\3\u00ca\3\u00ca\3\u00cb\3\u00cb"+
		"\3\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cd\3\u00cd\3\u00cd\3\u00ce\3\u00ce"+
		"\3\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d2\3\u00d2\3\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d4\3\u00d4"+
		"\3\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d7\3\u00d7"+
		"\3\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00da\3\u00da"+
		"\3\u00da\3\u00db\3\u00db\3\u00db\3\u00dc\3\u00dc\3\u00dc\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00de\3\u00de\3\u00de\3\u00df\3\u00df\3\u00df\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e1\3\u00e1\3\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e3\3\u00e3"+
		"\3\u00e3\3\u00e4\3\u00e4\3\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e7\3\u00e7\3\u00e7\3\u00e8\3\u00e8\3\u00e8\3\u00e9\3\u00e9"+
		"\3\u00e9\3\u00ea\3\u00ea\3\u00ea\3\u00eb\3\u00eb\3\u00eb\3\u00ec\3\u00ec"+
		"\3\u00ec\3\u00ed\3\u00ed\3\u00ed\3\u00ee\3\u00ee\3\u00ee\3\u00ef\3\u00ef"+
		"\3\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f2\3\u00f2"+
		"\3\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f4\3\u00f4\3\u00f4\3\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f7\3\u00f7\3\u00f7\3\u00f8\3\u00f8"+
		"\3\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fb\3\u00fb"+
		"\3\u00fb\3\u00fc\3\u00fc\3\u00fc\3\u00fd\3\u00fd\3\u00fd\3\u00fe\3\u00fe"+
		"\3\u00fe\3\u00ff\3\u00ff\3\u00ff\3\u0100\3\u0100\3\u0100\3\u0101\3\u0101"+
		"\3\u0101\3\u0102\3\u0102\3\u0102\3\u0103\3\u0103\3\u0103\3\u0104\3\u0104"+
		"\3\u0104\3\u0105\3\u0105\3\u0105\3\u0106\3\u0106\3\u0106\3\u0107\3\u0107"+
		"\3\u0107\3\u0108\3\u0108\3\u0108\3\u0109\3\u0109\3\u0109\3\u010a\3\u010a"+
		"\3\u010a\3\u010b\3\u010b\3\u010b\3\u010c\3\u010c\3\u010c\3\u010d\3\u010d"+
		"\3\u010d\3\u010e\3\u010e\3\u010e\3\u010f\3\u010f\3\u010f\3\u0110\3\u0110"+
		"\3\u0110\3\u0111\3\u0111\3\u0111\3\u0112\3\u0112\3\u0112\3\u0113\3\u0113"+
		"\3\u0113\3\u0114\3\u0114\3\u0114\3\u0115\3\u0115\3\u0115\3\u0116\3\u0116"+
		"\3\u0116\3\u0117\3\u0117\3\u0117\3\u0118\3\u0118\3\u0118\3\u0119\3\u0119"+
		"\3\u0119\3\u011a\3\u011a\3\u011a\3\u011b\3\u011b\3\u011b\3\u011c\3\u011c"+
		"\3\u011c\3\u011d\3\u011d\3\u011d\3\u011e\3\u011e\3\u011e\3\u011f\3\u011f"+
		"\3\u011f\3\u0120\3\u0120\3\u0120\3\u0121\3\u0121\3\u0121\3\u0122\3\u0122"+
		"\3\u0122\3\u0123\3\u0123\3\u0123\3\u0124\3\u0124\3\u0124\3\u0125\3\u0125"+
		"\3\u0125\3\u0126\3\u0126\3\u0126\3\u0127\3\u0127\3\u0127\3\u0128\3\u0128"+
		"\3\u0128\3\u0129\3\u0129\3\u0129\3\u012a\3\u012a\3\u012a\3\u012b\3\u012b"+
		"\3\u012b\3\u012c\3\u012c\3\u012c\3\u012d\3\u012d\3\u012d\3\u012e\3\u012e"+
		"\3\u012e\3\u012f\3\u012f\3\u012f\3\u0130\3\u0130\3\u0130\3\u0131\3\u0131"+
		"\3\u0131\3\u0132\3\u0132\3\u0132\3\u0133\3\u0133\3\u0133\3\u0134\3\u0134"+
		"\3\u0134\3\u0135\3\u0135\3\u0135\3\u0136\3\u0136\3\u0136\3\u0137\3\u0137"+
		"\3\u0137\3\u0137\3\u0138\3\u0138\3\u0138\3\u0139\3\u0139\3\u0139\3\u0139"+
		"\3\u013a\3\u013a\3\u013a\3\u013a\3\u013b\3\u013b\3\u013b\3\u013b\3\u013c"+
		"\3\u013c\3\u013c\3\u013c\3\u013d\3\u013d\3\u013d\3\u013d\3\u013e\3\u013e"+
		"\3\u013e\3\u013e\3\u013f\3\u013f\3\u013f\3\u013f\3\u0140\3\u0140\3\u0140"+
		"\3\u0140\3\u0141\3\u0141\3\u0141\3\u0141\3\u0142\3\u0142\3\u0142\3\u0142"+
		"\3\u0143\3\u0143\3\u0143\3\u0143\3\u0144\3\u0144\3\u0144\3\u0145\3\u0145"+
		"\3\u0145\3\u0145\3\u0146\3\u0146\3\u0146\3\u0146\3\u0147\3\u0147\3\u0147"+
		"\3\u0148\3\u0148\3\u0148\3\u0149\3\u0149\3\u0149\3\u0149\3\u014a\3\u014a"+
		"\3\u014a\3\u014b\3\u014b\3\u014b\3\u014b\3\u014c\3\u014c\3\u014c\3\u014d"+
		"\3\u014d\3\u014d\3\u014e\3\u014e\3\u014e\3\u014f\3\u014f\3\u014f\3\u014f"+
		"\3\u0150\3\u0150\3\u0150\3\u0150\3\u0151\3\u0151\3\u0151\3\u0151\3\u0152"+
		"\3\u0152\3\u0152\3\u0152\3\u0153\3\u0153\3\u0153\3\u0153\3\u0154\3\u0154"+
		"\3\u0154\3\u0154\3\u0155\3\u0155\3\u0155\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\3\u0157\3\u0157\3\u0157\3\u0157\3\u0158\3\u0158\3\u0158\3\u0159\3\u0159"+
		"\3\u0159\3\u0159\3\u015a\3\u015a\3\u015a\3\u015a\3\u015b\3\u015b\3\u015b"+
		"\3\u015c\3\u015c\3\u015c\3\u015c\3\u015d\3\u015d\3\u015d\3\u015e\3\u015e"+
		"\3\u015e\3\u015f\3\u015f\3\u015f\3\u0160\3\u0160\3\u0160\3\u0161\3\u0161"+
		"\3\u0161\3\u0162\3\u0162\3\u0162\3\u0162\3\u0163\3\u0163\3\u0163\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0165\3\u0165\3\u0165\3\u0166\3\u0166\3\u0166"+
		"\3\u0166\3\u0167\3\u0167\3\u0167\3\u0167\3\u0168\3\u0168\3\u0168\3\u0169"+
		"\3\u0169\3\u0169\3\u0169\3\u016a\3\u016a\3\u016a\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016c\3\u016c\3\u016c\3\u016d\3\u016d\3\u016d\3\u016d\3\u016e"+
		"\3\u016e\3\u016e\3\u016f\3\u016f\3\u016f\3\u0170\3\u0170\3\u0170\3\u0171"+
		"\3\u0171\3\u0171\3\u0172\3\u0172\3\u0172\3\u0172\3\u0173\3\u0173\3\u0173"+
		"\3\u0173\3\u0174\3\u0174\3\u0174\3\u0174\3\u0175\3\u0175\3\u0175\3\u0175"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0177\3\u0177\3\u0177\3\u0177\3\u0178"+
		"\3\u0178\3\u0178\3\u0179\3\u0179\3\u0179\3\u0179\3\u017a\3\u017a\3\u017a"+
		"\3\u017a\3\u017b\3\u017b\3\u017b\3\u017b\3\u017c\3\u017c\3\u017c\3\u017d"+
		"\3\u017d\3\u017d\3\u017d\3\u017e\3\u017e\3\u017e\3\u017e\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u0180\3\u0180\3\u0180\3\u0180\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0182\3\u0182\3\u0182\3\u0182\3\u0183\3\u0183\3\u0183\3\u0184"+
		"\3\u0184\3\u0184\3\u0185\3\u0185\3\u0185\3\u0185\3\u0186\3\u0186\3\u0186"+
		"\3\u0186\3\u0187\3\u0187\3\u0187\3\u0188\3\u0188\3\u0188\3\u0188\3\u0189"+
		"\3\u0189\3\u0189\3\u0189\3\u018a\3\u018a\3\u018a\3\u018a\3\u018b\3\u018b"+
		"\3\u018b\3\u018c\3\u018c\3\u018c\3\u018c\3\u018d\3\u018d\3\u018d\3\u018d"+
		"\3\u018e\3\u018e\3\u018e\3\u018e\3\u018f\3\u018f\3\u018f\3\u018f\3\u0190"+
		"\3\u0190\3\u0190\3\u0191\3\u0191\3\u0191\3\u0191\3\u0192\3\u0192\3\u0192"+
		"\3\u0193\3\u0193\3\u0193\3\u0193\3\u0194\3\u0194\3\u0194\3\u0194\3\u0195"+
		"\3\u0195\3\u0195\3\u0195\3\u0196\3\u0196\3\u0196\3\u0197\3\u0197\3\u0197"+
		"\3\u0197\3\u0198\3\u0198\3\u0198\3\u0198\3\u0199\3\u0199\3\u0199\3\u019a"+
		"\3\u019a\3\u019a\3\u019a\3\u019b\3\u019b\3\u019b\3\u019b\3\u019c\3\u019c"+
		"\3\u019c\3\u019d\3\u019d\3\u019d\3\u019d\3\u019e\3\u019e\3\u019e\3\u019e"+
		"\3\u019f\3\u019f\3\u019f\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a1\3\u01a1"+
		"\3\u01a1\3\u01a1\3\u01a2\3\u01a2\3\u01a2\3\u01a3\3\u01a3\3\u01a3\3\u01a4"+
		"\3\u01a4\3\u01a4\3\u01a5\3\u01a5\3\u01a5\3\u01a6\3\u01a6\3\u01a6\3\u01a7"+
		"\3\u01a7\3\u01a7\3\u01a7\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a9\3\u01a9"+
		"\3\u01a9\3\u01a9\3\u01aa\3\u01aa\3\u01aa\3\u01ab\3\u01ab\3\u01ab\3\u01ab"+
		"\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ae"+
		"\3\u01ae\3\u01ae\3\u01ae\3\u01af\3\u01af\3\u01af\3\u01b0\3\u01b0\3\u01b0"+
		"\3\u01b0\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b2\3\u01b2\3\u01b2\3\u01b2"+
		"\3\u01b3\3\u01b3\3\u01b3\3\u01b4\3\u01b4\3\u01b4\3\u01b5\3\u01b5\3\u01b5"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b7\3\u01b7\3\u01b7\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b9\3\u01b9\3\u01b9\3\u01ba\3\u01ba\3\u01ba\3\u01ba"+
		"\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bd"+
		"\3\u01bd\3\u01bd\3\u01bd\3\u01be\3\u01be\3\u01be\3\u01bf\3\u01bf\3\u01bf"+
		"\3\u01bf\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c1\3\u01c1\3\u01c1\3\u01c1"+
		"\3\u01c2\3\u01c2\3\u01c2\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c5\3\u01c5\3\u01c5\3\u01c6\3\u01c6\3\u01c6\3\u01c6"+
		"\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c8\3\u01c8\3\u01c8\3\u01c8\3\u01c9"+
		"\3\u01c9\3\u01c9\3\u01c9\3\u01ca\3\u01ca\3\u01ca\3\u01cb\3\u01cb\3\u01cb"+
		"\3\u01cb\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cd\3\u01cd\3\u01cd\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01cf\3\u01cf\3\u01cf\3\u01d0\3\u01d0\3\u01d0"+
		"\3\u01d0\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d4\3\u01d4\3\u01d4\3\u01d5\3\u01d5"+
		"\3\u01d6\3\u01d6\3\u01d6\5\u01d6\u1284\n\u01d6\3\u01d7\3\u01d7\3\u01d7"+
		"\3\u01d7\3\u01d7\3\u01d7\3\u01d7\5\u01d7\u128d\n\u01d7\3\u01d8\3\u01d8"+
		"\3\u01d8\5\u01d8\u1292\n\u01d8\3\u01d9\3\u01d9\3\u01d9\5\u01d9\u1297\n"+
		"\u01d9\3\u01d9\2\2\u01da\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&("+
		"*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084"+
		"\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c"+
		"\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4"+
		"\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc"+
		"\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4"+
		"\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc"+
		"\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114"+
		"\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c"+
		"\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144"+
		"\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c"+
		"\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174"+
		"\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c"+
		"\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4"+
		"\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc"+
		"\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4"+
		"\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec"+
		"\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204"+
		"\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c"+
		"\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234"+
		"\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c"+
		"\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264"+
		"\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c"+
		"\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294"+
		"\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac"+
		"\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4"+
		"\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc"+
		"\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4"+
		"\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c"+
		"\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320\u0322\u0324"+
		"\u0326\u0328\u032a\u032c\u032e\u0330\u0332\u0334\u0336\u0338\u033a\u033c"+
		"\u033e\u0340\u0342\u0344\u0346\u0348\u034a\u034c\u034e\u0350\u0352\u0354"+
		"\u0356\u0358\u035a\u035c\u035e\u0360\u0362\u0364\u0366\u0368\u036a\u036c"+
		"\u036e\u0370\u0372\u0374\u0376\u0378\u037a\u037c\u037e\u0380\u0382\u0384"+
		"\u0386\u0388\u038a\u038c\u038e\u0390\u0392\u0394\u0396\u0398\u039a\u039c"+
		"\u039e\u03a0\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac\u03ae\u03b0\2\b\3\3\u00e8"+
		"\u00e8\4\2\u00ed\u00ed\u00f5\u00f5\3\2\u010a\u010e\3\2\u00f3\u00f4\26"+
		"\2\17\17vvz{}}\u0080\u0082\u0085\u0085\u0087\u0088\u008a\u008a\u008c\u008e"+
		"\u0090\u0090\u0093\u0093\u0095\u0096\u0098\u0098\u009b\u009b\u009d\u009d"+
		"\u00a0\u00a1\u00a4\u00a4\u00a7\u00a7\u00a9\u00a9\u00ac\u00ac\3\2\u00e4"+
		"\u00e5\2\u1358\2\u03b7\3\2\2\2\4\u03bb\3\2\2\2\6\u03d3\3\2\2\2\b\u03fc"+
		"\3\2\2\2\n\u041b\3\2\2\2\f\u043a\3\2\2\2\16\u043f\3\2\2\2\20\u044b\3\2"+
		"\2\2\22\u0456\3\2\2\2\24\u046a\3\2\2\2\26\u048a\3\2\2\2\30\u0490\3\2\2"+
		"\2\32\u04c5\3\2\2\2\34\u04c7\3\2\2\2\36\u04e3\3\2\2\2 \u04e5\3\2\2\2\""+
		"\u04fb\3\2\2\2$\u0515\3\2\2\2&\u051b\3\2\2\2(\u0523\3\2\2\2*\u0558\3\2"+
		"\2\2,\u0566\3\2\2\2.\u0570\3\2\2\2\60\u057b\3\2\2\2\62\u05ad\3\2\2\2\64"+
		"\u05bd\3\2\2\2\66\u05c4\3\2\2\28\u05c6\3\2\2\2:\u05d4\3\2\2\2<\u05d9\3"+
		"\2\2\2>\u05db\3\2\2\2@\u05e7\3\2\2\2B\u05f3\3\2\2\2D\u0607\3\2\2\2F\u0609"+
		"\3\2\2\2H\u060d\3\2\2\2J\u0611\3\2\2\2L\u0622\3\2\2\2N\u0627\3\2\2\2P"+
		"\u062b\3\2\2\2R\u0647\3\2\2\2T\u0649\3\2\2\2V\u0653\3\2\2\2X\u0656\3\2"+
		"\2\2Z\u0665\3\2\2\2\\\u0669\3\2\2\2^\u0677\3\2\2\2`\u068c\3\2\2\2b\u068e"+
		"\3\2\2\2d\u06d3\3\2\2\2f\u06d7\3\2\2\2h\u06db\3\2\2\2j\u0718\3\2\2\2l"+
		"\u071a\3\2\2\2n\u072f\3\2\2\2p\u073d\3\2\2\2r\u0766\3\2\2\2t\u0768\3\2"+
		"\2\2v\u077a\3\2\2\2x\u0866\3\2\2\2z\u086a\3\2\2\2|\u086c\3\2\2\2~\u0873"+
		"\3\2\2\2\u0080\u088d\3\2\2\2\u0082\u0893\3\2\2\2\u0084\u0895\3\2\2\2\u0086"+
		"\u08a2\3\2\2\2\u0088\u08a4\3\2\2\2\u008a\u08ad\3\2\2\2\u008c\u08b3\3\2"+
		"\2\2\u008e\u08b7\3\2\2\2\u0090\u08c9\3\2\2\2\u0092\u08fb\3\2\2\2\u0094"+
		"\u090c\3\2\2\2\u0096\u0916\3\2\2\2\u0098\u094e\3\2\2\2\u009a\u0950\3\2"+
		"\2\2\u009c\u095f\3\2\2\2\u009e\u0976\3\2\2\2\u00a0\u0994\3\2\2\2\u00a2"+
		"\u0997\3\2\2\2\u00a4\u09b2\3\2\2\2\u00a6\u09b9\3\2\2\2\u00a8\u09c0\3\2"+
		"\2\2\u00aa\u09c4\3\2\2\2\u00ac\u09c6\3\2\2\2\u00ae\u09ca\3\2\2\2\u00b0"+
		"\u09cc\3\2\2\2\u00b2\u09ce\3\2\2\2\u00b4\u09d0\3\2\2\2\u00b6\u09d2\3\2"+
		"\2\2\u00b8\u09da\3\2\2\2\u00ba\u09de\3\2\2\2\u00bc\u09e2\3\2\2\2\u00be"+
		"\u09e4\3\2\2\2\u00c0\u09f2\3\2\2\2\u00c2\u09f4\3\2\2\2\u00c4\u0a0e\3\2"+
		"\2\2\u00c6\u0a20\3\2\2\2\u00c8\u0a22\3\2\2\2\u00ca\u0a2d\3\2\2\2\u00cc"+
		"\u0a31\3\2\2\2\u00ce\u0a37\3\2\2\2\u00d0\u0a3d\3\2\2\2\u00d2\u0a47\3\2"+
		"\2\2\u00d4\u0a49\3\2\2\2\u00d6\u0a4b\3\2\2\2\u00d8\u0a54\3\2\2\2\u00da"+
		"\u0a61\3\2\2\2\u00dc\u0a76\3\2\2\2\u00de\u0a78\3\2\2\2\u00e0\u0a92\3\2"+
		"\2\2\u00e2\u0abe\3\2\2\2\u00e4\u0ae8\3\2\2\2\u00e6\u0b0b\3\2\2\2\u00e8"+
		"\u0b0d\3\2\2\2\u00ea\u0b18\3\2\2\2\u00ec\u0b1c\3\2\2\2\u00ee\u0b23\3\2"+
		"\2\2\u00f0\u0b30\3\2\2\2\u00f2\u0b34\3\2\2\2\u00f4\u0b44\3\2\2\2\u00f6"+
		"\u0b50\3\2\2\2\u00f8\u0b59\3\2\2\2\u00fa\u0b5e\3\2\2\2\u00fc\u0b68\3\2"+
		"\2\2\u00fe\u0b73\3\2\2\2\u0100\u0b82\3\2\2\2\u0102\u0b84\3\2\2\2\u0104"+
		"\u0b86\3\2\2\2\u0106\u0b89\3\2\2\2\u0108\u0b9f\3\2\2\2\u010a\u0ba1\3\2"+
		"\2\2\u010c\u0ba3\3\2\2\2\u010e\u0ba8\3\2\2\2\u0110\u0bb6\3\2\2\2\u0112"+
		"\u0bc5\3\2\2\2\u0114\u0bd6\3\2\2\2\u0116\u0be3\3\2\2\2\u0118\u0be5\3\2"+
		"\2\2\u011a\u0be7\3\2\2\2\u011c\u0beb\3\2\2\2\u011e\u0bfd\3\2\2\2\u0120"+
		"\u0c08\3\2\2\2\u0122\u0c0f\3\2\2\2\u0124\u0c18\3\2\2\2\u0126\u0c1d\3\2"+
		"\2\2\u0128\u0c23\3\2\2\2\u012a\u0c29\3\2\2\2\u012c\u0c35\3\2\2\2\u012e"+
		"\u0c3d\3\2\2\2\u0130\u0c54\3\2\2\2\u0132\u0c67\3\2\2\2\u0134\u0c74\3\2"+
		"\2\2\u0136\u0c7d\3\2\2\2\u0138\u0c85\3\2\2\2\u013a\u0c90\3\2\2\2\u013c"+
		"\u0c92\3\2\2\2\u013e\u0c94\3\2\2\2\u0140\u0caf\3\2\2\2\u0142\u0cb6\3\2"+
		"\2\2\u0144\u0cb8\3\2\2\2\u0146\u0cc0\3\2\2\2\u0148\u0ccc\3\2\2\2\u014a"+
		"\u0cd0\3\2\2\2\u014c\u0cde\3\2\2\2\u014e\u0ce4\3\2\2\2\u0150\u0cf0\3\2"+
		"\2\2\u0152\u0d01\3\2\2\2\u0154\u0d13\3\2\2\2\u0156\u0d15\3\2\2\2\u0158"+
		"\u0d43\3\2\2\2\u015a\u0d45\3\2\2\2\u015c\u0d59\3\2\2\2\u015e\u0d6e\3\2"+
		"\2\2\u0160\u0d72\3\2\2\2\u0162\u0d7e\3\2\2\2\u0164\u0d97\3\2\2\2\u0166"+
		"\u0d99\3\2\2\2\u0168\u0dc0\3\2\2\2\u016a\u0de7\3\2\2\2\u016c\u0df1\3\2"+
		"\2\2\u016e\u0e02\3\2\2\2\u0170\u0e0a\3\2\2\2\u0172\u0e26\3\2\2\2\u0174"+
		"\u0e3a\3\2\2\2\u0176\u0e52\3\2\2\2\u0178\u0e5b\3\2\2\2\u017a\u0e68\3\2"+
		"\2\2\u017c\u0e86\3\2\2\2\u017e\u0e88\3\2\2\2\u0180\u0ea0\3\2\2\2\u0182"+
		"\u0eb5\3\2\2\2\u0184\u0ee3\3\2\2\2\u0186\u0ee5\3\2\2\2\u0188\u0ee8\3\2"+
		"\2\2\u018a\u0eeb\3\2\2\2\u018c\u0eee\3\2\2\2\u018e\u0ef1\3\2\2\2\u0190"+
		"\u0ef4\3\2\2\2\u0192\u0ef7\3\2\2\2\u0194\u0efa\3\2\2\2\u0196\u0efd\3\2"+
		"\2\2\u0198\u0f00\3\2\2\2\u019a\u0f03\3\2\2\2\u019c\u0f06\3\2\2\2\u019e"+
		"\u0f09\3\2\2\2\u01a0\u0f0c\3\2\2\2\u01a2\u0f0f\3\2\2\2\u01a4\u0f12\3\2"+
		"\2\2\u01a6\u0f15\3\2\2\2\u01a8\u0f18\3\2\2\2\u01aa\u0f1b\3\2\2\2\u01ac"+
		"\u0f1e\3\2\2\2\u01ae\u0f21\3\2\2\2\u01b0\u0f24\3\2\2\2\u01b2\u0f27\3\2"+
		"\2\2\u01b4\u0f2a\3\2\2\2\u01b6\u0f2d\3\2\2\2\u01b8\u0f30\3\2\2\2\u01ba"+
		"\u0f33\3\2\2\2\u01bc\u0f36\3\2\2\2\u01be\u0f39\3\2\2\2\u01c0\u0f3c\3\2"+
		"\2\2\u01c2\u0f3f\3\2\2\2\u01c4\u0f42\3\2\2\2\u01c6\u0f45\3\2\2\2\u01c8"+
		"\u0f48\3\2\2\2\u01ca\u0f4b\3\2\2\2\u01cc\u0f4e\3\2\2\2\u01ce\u0f51\3\2"+
		"\2\2\u01d0\u0f54\3\2\2\2\u01d2\u0f57\3\2\2\2\u01d4\u0f5a\3\2\2\2\u01d6"+
		"\u0f5d\3\2\2\2\u01d8\u0f60\3\2\2\2\u01da\u0f63\3\2\2\2\u01dc\u0f66\3\2"+
		"\2\2\u01de\u0f69\3\2\2\2\u01e0\u0f6c\3\2\2\2\u01e2\u0f6f\3\2\2\2\u01e4"+
		"\u0f72\3\2\2\2\u01e6\u0f75\3\2\2\2\u01e8\u0f78\3\2\2\2\u01ea\u0f7b\3\2"+
		"\2\2\u01ec\u0f7e\3\2\2\2\u01ee\u0f81\3\2\2\2\u01f0\u0f84\3\2\2\2\u01f2"+
		"\u0f87\3\2\2\2\u01f4\u0f8a\3\2\2\2\u01f6\u0f8d\3\2\2\2\u01f8\u0f90\3\2"+
		"\2\2\u01fa\u0f93\3\2\2\2\u01fc\u0f96\3\2\2\2\u01fe\u0f99\3\2\2\2\u0200"+
		"\u0f9c\3\2\2\2\u0202\u0f9f\3\2\2\2\u0204\u0fa2\3\2\2\2\u0206\u0fa5\3\2"+
		"\2\2\u0208\u0fa8\3\2\2\2\u020a\u0fab\3\2\2\2\u020c\u0fae\3\2\2\2\u020e"+
		"\u0fb1\3\2\2\2\u0210\u0fb4\3\2\2\2\u0212\u0fb7\3\2\2\2\u0214\u0fba\3\2"+
		"\2\2\u0216\u0fbd\3\2\2\2\u0218\u0fc0\3\2\2\2\u021a\u0fc3\3\2\2\2\u021c"+
		"\u0fc6\3\2\2\2\u021e\u0fc9\3\2\2\2\u0220\u0fcc\3\2\2\2\u0222\u0fcf\3\2"+
		"\2\2\u0224\u0fd2\3\2\2\2\u0226\u0fd5\3\2\2\2\u0228\u0fd8\3\2\2\2\u022a"+
		"\u0fdb\3\2\2\2\u022c\u0fde\3\2\2\2\u022e\u0fe1\3\2\2\2\u0230\u0fe4\3\2"+
		"\2\2\u0232\u0fe7\3\2\2\2\u0234\u0fea\3\2\2\2\u0236\u0fed\3\2\2\2\u0238"+
		"\u0ff0\3\2\2\2\u023a\u0ff3\3\2\2\2\u023c\u0ff6\3\2\2\2\u023e\u0ff9\3\2"+
		"\2\2\u0240\u0ffc\3\2\2\2\u0242\u0fff\3\2\2\2\u0244\u1002\3\2\2\2\u0246"+
		"\u1005\3\2\2\2\u0248\u1008\3\2\2\2\u024a\u100b\3\2\2\2\u024c\u100e\3\2"+
		"\2\2\u024e\u1011\3\2\2\2\u0250\u1014\3\2\2\2\u0252\u1017\3\2\2\2\u0254"+
		"\u101a\3\2\2\2\u0256\u101d\3\2\2\2\u0258\u1020\3\2\2\2\u025a\u1023\3\2"+
		"\2\2\u025c\u1026\3\2\2\2\u025e\u1029\3\2\2\2\u0260\u102c\3\2\2\2\u0262"+
		"\u102f\3\2\2\2\u0264\u1032\3\2\2\2\u0266\u1035\3\2\2\2\u0268\u1038\3\2"+
		"\2\2\u026a\u103b\3\2\2\2\u026c\u103e\3\2\2\2\u026e\u1042\3\2\2\2\u0270"+
		"\u1045\3\2\2\2\u0272\u1049\3\2\2\2\u0274\u104d\3\2\2\2\u0276\u1051\3\2"+
		"\2\2\u0278\u1055\3\2\2\2\u027a\u1059\3\2\2\2\u027c\u105d\3\2\2\2\u027e"+
		"\u1061\3\2\2\2\u0280\u1065\3\2\2\2\u0282\u1069\3\2\2\2\u0284\u106d\3\2"+
		"\2\2\u0286\u1071\3\2\2\2\u0288\u1074\3\2\2\2\u028a\u1078\3\2\2\2\u028c"+
		"\u107c\3\2\2\2\u028e\u107f\3\2\2\2\u0290\u1082\3\2\2\2\u0292\u1086\3\2"+
		"\2\2\u0294\u1089\3\2\2\2\u0296\u108d\3\2\2\2\u0298\u1090\3\2\2\2\u029a"+
		"\u1093\3\2\2\2\u029c\u1096\3\2\2\2\u029e\u109a\3\2\2\2\u02a0\u109e\3\2"+
		"\2\2\u02a2\u10a2\3\2\2\2\u02a4\u10a6\3\2\2\2\u02a6\u10aa\3\2\2\2\u02a8"+
		"\u10ae\3\2\2\2\u02aa\u10b1\3\2\2\2\u02ac\u10b5\3\2\2\2\u02ae\u10b9\3\2"+
		"\2\2\u02b0\u10bc\3\2\2\2\u02b2\u10c0\3\2\2\2\u02b4\u10c4\3\2\2\2\u02b6"+
		"\u10c7\3\2\2\2\u02b8\u10cb\3\2\2\2\u02ba\u10ce\3\2\2\2\u02bc\u10d1\3\2"+
		"\2\2\u02be\u10d4\3\2\2\2\u02c0\u10d7\3\2\2\2\u02c2\u10da\3\2\2\2\u02c4"+
		"\u10de\3\2\2\2\u02c6\u10e1\3\2\2\2\u02c8\u10e5\3\2\2\2\u02ca\u10e8\3\2"+
		"\2\2\u02cc\u10ec\3\2\2\2\u02ce\u10f0\3\2\2\2\u02d0\u10f3\3\2\2\2\u02d2"+
		"\u10f7\3\2\2\2\u02d4\u10fa\3\2\2\2\u02d6\u10fe\3\2\2\2\u02d8\u1101\3\2"+
		"\2\2\u02da\u1105\3\2\2\2\u02dc\u1108\3\2\2\2\u02de\u110b\3\2\2\2\u02e0"+
		"\u110e\3\2\2\2\u02e2\u1111\3\2\2\2\u02e4\u1115\3\2\2\2\u02e6\u1119\3\2"+
		"\2\2\u02e8\u111d\3\2\2\2\u02ea\u1121\3\2\2\2\u02ec\u1125\3\2\2\2\u02ee"+
		"\u1129\3\2\2\2\u02f0\u112c\3\2\2\2\u02f2\u1130\3\2\2\2\u02f4\u1134\3\2"+
		"\2\2\u02f6\u1138\3\2\2\2\u02f8\u113b\3\2\2\2\u02fa\u113f\3\2\2\2\u02fc"+
		"\u1143\3\2\2\2\u02fe\u1147\3\2\2\2\u0300\u114b\3\2\2\2\u0302\u114f\3\2"+
		"\2\2\u0304\u1153\3\2\2\2\u0306\u1156\3\2\2\2\u0308\u1159\3\2\2\2\u030a"+
		"\u115d\3\2\2\2\u030c\u1161\3\2\2\2\u030e\u1164\3\2\2\2\u0310\u1168\3\2"+
		"\2\2\u0312\u116c\3\2\2\2\u0314\u1170\3\2\2\2\u0316\u1173\3\2\2\2\u0318"+
		"\u1177\3\2\2\2\u031a\u117b\3\2\2\2\u031c\u117f\3\2\2\2\u031e\u1183\3\2"+
		"\2\2\u0320\u1186\3\2\2\2\u0322\u118a\3\2\2\2\u0324\u118d\3\2\2\2\u0326"+
		"\u1191\3\2\2\2\u0328\u1195\3\2\2\2\u032a\u1199\3\2\2\2\u032c\u119c\3\2"+
		"\2\2\u032e\u11a0\3\2\2\2\u0330\u11a4\3\2\2\2\u0332\u11a7\3\2\2\2\u0334"+
		"\u11ab\3\2\2\2\u0336\u11af\3\2\2\2\u0338\u11b2\3\2\2\2\u033a\u11b6\3\2"+
		"\2\2\u033c\u11ba\3\2\2\2\u033e\u11bd\3\2\2\2\u0340\u11c1\3\2\2\2\u0342"+
		"\u11c5\3\2\2\2\u0344\u11c8\3\2\2\2\u0346\u11cb\3\2\2\2\u0348\u11ce\3\2"+
		"\2\2\u034a\u11d1\3\2\2\2\u034c\u11d4\3\2\2\2\u034e\u11d8\3\2\2\2\u0350"+
		"\u11dc\3\2\2\2\u0352\u11e0\3\2\2\2\u0354\u11e3\3\2\2\2\u0356\u11e7\3\2"+
		"\2\2\u0358\u11eb\3\2\2\2\u035a\u11ef\3\2\2\2\u035c\u11f3\3\2\2\2\u035e"+
		"\u11f6\3\2\2\2\u0360\u11fa\3\2\2\2\u0362\u11fe\3\2\2\2\u0364\u1202\3\2"+
		"\2\2\u0366\u1205\3\2\2\2\u0368\u1208\3\2\2\2\u036a\u120b\3\2\2\2\u036c"+
		"\u120f\3\2\2\2\u036e\u1212\3\2\2\2\u0370\u1216\3\2\2\2\u0372\u1219\3\2"+
		"\2\2\u0374\u121d\3\2\2\2\u0376\u1221\3\2\2\2\u0378\u1225\3\2\2\2\u037a"+
		"\u1229\3\2\2\2\u037c\u122c\3\2\2\2\u037e\u1230\3\2\2\2\u0380\u1234\3\2"+
		"\2\2\u0382\u1238\3\2\2\2\u0384\u123b\3\2\2\2\u0386\u123f\3\2\2\2\u0388"+
		"\u1243\3\2\2\2\u038a\u1246\3\2\2\2\u038c\u124a\3\2\2\2\u038e\u124e\3\2"+
		"\2\2\u0390\u1252\3\2\2\2\u0392\u1256\3\2\2\2\u0394\u1259\3\2\2\2\u0396"+
		"\u125d\3\2\2\2\u0398\u1261\3\2\2\2\u039a\u1264\3\2\2\2\u039c\u1268\3\2"+
		"\2\2\u039e\u126b\3\2\2\2\u03a0\u126f\3\2\2\2\u03a2\u1273\3\2\2\2\u03a4"+
		"\u1277\3\2\2\2\u03a6\u127b\3\2\2\2\u03a8\u127e\3\2\2\2\u03aa\u1283\3\2"+
		"\2\2\u03ac\u128c\3\2\2\2\u03ae\u1291\3\2\2\2\u03b0\u1296\3\2\2\2\u03b2"+
		"\u03b8\5(\25\2\u03b3\u03b8\5 \21\2\u03b4\u03b8\5\f\7\2\u03b5\u03b8\5\6"+
		"\4\2\u03b6\u03b8\5\4\3\2\u03b7\u03b2\3\2\2\2\u03b7\u03b3\3\2\2\2\u03b7"+
		"\u03b4\3\2\2\2\u03b7\u03b5\3\2\2\2\u03b7\u03b6\3\2\2\2\u03b8\u03b9\3\2"+
		"\2\2\u03b9\u03ba\t\2\2\2\u03ba\3\3\2\2\2\u03bb\u03bd\5\u01b8\u00dd\2\u03bc"+
		"\u03be\5\u01ce\u00e8\2\u03bd\u03bc\3\2\2\2\u03bd\u03be\3\2\2\2\u03be\u03c5"+
		"\3\2\2\2\u03bf\u03c6\5\32\16\2\u03c0\u03c1\5\u031c\u018f\2\u03c1\u03c2"+
		"\7\u00f0\2\2\u03c2\u03c3\5\32\16\2\u03c3\u03c4\7\u00ef\2\2\u03c4\u03c6"+
		"\3\2\2\2\u03c5\u03bf\3\2\2\2\u03c5\u03c0\3\2\2\2\u03c6\u03c8\3\2\2\2\u03c7"+
		"\u03c9\5|?\2\u03c8\u03c7\3\2\2\2\u03c8\u03c9\3\2\2\2\u03c9\u03cb\3\2\2"+
		"\2\u03ca\u03cc\5\u00c2b\2\u03cb\u03ca\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc"+
		"\u03ce\3\2\2\2\u03cd\u03cf\5\24\13\2\u03ce\u03cd\3\2\2\2\u03ce\u03cf\3"+
		"\2\2\2\u03cf\u03d1\3\2\2\2\u03d0\u03d2\5\34\17\2\u03d1\u03d0\3\2\2\2\u03d1"+
		"\u03d2\3\2\2\2\u03d2\5\3\2\2\2\u03d3\u03d4\5\u02f8\u017d\2\u03d4\u03d8"+
		"\5\u01e8\u00f5\2\u03d5\u03d6\5\u00b0Y\2\u03d6\u03d7\7\u00eb\2\2\u03d7"+
		"\u03d9\3\2\2\2\u03d8\u03d5\3\2\2\2\u03d8\u03d9\3\2\2\2\u03d9\u03da\3\2"+
		"\2\2\u03da\u03dc\5\u00aeX\2\u03db\u03dd\5|?\2\u03dc\u03db\3\2\2\2\u03dc"+
		"\u03dd\3\2\2\2\u03dd\u03de\3\2\2\2\u03de\u03e6\5\u0392\u01ca\2\u03df\u03e7"+
		"\5d\63\2\u03e0\u03e1\5\u00b0Y\2\u03e1\u03e2\7\u00eb\2\2\u03e2\u03e4\3"+
		"\2\2\2\u03e3\u03e0\3\2\2\2\u03e3\u03e4\3\2\2\2\u03e4\u03e5\3\2\2\2\u03e5"+
		"\u03e7\5\u00aeX\2\u03e6\u03df\3\2\2\2\u03e6\u03e3\3\2\2\2\u03e7\u03e9"+
		"\3\2\2\2\u03e8\u03ea\5|?\2\u03e9\u03e8\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea"+
		"\u03eb\3\2\2\2\u03eb\u03ec\5\u020e\u0108\2\u03ec\u03ed\7\u00f0\2\2\u03ed"+
		"\u03ee\5\u00d4k\2\u03ee\u03f7\7\u00ef\2\2\u03ef\u03f1\5\b\5\2\u03f0\u03f2"+
		"\5\n\6\2\u03f1\u03f0\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2\u03f8\3\2\2\2\u03f3"+
		"\u03f5\5\n\6\2\u03f4\u03f6\5\b\5\2\u03f5\u03f4\3\2\2\2\u03f5\u03f6\3\2"+
		"\2\2\u03f6\u03f8\3\2\2\2\u03f7\u03ef\3\2\2\2\u03f7\u03f3\3\2\2\2\u03f7"+
		"\u03f8\3\2\2\2\u03f8\u03fa\3\2\2\2\u03f9\u03fb\5\34\17\2\u03fa\u03f9\3"+
		"\2\2\2\u03fa\u03fb\3\2\2\2\u03fb\7\3\2\2\2\u03fc\u03fd\5\u039c\u01cf\2"+
		"\u03fd\u03fe\5\u02f0\u0179\2\u03fe\u03ff\5\u024a\u0126\2\u03ff\u0400\5"+
		"\u0258\u012d\2\u0400\u0401\5\u0236\u011c\2\u0401\u0402\5\u0080A\2\u0402"+
		"\u0405\7\u00f6\2\2\u0403\u0406\5\u01b6\u00dc\2\u0404\u0406\5<\37\2\u0405"+
		"\u0403\3\2\2\2\u0405\u0404\3\2\2\2\u0406\u0410\3\2\2\2\u0407\u0408\7\u00ec"+
		"\2\2\u0408\u0409\5\u0080A\2\u0409\u040c\7\u00f6\2\2\u040a\u040d\5\u01b6"+
		"\u00dc\2\u040b\u040d\5<\37\2\u040c\u040a\3\2\2\2\u040c\u040b\3\2\2\2\u040d"+
		"\u040f\3\2\2\2\u040e\u0407\3\2\2\2\u040f\u0412\3\2\2\2\u0410\u040e\3\2"+
		"\2\2\u0410\u0411\3\2\2\2\u0411\u0414\3\2\2\2\u0412\u0410\3\2\2\2\u0413"+
		"\u0415\5\u00c2b\2\u0414\u0413\3\2\2\2\u0414\u0415\3\2\2\2\u0415\u0419"+
		"\3\2\2\2\u0416\u0417\5\u01b8\u00dd\2\u0417\u0418\5\u00c2b\2\u0418\u041a"+
		"\3\2\2\2\u0419\u0416\3\2\2\2\u0419\u041a\3\2\2\2\u041a\t\3\2\2\2\u041b"+
		"\u041c\5\u039c\u01cf\2\u041c\u041d\5\u0200\u0101\2\u041d\u041e\5\u02f0"+
		"\u0179\2\u041e\u041f\5\u024a\u0126\2\u041f\u0424\5\u01e2\u00f2\2\u0420"+
		"\u0421\7\u00f0\2\2\u0421\u0422\5\u00b6\\\2\u0422\u0423\7\u00ef\2\2\u0423"+
		"\u0425\3\2\2\2\u0424\u0420\3\2\2\2\u0424\u0425\3\2\2\2\u0425\u0426\3\2"+
		"\2\2\u0426\u0427\5\u025e\u0130\2\u0427\u042a\7\u00f0\2\2\u0428\u042b\5"+
		"\u01b6\u00dc\2\u0429\u042b\5<\37\2\u042a\u0428\3\2\2\2\u042a\u0429\3\2"+
		"\2\2\u042b\u0433\3\2\2\2\u042c\u042f\7\u00ec\2\2\u042d\u0430\5\u01b6\u00dc"+
		"\2\u042e\u0430\5<\37\2\u042f\u042d\3\2\2\2\u042f\u042e\3\2\2\2\u0430\u0432"+
		"\3\2\2\2\u0431\u042c\3\2\2\2\u0432\u0435\3\2\2\2\u0433\u0431\3\2\2\2\u0433"+
		"\u0434\3\2\2\2\u0434\u0436\3\2\2\2\u0435\u0433\3\2\2\2\u0436\u0438\7\u00ef"+
		"\2\2\u0437\u0439\5\u00c2b\2\u0438\u0437\3\2\2\2\u0438\u0439\3\2\2\2\u0439"+
		"\13\3\2\2\2\u043a\u043d\5\u01e2\u00f2\2\u043b\u043e\5\16\b\2\u043c\u043e"+
		"\5\26\f\2\u043d\u043b\3\2\2\2\u043d\u043c\3\2\2\2\u043e\r\3\2\2\2\u043f"+
		"\u0446\5\20\t\2\u0440\u0442\5\22\n\2\u0441\u0443\5\24\13\2\u0442\u0441"+
		"\3\2\2\2\u0442\u0443\3\2\2\2\u0443\u0447\3\2\2\2\u0444\u0447\5(\25\2\u0445"+
		"\u0447\5d\63\2\u0446\u0440\3\2\2\2\u0446\u0444\3\2\2\2\u0446\u0445\3\2"+
		"\2\2\u0447\u0449\3\2\2\2\u0448\u044a\5\34\17\2\u0449\u0448\3\2\2\2\u0449"+
		"\u044a\3\2\2\2\u044a\17\3\2\2\2\u044b\u044c\5\u01e8\u00f5\2\u044c\u044e"+
		"\5\32\16\2\u044d\u044f\5|?\2\u044e\u044d\3\2\2\2\u044e\u044f\3\2\2\2\u044f"+
		"\u0454\3\2\2\2\u0450\u0451\7\u00f0\2\2\u0451\u0452\5\u00b6\\\2\u0452\u0453"+
		"\7\u00ef\2\2\u0453\u0455\3\2\2\2\u0454\u0450\3\2\2\2\u0454\u0455\3\2\2"+
		"\2\u0455\21\3\2\2\2\u0456\u0457\5\u025e\u0130\2\u0457\u045a\7\u00f0\2"+
		"\2\u0458\u045b\5\u01b6\u00dc\2\u0459\u045b\5<\37\2\u045a\u0458\3\2\2\2"+
		"\u045a\u0459\3\2\2\2\u045b\u0463\3\2\2\2\u045c\u045f\7\u00ec\2\2\u045d"+
		"\u0460\5\u01b6\u00dc\2\u045e\u0460\5<\37\2\u045f\u045d\3\2\2\2\u045f\u045e"+
		"\3\2\2\2\u0460\u0462\3\2\2\2\u0461\u045c\3\2\2\2\u0462\u0465\3\2\2\2\u0463"+
		"\u0461\3\2\2\2\u0463\u0464\3\2\2\2\u0464\u0466\3\2\2\2\u0465\u0463\3\2"+
		"\2\2\u0466\u0467\7\u00ef\2\2\u0467\23\3\2\2\2\u0468\u046b\5\u0344\u01a3"+
		"\2\u0469\u046b\5\u0346\u01a4\2\u046a\u0468\3\2\2\2\u046a\u0469\3\2\2\2"+
		"\u046b\u046c\3\2\2\2\u046c\u0471\5<\37\2\u046d\u046e\7\u00ec\2\2\u046e"+
		"\u0470\5<\37\2\u046f\u046d\3\2\2\2\u0470\u0473\3\2\2\2\u0471\u046f\3\2"+
		"\2\2\u0471\u0472\3\2\2\2\u0472\u0474\3\2\2\2\u0473\u0471\3\2\2\2\u0474"+
		"\u0475\5\u01e8\u00f5\2\u0475\u047a\5\36\20\2\u0476\u0477\7\u00ec\2\2\u0477"+
		"\u0479\5\36\20\2\u0478\u0476\3\2\2\2\u0479\u047c\3\2\2\2\u047a\u0478\3"+
		"\2\2\2\u047a\u047b\3\2\2\2\u047b\25\3\2\2\2\u047c\u047a\3\2\2\2\u047d"+
		"\u0485\5\u018a\u00c6\2\u047e\u0480\5\20\t\2\u047f\u0481\5\22\n\2\u0480"+
		"\u047f\3\2\2\2\u0480\u0481\3\2\2\2\u0481\u0483\3\2\2\2\u0482\u0484\5\34"+
		"\17\2\u0483\u0482\3\2\2\2\u0483\u0484\3\2\2\2\u0484\u0486\3\2\2\2\u0485"+
		"\u047e\3\2\2\2\u0486\u0487\3\2\2\2\u0487\u0485\3\2\2\2\u0487\u0488\3\2"+
		"\2\2\u0488\u048b\3\2\2\2\u0489\u048b\5\30\r\2\u048a\u047d\3\2\2\2\u048a"+
		"\u0489\3\2\2\2\u048b\u048c\3\2\2\2\u048c\u048d\5d\63\2\u048d\27\3\2\2"+
		"\2\u048e\u0491\5\u018a\u00c6\2\u048f\u0491\5\u02ba\u015e\2\u0490\u048e"+
		"\3\2\2\2\u0490\u048f\3\2\2\2\u0490\u0491\3\2\2\2\u0491\u049d\3\2\2\2\u0492"+
		"\u0493\5\u039c\u01cf\2\u0493\u0494\5\u00d4k\2\u0494\u0499\5\u024a\u0126"+
		"\2\u0495\u0497\5\20\t\2\u0496\u0498\5\22\n\2\u0497\u0496\3\2\2\2\u0497"+
		"\u0498\3\2\2\2\u0498\u049a\3\2\2\2\u0499\u0495\3\2\2\2\u049a\u049b\3\2"+
		"\2\2\u049b\u0499\3\2\2\2\u049b\u049c\3\2\2\2\u049c\u049e\3\2\2\2\u049d"+
		"\u0492\3\2\2\2\u049e\u049f\3\2\2\2\u049f\u049d\3\2\2\2\u049f\u04a0\3\2"+
		"\2\2\u04a0\u04a1\3\2\2\2\u04a1\u04a6\5\u01c0\u00e1\2\u04a2\u04a4\5\20"+
		"\t\2\u04a3\u04a5\5\22\n\2\u04a4\u04a3\3\2\2\2\u04a4\u04a5\3\2\2\2\u04a5"+
		"\u04a7\3\2\2\2\u04a6\u04a2\3\2\2\2\u04a7\u04a8\3\2\2\2\u04a8\u04a6\3\2"+
		"\2\2\u04a8\u04a9\3\2\2\2\u04a9\31\3\2\2\2\u04aa\u04ab\5\u00b0Y\2\u04ab"+
		"\u04ac\7\u00eb\2\2\u04ac\u04ae\3\2\2\2\u04ad\u04aa\3\2\2\2\u04ad\u04ae"+
		"\3\2\2\2\u04ae\u04af\3\2\2\2\u04af\u04b3\5\u00aeX\2\u04b0\u04b4\5\u0098"+
		"M\2\u04b1\u04b2\7\u00ee\2\2\u04b2\u04b4\5\u00b4[\2\u04b3\u04b0\3\2\2\2"+
		"\u04b3\u04b1\3\2\2\2\u04b3\u04b4\3\2\2\2\u04b4\u04c6\3\2\2\2\u04b5\u04b7"+
		"\5d\63\2\u04b6\u04b8\5\u009aN\2\u04b7\u04b6\3\2\2\2\u04b7\u04b8\3\2\2"+
		"\2\u04b8\u04bb\3\2\2\2\u04b9\u04bc\5\u017a\u00be\2\u04ba\u04bc\5\u0180"+
		"\u00c1\2\u04bb\u04b9\3\2\2\2\u04bb\u04ba\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bc"+
		"\u04c6\3\2\2\2\u04bd\u04be\7\u00f0\2\2\u04be\u04c0\5d\63\2\u04bf\u04c1"+
		"\5\u009aN\2\u04c0\u04bf\3\2\2\2\u04c0\u04c1\3\2\2\2\u04c1\u04c2\3\2\2"+
		"\2\u04c2\u04c3\7\u00ef\2\2\u04c3\u04c6\3\2\2\2\u04c4\u04c6\5\u009cO\2"+
		"\u04c5\u04ad\3\2\2\2\u04c5\u04b5\3\2\2\2\u04c5\u04bd\3\2\2\2\u04c5\u04c4"+
		"\3\2\2\2\u04c6\33\3\2\2\2\u04c7\u04c8\5\u02ec\u0177\2\u04c8\u04d1\5\u02b2"+
		"\u015a\2\u04c9\u04cd\5\u01e8\u00f5\2\u04ca\u04cb\5\u00b0Y\2\u04cb\u04cc"+
		"\7\u00eb\2\2\u04cc\u04ce\3\2\2\2\u04cd\u04ca\3\2\2\2\u04cd\u04ce\3\2\2"+
		"\2\u04ce\u04cf\3\2\2\2\u04cf\u04d0\5\u00aeX\2\u04d0\u04d2\3\2\2\2\u04d1"+
		"\u04c9\3\2\2\2\u04d1\u04d2\3\2\2\2\u04d2\u04d7\3\2\2\2\u04d3\u04d4\7\u00f0"+
		"\2\2\u04d4\u04d5\5`\61\2\u04d5\u04d6\7\u00ef\2\2\u04d6\u04d8\3\2\2\2\u04d7"+
		"\u04d3\3\2\2\2\u04d7\u04d8\3\2\2\2\u04d8\u04df\3\2\2\2\u04d9\u04da\5\u0340"+
		"\u01a1\2\u04da\u04dd\5\u02e2\u0172\2\u04db\u04de\7\u0103\2\2\u04dc\u04de"+
		"\5\u0386\u01c4\2\u04dd\u04db\3\2\2\2\u04dd\u04dc\3\2\2\2\u04de\u04e0\3"+
		"\2\2\2\u04df\u04d9\3\2\2\2\u04df\u04e0\3\2\2\2\u04e0\35\3\2\2\2\u04e1"+
		"\u04e4\5\u008cG\2\u04e2\u04e4\5\u008aF\2\u04e3\u04e1\3\2\2\2\u04e3\u04e2"+
		"\3\2\2\2\u04e4\37\3\2\2\2\u04e5\u04ec\5\u0258\u012d\2\u04e6\u04e7\5\u031c"+
		"\u018f\2\u04e7\u04e8\7\u00f0\2\2\u04e8\u04e9\5\32\16\2\u04e9\u04ea\7\u00ef"+
		"\2\2\u04ea\u04ed\3\2\2\2\u04eb\u04ed\5\32\16\2\u04ec\u04e6\3\2\2\2\u04ec"+
		"\u04eb\3\2\2\2\u04ed\u04ef\3\2\2\2\u04ee\u04f0\5|?\2\u04ef\u04ee\3\2\2"+
		"\2\u04ef\u04f0\3\2\2\2\u04f0\u04f1\3\2\2\2\u04f1\u04f3\5\"\22\2\u04f2"+
		"\u04f4\5\u00c2b\2\u04f3\u04f2\3\2\2\2\u04f3\u04f4\3\2\2\2\u04f4\u04f6"+
		"\3\2\2\2\u04f5\u04f7\5\24\13\2\u04f6\u04f5\3\2\2\2\u04f6\u04f7\3\2\2\2"+
		"\u04f7\u04f9\3\2\2\2\u04f8\u04fa\5\34\17\2\u04f9\u04f8\3\2\2\2\u04f9\u04fa"+
		"\3\2\2\2\u04fa!\3\2\2\2\u04fb\u0513\5\u0236\u011c\2\u04fc\u04fd\5\u0394"+
		"\u01cb\2\u04fd\u04fe\7\u00f0\2\2\u04fe\u04ff\5|?\2\u04ff\u0500\7\u00ef"+
		"\2\2\u0500\u0503\7\u00f6\2\2\u0501\u0504\5<\37\2\u0502\u0504\5d\63\2\u0503"+
		"\u0501\3\2\2\2\u0503\u0502\3\2\2\2\u0504\u0514\3\2\2\2\u0505\u0508\5$"+
		"\23\2\u0506\u0508\5&\24\2\u0507\u0505\3\2\2\2\u0507\u0506\3\2\2\2\u0508"+
		"\u0510\3\2\2\2\u0509\u050c\7\u00ec\2\2\u050a\u050d\5$\23\2\u050b\u050d"+
		"\5&\24\2\u050c\u050a\3\2\2\2\u050c\u050b\3\2\2\2\u050d\u050f\3\2\2\2\u050e"+
		"\u0509\3\2\2\2\u050f\u0512\3\2\2\2\u0510\u050e\3\2\2\2\u0510\u0511\3\2"+
		"\2\2\u0511\u0514\3\2\2\2\u0512\u0510\3\2\2\2\u0513\u04fc\3\2\2\2\u0513"+
		"\u0507\3\2\2\2\u0514#\3\2\2\2\u0515\u0516\7\u00f0\2\2\u0516\u0517\5\u00b6"+
		"\\\2\u0517\u0518\7\u00ef\2\2\u0518\u0519\7\u00f6\2\2\u0519\u051a\5d\63"+
		"\2\u051a%\3\2\2\2\u051b\u051c\5\u0080A\2\u051c\u0520\7\u00f6\2\2\u051d"+
		"\u0521\5\u01b6\u00dc\2\u051e\u0521\5d\63\2\u051f\u0521\5<\37\2\u0520\u051d"+
		"\3\2\2\2\u0520\u051e\3\2\2\2\u0520\u051f\3\2\2\2\u0521\'\3\2\2\2\u0522"+
		"\u0524\5*\26\2\u0523\u0522\3\2\2\2\u0523\u0524\3\2\2\2\u0524\u0556\3\2"+
		"\2\2\u0525\u052a\5\u0232\u011a\2\u0526\u052b\5\u01bc\u00df\2\u0527\u052b"+
		"\5\u0256\u012c\2\u0528\u052b\5\u0254\u012b\2\u0529\u052b\5\u018a\u00c6"+
		"\2\u052a\u0526\3\2\2\2\u052a\u0527\3\2\2\2\u052a\u0528\3\2\2\2\u052a\u0529"+
		"\3\2\2\2\u052a\u052b\3\2\2\2\u052b\u052c\3\2\2\2\u052c\u0536\5\64\33\2"+
		"\u052d\u052e\5\u01e8\u00f5\2\u052e\u0533\5\36\20\2\u052f\u0530\7\u00ec"+
		"\2\2\u0530\u0532\5\36\20\2\u0531\u052f\3\2\2\2\u0532\u0535\3\2\2\2\u0533"+
		"\u0531\3\2\2\2\u0533\u0534\3\2\2\2\u0534\u0537\3\2\2\2\u0535\u0533\3\2"+
		"\2\2\u0536\u052d\3\2\2\2\u0536\u0537\3\2\2\2\u0537\u0538\3\2\2\2\u0538"+
		"\u0539\5\u01ce\u00e8\2\u0539\u053b\5\u008eH\2\u053a\u053c\5\u00c2b\2\u053b"+
		"\u053a\3\2\2\2\u053b\u053c\3\2\2\2\u053c\u053e\3\2\2\2\u053d\u053f\5\u00c4"+
		"c\2\u053e\u053d\3\2\2\2\u053e\u053f\3\2\2\2\u053f\u0541\3\2\2\2\u0540"+
		"\u0542\5\u00c6d\2\u0541\u0540\3\2\2\2\u0541\u0542\3\2\2\2\u0542\u0544"+
		"\3\2\2\2\u0543\u0545\5\u011c\u008f\2\u0544\u0543\3\2\2\2\u0544\u0545\3"+
		"\2\2\2\u0545\u0549\3\2\2\2\u0546\u0548\5\u014c\u00a7\2\u0547\u0546\3\2"+
		"\2\2\u0548\u054b\3\2\2\2\u0549\u0547\3\2\2\2\u0549\u054a\3\2\2\2\u054a"+
		"\u054d\3\2\2\2\u054b\u0549\3\2\2\2\u054c\u054e\5\u0174\u00bb\2\u054d\u054c"+
		"\3\2\2\2\u054d\u054e\3\2\2\2\u054e\u0550\3\2\2\2\u054f\u0551\5\u014e\u00a8"+
		"\2\u0550\u054f\3\2\2\2\u0550\u0551\3\2\2\2\u0551\u0553\3\2\2\2\u0552\u0554"+
		"\5\u0174\u00bb\2\u0553\u0552\3\2\2\2\u0553\u0554\3\2\2\2\u0554\u0557\3"+
		"\2\2\2\u0555\u0557\5d\63\2\u0556\u0525\3\2\2\2\u0556\u0555\3\2\2\2\u0557"+
		")\3\2\2\2\u0558\u0559\5\u026a\u0136\2\u0559\u055d\5,\27\2\u055a\u055c"+
		"\5.\30\2\u055b\u055a\3\2\2\2\u055c\u055f\3\2\2\2\u055d\u055b\3\2\2\2\u055d"+
		"\u055e\3\2\2\2\u055e\u0561\3\2\2\2\u055f\u055d\3\2\2\2\u0560\u0562\5\60"+
		"\31\2\u0561\u0560\3\2\2\2\u0561\u0562\3\2\2\2\u0562\u0564\3\2\2\2\u0563"+
		"\u0565\5\62\32\2\u0564\u0563\3\2\2\2\u0564\u0565\3\2\2\2\u0565+\3\2\2"+
		"\2\u0566\u056b\5|?\2\u0567\u0568\7\u00f0\2\2\u0568\u0569\5\64\33\2\u0569"+
		"\u056a\7\u00ef\2\2\u056a\u056c\3\2\2\2\u056b\u0567\3\2\2\2\u056b\u056c"+
		"\3\2\2\2\u056c\u056d\3\2\2\2\u056d\u056e\5\u0194\u00cb\2\u056e\u056f\5"+
		"d\63\2\u056f-\3\2\2\2\u0570\u0571\7\u00ec\2\2\u0571\u0576\5|?\2\u0572"+
		"\u0573\7\u00f0\2\2\u0573\u0574\5\64\33\2\u0574\u0575\7\u00ef\2\2\u0575"+
		"\u0577\3\2\2\2\u0576\u0572\3\2\2\2\u0576\u0577\3\2\2\2\u0577\u0578\3\2"+
		"\2\2\u0578\u0579\5\u0194\u00cb\2\u0579\u057a\5d\63\2\u057a/\3\2\2\2\u057b"+
		"\u057e\5\u0352\u01aa\2\u057c\u057f\5\u02a6\u0154\2\u057d\u057f\5\u0282"+
		"\u0142\2\u057e\u057c\3\2\2\2\u057e\u057d\3\2\2\2\u057f\u0580\3\2\2\2\u0580"+
		"\u0581\5\u02ba\u015e\2\u0581\u0582\5\u019c\u00cf\2\u0582\u0584\5~@\2\u0583"+
		"\u0585\5\u0196\u00cc\2\u0584\u0583\3\2\2\2\u0584\u0585\3\2\2\2\u0585\u0587"+
		"\3\2\2\2\u0586\u0588\5\u01ba\u00de\2\u0587\u0586\3\2\2\2\u0587\u0588\3"+
		"\2\2\2\u0588\u058c\3\2\2\2\u0589\u058a\5\u0314\u018b\2\u058a\u058b\5\u02ba"+
		"\u015e\2\u058b\u058d\3\2\2\2\u058c\u0589\3\2\2\2\u058c\u058d\3\2\2\2\u058d"+
		"\u0591\3\2\2\2\u058e\u058f\5\u0314\u018b\2\u058f\u0590\5\u02d6\u016c\2"+
		"\u0590\u0592\3\2\2\2\u0591\u058e\3\2\2\2\u0591\u0592\3\2\2\2\u0592\u05a7"+
		"\3\2\2\2\u0593\u0594\7\u00ec\2\2\u0594\u0596\5~@\2\u0595\u0597\5\u0196"+
		"\u00cc\2\u0596\u0595\3\2\2\2\u0596\u0597\3\2\2\2\u0597\u0599\3\2\2\2\u0598"+
		"\u059a\5\u01ba\u00de\2\u0599\u0598\3\2\2\2\u0599\u059a\3\2\2\2\u059a\u059e"+
		"\3\2\2\2\u059b\u059c\5\u0314\u018b\2\u059c\u059d\5\u02ba\u015e\2\u059d"+
		"\u059f\3\2\2\2\u059e\u059b\3\2\2\2\u059e\u059f\3\2\2\2\u059f\u05a3\3\2"+
		"\2\2\u05a0\u05a1\5\u0314\u018b\2\u05a1\u05a2\5\u02d6\u016c\2\u05a2\u05a4"+
		"\3\2\2\2\u05a3\u05a0\3\2\2\2\u05a3\u05a4\3\2\2\2\u05a4\u05a6\3\2\2\2\u05a5"+
		"\u0593\3\2\2\2\u05a6\u05a9\3\2\2\2\u05a7\u05a5\3\2\2\2\u05a7\u05a8\3\2"+
		"\2\2\u05a8\u05aa\3\2\2\2\u05a9\u05a7\3\2\2\2\u05aa\u05ab\5\u0236\u011c"+
		"\2\u05ab\u05ac\5\u008cG\2\u05ac\61\3\2\2\2\u05ad\u05ae\5\u029a\u014e\2"+
		"\u05ae\u05b3\5~@\2\u05af\u05b0\7\u00ec\2\2\u05b0\u05b2\5~@\2\u05b1\u05af"+
		"\3\2\2\2\u05b2\u05b5\3\2\2\2\u05b3\u05b1\3\2\2\2\u05b3\u05b4\3\2\2\2\u05b4"+
		"\u05b6\3\2\2\2\u05b5\u05b3\3\2\2\2\u05b6\u05b7\5\u0236\u011c\2\u05b7\u05b8"+
		"\5\u008cG\2\u05b8\u05b9\5\u024c\u0127\2\u05b9\u05ba\5\u0142\u00a2\2\u05ba"+
		"\u05bb\5\u01b6\u00dc\2\u05bb\u05bc\5\u0142\u00a2\2\u05bc\63\3\2\2\2\u05bd"+
		"\u05c1\5\66\34\2\u05be\u05c0\58\35\2\u05bf\u05be\3\2\2\2\u05c0\u05c3\3"+
		"\2\2\2\u05c1\u05bf\3\2\2\2\u05c1\u05c2\3\2\2\2\u05c2\65\3\2\2\2\u05c3"+
		"\u05c1\3\2\2\2\u05c4\u05c5\5:\36\2\u05c5\67\3\2\2\2\u05c6\u05c7\7\u00ec"+
		"\2\2\u05c7\u05c8\5:\36\2\u05c89\3\2\2\2\u05c9\u05d5\7\u00ed\2\2\u05ca"+
		"\u05cb\5\u00b0Y\2\u05cb\u05cc\7\u00eb\2\2\u05cc\u05ce\3\2\2\2\u05cd\u05ca"+
		"\3\2\2\2\u05cd\u05ce\3\2\2\2\u05ce\u05cf\3\2\2\2\u05cf\u05d0\5|?\2\u05d0"+
		"\u05d1\7\u00eb\2\2\u05d1\u05d2\7\u00ed\2\2\u05d2\u05d5\3\2\2\2\u05d3\u05d5"+
		"\5<\37\2\u05d4\u05c9\3\2\2\2\u05d4\u05cd\3\2\2\2\u05d4\u05d3\3\2\2\2\u05d5"+
		"\u05d7\3\2\2\2\u05d6\u05d8\5~@\2\u05d7\u05d6\3\2\2\2\u05d7\u05d8\3\2\2"+
		"\2\u05d8;\3\2\2\2\u05d9\u05da\5> \2\u05da=\3\2\2\2\u05db\u05e4\5@!\2\u05dc"+
		"\u05e0\7\u00f3\2\2\u05dd\u05e0\7\u00f4\2\2\u05de\u05e0\5\u03aa\u01d6\2"+
		"\u05df\u05dc\3\2\2\2\u05df\u05dd\3\2\2\2\u05df\u05de\3\2\2\2\u05e0\u05e1"+
		"\3\2\2\2\u05e1\u05e3\5@!\2\u05e2\u05df\3\2\2\2\u05e3\u05e6\3\2\2\2\u05e4"+
		"\u05e2\3\2\2\2\u05e4\u05e5\3\2\2\2\u05e5?\3\2\2\2\u05e6\u05e4\3\2\2\2"+
		"\u05e7\u05ec\5B\"\2\u05e8\u05e9\t\3\2\2\u05e9\u05eb\5B\"\2\u05ea\u05e8"+
		"\3\2\2\2\u05eb\u05ee\3\2\2\2\u05ec\u05ea\3\2\2\2\u05ec\u05ed\3\2\2\2\u05ed"+
		"A\3\2\2\2\u05ee\u05ec\3\2\2\2\u05ef\u05f4\7\u00f3\2\2\u05f0\u05f4\7\u00f4"+
		"\2\2\u05f1\u05f4\5\u021a\u010e\2\u05f2\u05f4\5\u028e\u0148\2\u05f3\u05ef"+
		"\3\2\2\2\u05f3\u05f0\3\2\2\2\u05f3\u05f1\3\2\2\2\u05f3\u05f2\3\2\2\2\u05f3"+
		"\u05f4\3\2\2\2\u05f4\u05f5\3\2\2\2\u05f5\u05f6\5D#\2\u05f6C\3\2\2\2\u05f7"+
		"\u0608\5l\67\2\u05f8\u0608\5h\65\2\u05f9\u0608\5n8\2\u05fa\u0608\5p9\2"+
		"\u05fb\u0608\5F$\2\u05fc\u0608\5V,\2\u05fd\u0608\5v<\2\u05fe\u0608\5r"+
		":\2\u05ff\u0608\5^\60\2\u0600\u0608\5T+\2\u0601\u0608\5R*\2\u0602\u0608"+
		"\5\u0158\u00ad\2\u0603\u0608\5\u0164\u00b3\2\u0604\u0608\5J&\2\u0605\u0608"+
		"\5`\61\2\u0606\u0608\5d\63\2\u0607\u05f7\3\2\2\2\u0607\u05f8\3\2\2\2\u0607"+
		"\u05f9\3\2\2\2\u0607\u05fa\3\2\2\2\u0607\u05fb\3\2\2\2\u0607\u05fc\3\2"+
		"\2\2\u0607\u05fd\3\2\2\2\u0607\u05fe\3\2\2\2\u0607\u05ff\3\2\2\2\u0607"+
		"\u0600\3\2\2\2\u0607\u0601\3\2\2\2\u0607\u0602\3\2\2\2\u0607\u0603\3\2"+
		"\2\2\u0607\u0604\3\2\2\2\u0607\u0605\3\2\2\2\u0607\u0606\3\2\2\2\u0608"+
		"E\3\2\2\2\u0609\u060a\7\u00f0\2\2\u060a\u060b\5H%\2\u060b\u060c\7\u00ef"+
		"\2\2\u060cG\3\2\2\2\u060d\u060e\5<\37\2\u060eI\3\2\2\2\u060f\u0612\5\u0086"+
		"D\2\u0610\u0612\5\u0154\u00ab\2\u0611\u060f\3\2\2\2\u0611\u0610\3\2\2"+
		"\2\u0612\u0613\3\2\2\2\u0613\u0615\7\u00f0\2\2\u0614\u0616\5L\'\2\u0615"+
		"\u0614\3\2\2\2\u0615\u0616\3\2\2\2\u0616\u0617\3\2\2\2\u0617\u0618\7\u00ef"+
		"\2\2\u0618K\3\2\2\2\u0619\u0623\7\u00ed\2\2\u061a\u061f\5N(\2\u061b\u061c"+
		"\7\u00ec\2\2\u061c\u061e\5N(\2\u061d\u061b\3\2\2\2\u061e\u0621\3\2\2\2"+
		"\u061f\u061d\3\2\2\2\u061f\u0620\3\2\2\2\u0620\u0623\3\2\2\2\u0621\u061f"+
		"\3\2\2\2\u0622\u0619\3\2\2\2\u0622\u061a\3\2\2\2\u0623M\3\2\2\2\u0624"+
		"\u0625\5P)\2\u0625\u0626\7\u00fb\2\2\u0626\u0628\3\2\2\2\u0627\u0624\3"+
		"\2\2\2\u0627\u0628\3\2\2\2\u0628\u0629\3\2\2\2\u0629\u062a\5H%\2\u062a"+
		"O\3\2\2\2\u062b\u062c\5\u0088E\2\u062cQ\3\2\2\2\u062d\u062e\5\u037e\u01c0"+
		"\2\u062e\u0638\7\u00f0\2\2\u062f\u0633\5\u02d8\u016d\2\u0630\u0633\5\u037c"+
		"\u01bf\2\u0631\u0633\5\u0280\u0141\2\u0632\u062f\3\2\2\2\u0632\u0630\3"+
		"\2\2\2\u0632\u0631\3\2\2\2\u0632\u0633\3\2\2\2\u0633\u0635\3\2\2\2\u0634"+
		"\u0636\7\u00e4\2\2\u0635\u0634\3\2\2\2\u0635\u0636\3\2\2\2\u0636\u0637"+
		"\3\2\2\2\u0637\u0639\5\u01ce\u00e8\2\u0638\u0632\3\2\2\2\u0638\u0639\3"+
		"\2\2\2\u0639\u063a\3\2\2\2\u063a\u063b\5<\37\2\u063b\u063c\7\u00ef\2\2"+
		"\u063c\u0648\3\2\2\2\u063d\u063e\5\u0236\u011c\2\u063e\u063f\7\u00f0\2"+
		"\2\u063f\u0640\5<\37\2\u0640\u0641\7\u00ef\2\2\u0641\u0648\3\2\2\2\u0642"+
		"\u0643\5\u02e6\u0174\2\u0643\u0644\7\u00f0\2\2\u0644\u0645\5\u00d4k\2"+
		"\u0645\u0646\7\u00ef\2\2\u0646\u0648\3\2\2\2\u0647\u062d\3\2\2\2\u0647"+
		"\u063d\3\2\2\2\u0647\u0642\3\2\2\2\u0648S\3\2\2\2\u0649\u064c\5\u019e"+
		"\u00d0\2\u064a\u064d\5X-\2\u064b\u064d\5Z.\2\u064c\u064a\3\2\2\2\u064c"+
		"\u064b\3\2\2\2\u064d\u064f\3\2\2\2\u064e\u0650\5\\/\2\u064f\u064e\3\2"+
		"\2\2\u064f\u0650\3\2\2\2\u0650\u0651\3\2\2\2\u0651\u0652\5\u02ae\u0158"+
		"\2\u0652U\3\2\2\2\u0653\u0654\5\u0298\u014d\2\u0654\u0655\5d\63\2\u0655"+
		"W\3\2\2\2\u0656\u065c\5H%\2\u0657\u0658\5\u039c\u01cf\2\u0658\u0659\5"+
		"H%\2\u0659\u065a\5\u024a\u0126\2\u065a\u065b\5H%\2\u065b\u065d\3\2\2\2"+
		"\u065c\u0657\3\2\2\2\u065d\u065e\3\2\2\2\u065e\u065c\3\2\2\2\u065e\u065f"+
		"\3\2\2\2\u065fY\3\2\2\2\u0660\u0661\5\u039c\u01cf\2\u0661\u0662\5\u00d4"+
		"k\2\u0662\u0663\5\u024a\u0126\2\u0663\u0664\5H%\2\u0664\u0666\3\2\2\2"+
		"\u0665\u0660\3\2\2\2\u0666\u0667\3\2\2\2\u0667\u0665\3\2\2\2\u0667\u0668"+
		"\3\2\2\2\u0668[\3\2\2\2\u0669\u066a\5\u01c0\u00e1\2\u066a\u066b\5H%\2"+
		"\u066b]\3\2\2\2\u066c\u066d\7\u00f0\2\2\u066d\u066e\5<\37\2\u066e\u066f"+
		"\7\u00ef\2\2\u066f\u0670\7\u00eb\2\2\u0670\u0678\3\2\2\2\u0671\u0672\5"+
		"\u00aeX\2\u0672\u0673\7\u00eb\2\2\u0673\u0678\3\2\2\2\u0674\u0675\5J&"+
		"\2\u0675\u0676\7\u00eb\2\2\u0676\u0678\3\2\2\2\u0677\u066c\3\2\2\2\u0677"+
		"\u0671\3\2\2\2\u0677\u0674\3\2\2\2\u0678\u067e\3\2\2\2\u0679\u067a\5\u0088"+
		"E\2\u067a\u067b\7\u00eb\2\2\u067b\u067d\3\2\2\2\u067c\u0679\3\2\2\2\u067d"+
		"\u0680\3\2\2\2\u067e\u067c\3\2\2\2\u067e\u067f\3\2\2\2\u067f\u0681\3\2"+
		"\2\2\u0680\u067e\3\2\2\2\u0681\u0682\5J&\2\u0682_\3\2\2\2\u0683\u068d"+
		"\5z>\2\u0684\u0685\5\u0366\u01b4\2\u0685\u0686\t\4\2\2\u0686\u068d\3\2"+
		"\2\2\u0687\u068d\5\u0136\u009c\2\u0688\u068d\5\u0080A\2\u0689\u068d\5"+
		"f\64\2\u068a\u068d\5\u03a8\u01d5\2\u068b\u068d\7\u0103\2\2\u068c\u0683"+
		"\3\2\2\2\u068c\u0684\3\2\2\2\u068c\u0687\3\2\2\2\u068c\u0688\3\2\2\2\u068c"+
		"\u0689\3\2\2\2\u068c\u068a\3\2\2\2\u068c\u068b\3\2\2\2\u068da\3\2\2\2"+
		"\u068e\u0692\5\u0232\u011a\2\u068f\u0693\5\u01bc\u00df\2\u0690\u0693\5"+
		"\u0256\u012c\2\u0691\u0693\5\u018a\u00c6\2\u0692\u068f\3\2\2\2\u0692\u0690"+
		"\3\2\2\2\u0692\u0691\3\2\2\2\u0692\u0693\3\2\2\2\u0693\u0694\3\2\2\2\u0694"+
		"\u0695\5\64\33\2\u0695\u0696\5\u01ce\u00e8\2\u0696\u0698\5\u008eH\2\u0697"+
		"\u0699\5\u00c2b\2\u0698\u0697\3\2\2\2\u0698\u0699\3\2\2\2\u0699\u069b"+
		"\3\2\2\2\u069a\u069c\5\u00c4c\2\u069b\u069a\3\2\2\2\u069b\u069c\3\2\2"+
		"\2\u069c\u069e\3\2\2\2\u069d\u069f\5\u00c6d\2\u069e\u069d\3\2\2\2\u069e"+
		"\u069f\3\2\2\2\u069f\u06a1\3\2\2\2\u06a0\u06a2\5\u011c\u008f\2\u06a1\u06a0"+
		"\3\2\2\2\u06a1\u06a2\3\2\2\2\u06a2c\3\2\2\2\u06a3\u06a4\7\u00f0\2\2\u06a4"+
		"\u06a5\5(\25\2\u06a5\u06a7\7\u00ef\2\2\u06a6\u06a8\5\u00c6d\2\u06a7\u06a6"+
		"\3\2\2\2\u06a7\u06a8\3\2\2\2\u06a8\u06aa\3\2\2\2\u06a9\u06ab\5\u011c\u008f"+
		"\2\u06aa\u06a9\3\2\2\2\u06aa\u06ab\3\2\2\2\u06ab\u06af\3\2\2\2\u06ac\u06ae"+
		"\5\u014c\u00a7\2\u06ad\u06ac\3\2\2\2\u06ae\u06b1\3\2\2\2\u06af\u06ad\3"+
		"\2\2\2\u06af\u06b0\3\2\2\2\u06b0\u06b3\3\2\2\2\u06b1\u06af\3\2\2\2\u06b2"+
		"\u06b4\5\u0174\u00bb\2\u06b3\u06b2\3\2\2\2\u06b3\u06b4\3\2\2\2\u06b4\u06b6"+
		"\3\2\2\2\u06b5\u06b7\5\u014e\u00a8\2\u06b6\u06b5\3\2\2\2\u06b6\u06b7\3"+
		"\2\2\2\u06b7\u06b9\3\2\2\2\u06b8\u06ba\5\u0174\u00bb\2\u06b9\u06b8\3\2"+
		"\2\2\u06b9\u06ba\3\2\2\2\u06ba\u06d4\3\2\2\2\u06bb\u06bc\7\u00f0\2\2\u06bc"+
		"\u06bd\5d\63\2\u06bd\u06bf\7\u00ef\2\2\u06be\u06c0\5\u00c6d\2\u06bf\u06be"+
		"\3\2\2\2\u06bf\u06c0\3\2\2\2\u06c0\u06c2\3\2\2\2\u06c1\u06c3\5\u011c\u008f"+
		"\2\u06c2\u06c1\3\2\2\2\u06c2\u06c3\3\2\2\2\u06c3\u06c7\3\2\2\2\u06c4\u06c6"+
		"\5\u014c\u00a7\2\u06c5\u06c4\3\2\2\2\u06c6\u06c9\3\2\2\2\u06c7\u06c5\3"+
		"\2\2\2\u06c7\u06c8\3\2\2\2\u06c8\u06cb\3\2\2\2\u06c9\u06c7\3\2\2\2\u06ca"+
		"\u06cc\5\u0174\u00bb\2\u06cb\u06ca\3\2\2\2\u06cb\u06cc\3\2\2\2\u06cc\u06ce"+
		"\3\2\2\2\u06cd\u06cf\5\u014e\u00a8\2\u06ce\u06cd\3\2\2\2\u06ce\u06cf\3"+
		"\2\2\2\u06cf\u06d1\3\2\2\2\u06d0\u06d2\5\u0174\u00bb\2\u06d1\u06d0\3\2"+
		"\2\2\u06d1\u06d2\3\2\2\2\u06d2\u06d4\3\2\2\2\u06d3\u06a3\3\2\2\2\u06d3"+
		"\u06bb\3\2\2\2\u06d4e\3\2\2\2\u06d5\u06d8\5\u01b2\u00da\2\u06d6\u06d8"+
		"\5\u0370\u01b9\2\u06d7\u06d5\3\2\2\2\u06d7\u06d6\3\2\2\2\u06d8\u06d9\3"+
		"\2\2\2\u06d9\u06da\5\u03a8\u01d5\2\u06dag\3\2\2\2\u06db\u0714\5\u02ce"+
		"\u0168\2\u06dc\u06df\5\u03a8\u01d5\2\u06dd\u06df\5\u008aF\2\u06de\u06dc"+
		"\3\2\2\2\u06de\u06dd\3\2\2\2\u06df\u06e2\3\2\2\2\u06e0\u06e3\5\u03a2\u01d2"+
		"\2\u06e1\u06e3\5\u0302\u0182\2\u06e2\u06e0\3\2\2\2\u06e2\u06e1\3\2\2\2"+
		"\u06e3\u06e8\3\2\2\2\u06e4\u06e5\7\u00f0\2\2\u06e5\u06e6\5j\66\2\u06e6"+
		"\u06e7\7\u00ef\2\2\u06e7\u06e9\3\2\2\2\u06e8\u06e4\3\2\2\2\u06e8\u06e9"+
		"\3\2\2\2\u06e9\u06ef\3\2\2\2\u06ea\u06ed\5\u037a\u01be\2\u06eb\u06ee\5"+
		"\u03a2\u01d2\2\u06ec\u06ee\5\u0302\u0182\2\u06ed\u06eb\3\2\2\2\u06ed\u06ec"+
		"\3\2\2\2\u06ee\u06f0\3\2\2\2\u06ef\u06ea\3\2\2\2\u06ef\u06f0\3\2\2\2\u06f0"+
		"\u0715\3\2\2\2\u06f1\u06f4\5\u03a8\u01d5\2\u06f2\u06f4\5\u008aF\2\u06f3"+
		"\u06f1\3\2\2\2\u06f3\u06f2\3\2\2\2\u06f4\u06f9\3\2\2\2\u06f5\u06fa\5\u029c"+
		"\u014f\2\u06f6\u06fa\5\u02c2\u0162\2\u06f7\u06fa\5\u02fa\u017e\2\u06f8"+
		"\u06fa\5\u0354\u01ab\2\u06f9\u06f5\3\2\2\2\u06f9\u06f6\3\2\2\2\u06f9\u06f7"+
		"\3\2\2\2\u06f9\u06f8\3\2\2\2\u06fa\u0703\3\2\2\2\u06fb\u06fc\7\u00f0\2"+
		"\2\u06fc\u06ff\5j\66\2\u06fd\u06fe\7\u00ec\2\2\u06fe\u0700\5j\66\2\u06ff"+
		"\u06fd\3\2\2\2\u06ff\u0700\3\2\2\2\u0700\u0701\3\2\2\2\u0701\u0702\7\u00ef"+
		"\2\2\u0702\u0704\3\2\2\2\u0703\u06fb\3\2\2\2\u0703\u0704\3\2\2\2\u0704"+
		"\u0712\3\2\2\2\u0705\u070a\5\u037a\u01be\2\u0706\u070b\5\u029c\u014f\2"+
		"\u0707\u070b\5\u02c2\u0162\2\u0708\u070b\5\u02fa\u017e\2\u0709\u070b\5"+
		"\u0354\u01ab\2\u070a\u0706\3\2\2\2\u070a\u0707\3\2\2\2\u070a\u0708\3\2"+
		"\2\2\u070a\u0709\3\2\2\2\u070b\u0710\3\2\2\2\u070c\u070d\7\u00f0\2\2\u070d"+
		"\u070e\5j\66\2\u070e\u070f\7\u00ef\2\2\u070f\u0711\3\2\2\2\u0710\u070c"+
		"\3\2\2\2\u0710\u0711\3\2\2\2\u0711\u0713\3\2\2\2\u0712\u0705\3\2\2\2\u0712"+
		"\u0713\3\2\2\2\u0713\u0715\3\2\2\2\u0714\u06de\3\2\2\2\u0714\u06f3\3\2"+
		"\2\2\u0715i\3\2\2\2\u0716\u0719\7\u0103\2\2\u0717\u0719\5\u008aF\2\u0718"+
		"\u0716\3\2\2\2\u0718\u0717\3\2\2\2\u0719k\3\2\2\2\u071a\u071b\5\u02b8"+
		"\u015d\2\u071b\u0726\7\u00f0\2\2\u071c\u0727\5\u03a2\u01d2\2\u071d\u0727"+
		"\5\u0302\u0182\2\u071e\u0727\5\u029c\u014f\2\u071f\u0727\5\u02c2\u0162"+
		"\2\u0720\u0727\5\u02fa\u017e\2\u0721\u0727\5\u0354\u01ab\2\u0722\u0727"+
		"\5\u0372\u01ba\2\u0723\u0727\5\u0374\u01bb\2\u0724\u0727\5\u0376\u01bc"+
		"\2\u0725\u0727\5\u0378\u01bd\2\u0726\u071c\3\2\2\2\u0726\u071d\3\2\2\2"+
		"\u0726\u071e\3\2\2\2\u0726\u071f\3\2\2\2\u0726\u0720\3\2\2\2\u0726\u0721"+
		"\3\2\2\2\u0726\u0722\3\2\2\2\u0726\u0723\3\2\2\2\u0726\u0724\3\2\2\2\u0726"+
		"\u0725\3\2\2\2\u0727\u0728\3\2\2\2\u0728\u0729\5\u01ce\u00e8\2\u0729\u072a"+
		"\5<\37\2\u072a\u072b\7\u00ef\2\2\u072bm\3\2\2\2\u072c\u0730\5J&\2\u072d"+
		"\u0730\5v<\2\u072e\u0730\5`\61\2\u072f\u072c\3\2\2\2\u072f\u072d\3\2\2"+
		"\2\u072f\u072e\3\2\2\2\u0730\u0731\3\2\2\2\u0731\u073b\5\u026e\u0138\2"+
		"\u0732\u073c\5\u02e8\u0175\2\u0733\u0734\5\u036e\u01b8\2\u0734\u0739\5"+
		"\u03a4\u01d3\2\u0735\u073a\5\u03a8\u01d5\2\u0736\u073a\5\u029e\u0150\2"+
		"\u0737\u073a\5\u035a\u01ae\2\u0738\u073a\5<\37\2\u0739\u0735\3\2\2\2\u0739"+
		"\u0736\3\2\2\2\u0739\u0737\3\2\2\2\u0739\u0738\3\2\2\2\u073a\u073c\3\2"+
		"\2\2\u073b\u0732\3\2\2\2\u073b\u0733\3\2\2\2\u073co\3\2\2\2\u073d\u0741"+
		"\7\u00f0\2\2\u073e\u0742\5J&\2\u073f\u0742\5v<\2\u0740\u0742\5`\61\2\u0741"+
		"\u073e\3\2\2\2\u0741\u073f\3\2\2\2\u0741\u0740\3\2\2\2\u0742\u0743\3\2"+
		"\2\2\u0743\u0747\7\u00f4\2\2\u0744\u0748\5J&\2\u0745\u0748\5v<\2\u0746"+
		"\u0748\5`\61\2\u0747\u0744\3\2\2\2\u0747\u0745\3\2\2\2\u0747\u0746\3\2"+
		"\2\2\u0748\u0749\3\2\2\2\u0749\u0764\7\u00ef\2\2\u074a\u074e\5\u029c\u014f"+
		"\2\u074b\u074c\7\u00f0\2\2\u074c\u074d\7\u0103\2\2\u074d\u074f\7\u00ef"+
		"\2\2\u074e\u074b\3\2\2\2\u074e\u074f\3\2\2\2\u074f\u0750\3\2\2\2\u0750"+
		"\u0751\5\u024c\u0127\2\u0751\u0755\5\u0354\u01ab\2\u0752\u0753\7\u00f0"+
		"\2\2\u0753\u0754\7\u0103\2\2\u0754\u0756\7\u00ef\2\2\u0755\u0752\3\2\2"+
		"\2\u0755\u0756\3\2\2\2\u0756\u0765\3\2\2\2\u0757\u075b\5\u03a2\u01d2\2"+
		"\u0758\u0759\7\u00f0\2\2\u0759\u075a\7\u0103\2\2\u075a\u075c\7\u00ef\2"+
		"\2\u075b\u0758\3\2\2\2\u075b\u075c\3\2\2\2\u075c\u075d\3\2\2\2\u075d\u075e"+
		"\5\u024c\u0127\2\u075e\u0762\5\u0302\u0182\2\u075f\u0760\7\u00f0\2\2\u0760"+
		"\u0761\7\u0103\2\2\u0761\u0763\7\u00ef\2\2\u0762\u075f\3\2\2\2\u0762\u0763"+
		"\3\2\2\2\u0763\u0765\3\2\2\2\u0764\u074a\3\2\2\2\u0764\u0757\3\2\2\2\u0765"+
		"q\3\2\2\2\u0766\u0767\5t;\2\u0767s\3\2\2\2\u0768\u0769\5\u028c\u0147\2"+
		"\u0769\u076a\7\u00f0\2\2\u076a\u076d\5\u0080A\2\u076b\u076c\7\u00ec\2"+
		"\2\u076c\u076e\5\u0080A\2\u076d\u076b\3\2\2\2\u076d\u076e\3\2\2\2\u076e"+
		"\u0771\3\2\2\2\u076f\u0770\7\u00ec\2\2\u0770\u0772\7\u0103\2\2\u0771\u076f"+
		"\3\2\2\2\u0771\u0772\3\2\2\2\u0772\u0773\3\2\2\2\u0773\u0776\5\u0392\u01ca"+
		"\2\u0774\u0777\5\u00b6\\\2\u0775\u0777\7\u00ed\2\2\u0776\u0774\3\2\2\2"+
		"\u0776\u0775\3\2\2\2\u0777\u0778\3\2\2\2\u0778\u0779\7\u00ef\2\2\u0779"+
		"u\3\2\2\2\u077a\u077b\5\u0286\u0144\2\u077b\u0780\7\u00f0\2\2\u077c\u0781"+
		"\5<\37\2\u077d\u077e\5\u0304\u0183\2\u077e\u077f\5d\63\2\u077f\u0781\3"+
		"\2\2\2\u0780\u077c\3\2\2\2\u0780\u077d\3\2\2\2\u0781\u0782\3\2\2\2\u0782"+
		"\u0785\5\u0194\u00cb\2\u0783\u0786\5x=\2\u0784\u0786\5\u0080A\2\u0785"+
		"\u0783\3\2\2\2\u0785\u0784\3\2\2\2\u0786\u0787\3\2\2\2\u0787\u0788\7\u00ef"+
		"\2\2\u0788w\3\2\2\2\u0789\u0867\5\u0278\u013d\2\u078a\u0867\5\u0276\u013c"+
		"\2\u078b\u0867\5\u0274\u013b\2\u078c\u0867\5\u030a\u0186\2\u078d\u0867"+
		"\5\u032e\u0198\2\u078e\u0793\5\u0208\u0105\2\u078f\u0793\5\u0316\u018c"+
		"\2\u0790\u0793\5\u01b4\u00db\2\u0791\u0793\5\u02a0\u0151\2\u0792\u078e"+
		"\3\2\2\2\u0792\u078f\3\2\2\2\u0792\u0790\3\2\2\2\u0792\u0791\3\2\2\2\u0793"+
		"\u079b\3\2\2\2\u0794\u0795\7\u00f0\2\2\u0795\u0798\7\u0103\2\2\u0796\u0797"+
		"\7\u00ec\2\2\u0797\u0799\7\u0103\2\2\u0798\u0796\3\2\2\2\u0798\u0799\3"+
		"\2\2\2\u0799\u079a\3\2\2\2\u079a\u079c\7\u00ef\2\2\u079b\u0794\3\2\2\2"+
		"\u079b\u079c\3\2\2\2\u079c\u0867\3\2\2\2\u079d\u079f\5\u01f2\u00fa\2\u079e"+
		"\u07a0\5\u0220\u0111\2\u079f\u079e\3\2\2\2\u079f\u07a0\3\2\2\2\u07a0\u07a4"+
		"\3\2\2\2\u07a1\u07a2\7\u00f0\2\2\u07a2\u07a3\7\u0103\2\2\u07a3\u07a5\7"+
		"\u00ef\2\2\u07a4\u07a1\3\2\2\2\u07a4\u07a5\3\2\2\2\u07a5\u0867\3\2\2\2"+
		"\u07a6\u07aa\5\u0220\u0111\2\u07a7\u07a8\7\u00f0\2\2\u07a8\u07a9\7\u0103"+
		"\2\2\u07a9\u07ab\7\u00ef\2\2\u07aa\u07a7\3\2\2\2\u07aa\u07ab\3\2\2\2\u07ab"+
		"\u0867\3\2\2\2\u07ac\u0867\5\u027e\u0140\2\u07ad\u0867\5\u01b2\u00da\2"+
		"\u07ae\u07af\5\u02ce\u0168\2\u07af\u07b3\5\u029c\u014f\2\u07b0\u07b1\7"+
		"\u00f0\2\2\u07b1\u07b2\7\u0103\2\2\u07b2\u07b4\7\u00ef\2\2\u07b3\u07b0"+
		"\3\2\2\2\u07b3\u07b4\3\2\2\2\u07b4\u07b5\3\2\2\2\u07b5\u07b6\5\u024c\u0127"+
		"\2\u07b6\u07ba\5\u0354\u01ab\2\u07b7\u07b8\7\u00f0\2\2\u07b8\u07b9\7\u0103"+
		"\2\2\u07b9\u07bb\7\u00ef\2\2\u07ba\u07b7\3\2\2\2\u07ba\u07bb\3\2\2\2\u07bb"+
		"\u0867\3\2\2\2\u07bc\u07bd\5\u02ce\u0168\2\u07bd\u07c1\5\u03a2\u01d2\2"+
		"\u07be\u07bf\7\u00f0\2\2\u07bf\u07c0\7\u0103\2\2\u07c0\u07c2\7\u00ef\2"+
		"\2\u07c1\u07be\3\2\2\2\u07c1\u07c2\3\2\2\2\u07c2\u07c3\3\2\2\2\u07c3\u07c4"+
		"\5\u024c\u0127\2\u07c4\u07c5\5\u0302\u0182\2\u07c5\u0867\3\2\2\2\u07c6"+
		"\u07c9\5\u036e\u01b8\2\u07c7\u07c9\5\u0370\u01b9\2\u07c8\u07c6\3\2\2\2"+
		"\u07c8\u07c7\3\2\2\2\u07c9\u07cd\3\2\2\2\u07ca\u07cb\7\u00f0\2\2\u07cb"+
		"\u07cc\7\u0103\2\2\u07cc\u07ce\7\u00ef\2\2\u07cd\u07ca\3\2\2\2\u07cd\u07ce"+
		"\3\2\2\2\u07ce\u07d6\3\2\2\2\u07cf\u07d1\5\u026a\u0136\2\u07d0\u07d2\5"+
		"\u02e8\u0175\2\u07d1\u07d0\3\2\2\2\u07d1\u07d2\3\2\2\2\u07d2\u07d3\3\2"+
		"\2\2\u07d3\u07d4\5\u036e\u01b8\2\u07d4\u07d5\5\u03a4\u01d3\2\u07d5\u07d7"+
		"\3\2\2\2\u07d6\u07cf\3\2\2\2\u07d6\u07d7\3\2\2\2\u07d7\u0867\3\2\2\2\u07d8"+
		"\u0867\5\u01e4\u00f3\2\u07d9\u0867\5\u02cc\u0167\2\u07da\u0867\5\u023c"+
		"\u011f\2\u07db\u07df\5\u01ca\u00e6\2\u07dc\u07dd\7\u00f0\2\2\u07dd\u07de"+
		"\7\u0103\2\2\u07de\u07e0\7\u00ef\2\2\u07df\u07dc\3\2\2\2\u07df\u07e0\3"+
		"\2\2\2\u07e0\u0867\3\2\2\2\u07e1\u0867\5\u033a\u019e\2\u07e2\u07e3\5\u02aa"+
		"\u0156\2\u07e3\u07e4\5\u0332\u019a\2\u07e4\u0867\3\2\2\2\u07e5\u07e7\5"+
		"\u01a0\u00d1\2\u07e6\u07e8\5\u0396\u01cc\2\u07e7\u07e6\3\2\2\2\u07e7\u07e8"+
		"\3\2\2\2\u07e8\u07f0\3\2\2\2\u07e9\u07ea\7\u00f0\2\2\u07ea\u07ed\7\u0103"+
		"\2\2\u07eb\u07ee\5\u0284\u0143\2\u07ec\u07ee\5\u01a0\u00d1\2\u07ed\u07eb"+
		"\3\2\2\2\u07ed\u07ec\3\2\2\2\u07ed\u07ee\3\2\2\2\u07ee\u07ef\3\2\2\2\u07ef"+
		"\u07f1\7\u00ef\2\2\u07f0\u07e9\3\2\2\2\u07f0\u07f1\3\2\2\2\u07f1\u07fa"+
		"\3\2\2\2\u07f2\u07f3\5\u0288\u0145\2\u07f3\u07f8\5\u0236\u011c\2\u07f4"+
		"\u07f9\5\u0088E\2\u07f5\u07f6\5\u0080A\2\u07f6\u07f7\7\u010f\2\2\u07f7"+
		"\u07f9\3\2\2\2\u07f8\u07f4\3\2\2\2\u07f8\u07f5\3\2\2\2\u07f9\u07fb\3\2"+
		"\2\2\u07fa\u07f2\3\2\2\2\u07fa\u07fb\3\2\2\2\u07fb\u0867\3\2\2\2\u07fc"+
		"\u0804\5\u0260\u0131\2\u07fd\u07fe\7\u00f0\2\2\u07fe\u0801\7\u0103\2\2"+
		"\u07ff\u0802\5\u0284\u0143\2\u0800\u0802\5\u01a0\u00d1\2\u0801\u07ff\3"+
		"\2\2\2\u0801\u0800\3\2\2\2\u0801\u0802\3\2\2\2\u0802\u0803\3\2\2\2\u0803"+
		"\u0805\7\u00ef\2\2\u0804\u07fd\3\2\2\2\u0804\u0805\3\2\2\2\u0805\u080e"+
		"\3\2\2\2\u0806\u0807\5\u0288\u0145\2\u0807\u080c\5\u0236\u011c\2\u0808"+
		"\u080d\5\u0088E\2\u0809\u080a\5\u0080A\2\u080a\u080b\7\u010f\2\2\u080b"+
		"\u080d\3\2\2\2\u080c\u0808\3\2\2\2\u080c\u0809\3\2\2\2\u080d\u080f\3\2"+
		"\2\2\u080e\u0806\3\2\2\2\u080e\u080f\3\2\2\2\u080f\u0867\3\2\2\2\u0810"+
		"\u0818\5\u0262\u0132\2\u0811\u0812\7\u00f0\2\2\u0812\u0815\7\u0103\2\2"+
		"\u0813\u0816\5\u0284\u0143\2\u0814\u0816\5\u01a0\u00d1\2\u0815\u0813\3"+
		"\2\2\2\u0815\u0814\3\2\2\2\u0815\u0816\3\2\2\2\u0816\u0817\3\2\2\2\u0817"+
		"\u0819\7\u00ef\2\2\u0818\u0811\3\2\2\2\u0818\u0819\3\2\2\2\u0819\u0822"+
		"\3\2\2\2\u081a\u081b\5\u0288\u0145\2\u081b\u0820\5\u0236\u011c\2\u081c"+
		"\u0821\5\u0088E\2\u081d\u081e\5\u0080A\2\u081e\u081f\7\u010f\2\2\u081f"+
		"\u0821\3\2\2\2\u0820\u081c\3\2\2\2\u0820\u081d\3\2\2\2";
	private static final String _serializedATNSegment1 =
		"\u0821\u0823\3\2\2\2\u0822\u081a\3\2\2\2\u0822\u0823\3\2\2\2\u0823\u0867"+
		"\3\2\2\2\u0824\u0826\5\u0288\u0145\2\u0825\u0827\5\u0396\u01cc\2\u0826"+
		"\u0825\3\2\2\2\u0826\u0827\3\2\2\2\u0827\u082b\3\2\2\2\u0828\u0829\7\u00f0"+
		"\2\2\u0829\u082a\7\u0103\2\2\u082a\u082c\7\u00ef\2\2\u082b\u0828\3\2\2"+
		"\2\u082b\u082c\3\2\2\2\u082c\u0867\3\2\2\2\u082d\u082f\5\u030e\u0188\2"+
		"\u082e\u0830\5\u0396\u01cc\2\u082f\u082e\3\2\2\2\u082f\u0830\3\2\2\2\u0830"+
		"\u0834\3\2\2\2\u0831\u0832\7\u00f0\2\2\u0832\u0833\7\u0103\2\2\u0833\u0835"+
		"\7\u00ef\2\2\u0834\u0831\3\2\2\2\u0834\u0835\3\2\2\2\u0835\u0867\3\2\2"+
		"\2\u0836\u083a\5\u0318\u018d\2\u0837\u0838\7\u00f0\2\2\u0838\u0839\7\u0103"+
		"\2\2\u0839\u083b\7\u00ef\2\2\u083a\u0837\3\2\2\2\u083a\u083b\3\2\2\2\u083b"+
		"\u0867\3\2\2\2\u083c\u0840\5\u031a\u018e\2\u083d\u083e\7\u00f0\2\2\u083e"+
		"\u083f\7\u0103\2\2\u083f\u0841\7\u00ef\2\2\u0840\u083d\3\2\2\2\u0840\u0841"+
		"\3\2\2\2\u0841\u0867\3\2\2\2\u0842\u0845\5\u0308\u0185\2\u0843\u0846\5"+
		"\u0288\u0145\2\u0844\u0846\5\u01a0\u00d1\2\u0845\u0843\3\2\2\2\u0845\u0844"+
		"\3\2\2\2\u0846\u0848\3\2\2\2\u0847\u0849\5\u0396\u01cc\2\u0848\u0847\3"+
		"\2\2\2\u0848\u0849\3\2\2\2\u0849\u084d\3\2\2\2\u084a\u084b\7\u00f0\2\2"+
		"\u084b\u084c\7\u0103\2\2\u084c\u084e\7\u00ef\2\2\u084d\u084a\3\2\2\2\u084d"+
		"\u084e\3\2\2\2\u084e\u0867\3\2\2\2\u084f\u0867\5\u02fe\u0180\2\u0850\u0867"+
		"\5\u032c\u0197\2\u0851\u0867\5\u027a\u013e\2\u0852\u085b\5\u028a\u0146"+
		"\2\u0853\u0854\5\u0288\u0145\2\u0854\u0859\5\u0236\u011c\2\u0855\u085a"+
		"\5\u0088E\2\u0856\u0857\5\u0080A\2\u0857\u0858\7\u010f\2\2\u0858\u085a"+
		"\3\2\2\2\u0859\u0855\3\2\2\2\u0859\u0856\3\2\2\2\u085a\u085c\3\2\2\2\u085b"+
		"\u0853\3\2\2\2\u085b\u085c\3\2\2\2\u085c\u0867\3\2\2\2\u085d\u0867\5\u0310"+
		"\u0189\2\u085e\u0867\5\u0272\u013a\2\u085f\u0867\5\u022a\u0116\2\u0860"+
		"\u0864\5\u0390\u01c9\2\u0861\u0862\7\u00f0\2\2\u0862\u0863\7\u0103\2\2"+
		"\u0863\u0865\7\u00ef\2\2\u0864\u0861\3\2\2\2\u0864\u0865\3\2\2\2\u0865"+
		"\u0867\3\2\2\2\u0866\u0789\3\2\2\2\u0866\u078a\3\2\2\2\u0866\u078b\3\2"+
		"\2\2\u0866\u078c\3\2\2\2\u0866\u078d\3\2\2\2\u0866\u0792\3\2\2\2\u0866"+
		"\u079d\3\2\2\2\u0866\u07a6\3\2\2\2\u0866\u07ac\3\2\2\2\u0866\u07ad\3\2"+
		"\2\2\u0866\u07ae\3\2\2\2\u0866\u07bc\3\2\2\2\u0866\u07c8\3\2\2\2\u0866"+
		"\u07d8\3\2\2\2\u0866\u07d9\3\2\2\2\u0866\u07da\3\2\2\2\u0866\u07db\3\2"+
		"\2\2\u0866\u07e1\3\2\2\2\u0866\u07e2\3\2\2\2\u0866\u07e5\3\2\2\2\u0866"+
		"\u07fc\3\2\2\2\u0866\u0810\3\2\2\2\u0866\u0824\3\2\2\2\u0866\u082d\3\2"+
		"\2\2\u0866\u0836\3\2\2\2\u0866\u083c\3\2\2\2\u0866\u0842\3\2\2\2\u0866"+
		"\u084f\3\2\2\2\u0866\u0850\3\2\2\2\u0866\u0851\3\2\2\2\u0866\u0852\3\2"+
		"\2\2\u0866\u085d\3\2\2\2\u0866\u085e\3\2\2\2\u0866\u085f\3\2\2\2\u0866"+
		"\u0860\3\2\2\2\u0867y\3\2\2\2\u0868\u086b\5\u0250\u0129\2\u0869\u086b"+
		"\5\u01c6\u00e4\2\u086a\u0868\3\2\2\2\u086a\u0869\3\2\2\2\u086b{\3\2\2"+
		"\2\u086c\u086d\5\u008cG\2\u086d}\3\2\2\2\u086e\u0870\5\u0194\u00cb\2\u086f"+
		"\u086e\3\2\2\2\u086f\u0870\3\2\2\2\u0870\u0871\3\2\2\2\u0871\u0874\5\u008c"+
		"G\2\u0872\u0874\5\u0194\u00cb\2\u0873\u086f\3\2\2\2\u0873\u0872\3\2\2"+
		"\2\u0874\177\3\2\2\2\u0875\u0876\5\u00b0Y\2\u0876\u0877\7\u00eb\2\2\u0877"+
		"\u0879\3\2\2\2\u0878\u0875\3\2\2\2\u0878\u0879\3\2\2\2\u0879\u087a\3\2"+
		"\2\2\u087a\u087b\5|?\2\u087b\u087c\7\u00eb\2\2\u087c\u087e\3\2\2\2\u087d"+
		"\u0878\3\2\2\2\u087d\u087e\3\2\2\2\u087e\u087f\3\2\2\2\u087f\u0881\5\u010a"+
		"\u0086\2\u0880\u0882\5\u00acW\2\u0881\u0880\3\2\2\2\u0881\u0882\3\2\2"+
		"\2\u0882\u088e\3\2\2\2\u0883\u0884\5\u00b0Y\2\u0884\u0885\7\u00eb\2\2"+
		"\u0885\u0886\5\u00b2Z\2\u0886\u0887\7\u00eb\2\2\u0887\u0888\5\u0088E\2"+
		"\u0888\u0889\7\u00eb\2\2\u0889\u088a\5\u0088E\2\u088a\u088e\3\2\2\2\u088b"+
		"\u088e\5\u0082B\2\u088c\u088e\5\u008aF\2\u088d\u087d\3\2\2\2\u088d\u0883"+
		"\3\2\2\2\u088d\u088b\3\2\2\2\u088d\u088c\3\2\2\2\u088e\u0081\3\2\2\2\u088f"+
		"\u0894\5\u0206\u0104\2\u0890\u0894\5\u0246\u0124\2\u0891\u0894\5\u025a"+
		"\u012e\2\u0892\u0894\5\u01ec\u00f7\2\u0893\u088f\3\2\2\2\u0893\u0890\3"+
		"\2\2\2\u0893\u0891\3\2\2\2\u0893\u0892\3\2\2\2\u0894\u0083\3\2\2\2\u0895"+
		"\u0896\5\u008cG\2\u0896\u0085\3\2\2\2\u0897\u0898\5\u00b0Y\2\u0898\u0899"+
		"\7\u00eb\2\2\u0899\u089a\5\u00b2Z\2\u089a\u089b\7\u00eb\2\2\u089b\u089c"+
		"\5\u0084C\2\u089c\u08a3\3\2\2\2\u089d\u089e\5\u00b0Y\2\u089e\u089f\7\u00eb"+
		"\2\2\u089f\u08a0\5\u0084C\2\u08a0\u08a3\3\2\2\2\u08a1\u08a3\5\u0084C\2"+
		"\u08a2\u0897\3\2\2\2\u08a2\u089d\3\2\2\2\u08a2\u08a1\3\2\2\2\u08a3\u0087"+
		"\3\2\2\2\u08a4\u08a5\7\u00e7\2\2\u08a5\u08a6\bE\1\2\u08a6\u0089\3\2\2"+
		"\2\u08a7\u08a8\7\u00e6\2\2\u08a8\u08ae\bF\1\2\u08a9\u08aa\7\u00e9\2\2"+
		"\u08aa\u08ab\bF\1\2\u08ab\u08ac\7\u0103\2\2\u08ac\u08ae\bF\1\2\u08ad\u08a7"+
		"\3\2\2\2\u08ad\u08a9\3\2\2\2\u08ae\u008b\3\2\2\2\u08af\u08b4\5\u0088E"+
		"\2\u08b0\u08b4\5\u03a6\u01d4\2\u08b1\u08b4\5\u022a\u0116\2\u08b2\u08b4"+
		"\5\u022e\u0118\2\u08b3\u08af\3\2\2\2\u08b3\u08b0\3\2\2\2\u08b3\u08b1\3"+
		"\2\2\2\u08b3\u08b2\3\2\2\2\u08b4\u008d\3\2\2\2\u08b5\u08b8\5\u009eP\2"+
		"\u08b6\u08b8\5\u0090I\2\u08b7\u08b5\3\2\2\2\u08b7\u08b6\3\2\2\2\u08b8"+
		"\u08c0\3\2\2\2\u08b9\u08bc\7\u00ec\2\2\u08ba\u08bd\5\u009eP\2\u08bb\u08bd"+
		"\5\u0090I\2\u08bc\u08ba\3\2\2\2\u08bc\u08bb\3\2\2\2\u08bd\u08bf\3\2\2"+
		"\2\u08be\u08b9\3\2\2\2\u08bf\u08c2\3\2\2\2\u08c0\u08be\3\2\2\2\u08c0\u08c1"+
		"\3\2\2\2\u08c1\u008f\3\2\2\2\u08c2\u08c0\3\2\2\2\u08c3\u08c4\5\u031c\u018f"+
		"\2\u08c4\u08c5\7\u00f0\2\2\u08c5\u08c6\5\u0092J\2\u08c6\u08c7\7\u00ef"+
		"\2\2\u08c7\u08ca\3\2\2\2\u08c8\u08ca\5\u0092J\2\u08c9\u08c3\3\2\2\2\u08c9"+
		"\u08c8\3\2\2\2\u08ca\u08cc\3\2\2\2\u08cb\u08cd\5\u0094K\2\u08cc\u08cb"+
		"\3\2\2\2\u08cc\u08cd\3\2\2\2\u08cd\u08cf\3\2\2\2\u08ce\u08d0\5|?\2\u08cf"+
		"\u08ce\3\2\2\2\u08cf\u08d0\3\2\2\2\u08d0\u0091\3\2\2\2\u08d1\u08d2\5\u00b0"+
		"Y\2\u08d2\u08d3\7\u00eb\2\2\u08d3\u08d5\3\2\2\2\u08d4\u08d1\3\2\2\2\u08d4"+
		"\u08d5\3\2\2\2\u08d5\u08d6\3\2\2\2\u08d6\u08da\5\u00aeX\2\u08d7\u08db"+
		"\5\u0098M\2\u08d8\u08d9\7\u00ee\2\2\u08d9\u08db\5\u00b4[\2\u08da\u08d7"+
		"\3\2\2\2\u08da\u08d8\3\2\2\2\u08da\u08db\3\2\2\2\u08db\u08dd\3\2\2\2\u08dc"+
		"\u08de\5\u0096L\2\u08dd\u08dc\3\2\2\2\u08dd\u08de\3\2\2\2\u08de\u08e1"+
		"\3\2\2\2\u08df\u08e2\5\u017a\u00be\2\u08e0\u08e2\5\u0180\u00c1\2\u08e1"+
		"\u08df\3\2\2\2\u08e1\u08e0\3\2\2\2\u08e1\u08e2\3\2\2\2\u08e2\u08fc\3\2"+
		"\2\2\u08e3\u08e5\5d\63\2\u08e4\u08e6\5\u009aN\2\u08e5\u08e4\3\2\2\2\u08e5"+
		"\u08e6\3\2\2\2\u08e6\u08e9\3\2\2\2\u08e7\u08ea\5\u017a\u00be\2\u08e8\u08ea"+
		"\5\u0180\u00c1\2\u08e9\u08e7\3\2\2\2\u08e9\u08e8\3\2\2\2\u08e9\u08ea\3"+
		"\2\2\2\u08ea\u08fc\3\2\2\2\u08eb\u08ec\7\u00f0\2\2\u08ec\u08ee\5d\63\2"+
		"\u08ed\u08ef\5\u009aN\2\u08ee\u08ed\3\2\2\2\u08ee\u08ef\3\2\2\2\u08ef"+
		"\u08f2\3\2\2\2\u08f0\u08f3\5\u017a\u00be\2\u08f1\u08f3\5\u0180\u00c1\2"+
		"\u08f2\u08f0\3\2\2\2\u08f2\u08f1\3\2\2\2\u08f2\u08f3\3\2\2\2\u08f3\u08f4"+
		"\3\2\2\2\u08f4\u08f5\7\u00ef\2\2\u08f5\u08fc\3\2\2\2\u08f6\u08f9\5\u009c"+
		"O\2\u08f7\u08fa\5\u017a\u00be\2\u08f8\u08fa\5\u0180\u00c1\2\u08f9\u08f7"+
		"\3\2\2\2\u08f9\u08f8\3\2\2\2\u08f9\u08fa\3\2\2\2\u08fa\u08fc\3\2\2\2\u08fb"+
		"\u08d4\3\2\2\2\u08fb\u08e3\3\2\2\2\u08fb\u08eb\3\2\2\2\u08fb\u08f6\3\2"+
		"\2\2\u08fc\u0093\3\2\2\2\u08fd\u08fe\5\u0398\u01cd\2\u08fe\u0901\5\u019a"+
		"\u00ce\2\u08ff\u0902\5\u0350\u01a9\2\u0900\u0902\5\u0370\u01b9\2\u0901"+
		"\u08ff\3\2\2\2\u0901\u0900\3\2\2\2\u0902\u0905\3\2\2\2\u0903\u0906\5<"+
		"\37\2\u0904\u0906\5\u02fc\u017f\2\u0905\u0903\3\2\2\2\u0905\u0904\3\2"+
		"\2\2\u0906\u0907\3\2\2\2\u0907\u090a\5\u018e\u00c8\2\u0908\u090b\5<\37"+
		"\2\u0909\u090b\5\u02f2\u017a\2\u090a\u0908\3\2\2\2\u090a\u0909\3\2\2\2"+
		"\u090b\u090d\3\2\2\2\u090c\u08fd\3\2\2\2\u090c\u090d\3\2\2\2\u090d\u090e"+
		"\3\2\2\2\u090e\u090f\5\u0194\u00cb\2\u090f\u0912\5\u020a\u0106\2\u0910"+
		"\u0913\5\u0350\u01a9\2\u0911\u0913\5\u0370\u01b9\2\u0912\u0910\3\2\2\2"+
		"\u0912\u0911\3\2\2\2\u0913\u0914\3\2\2\2\u0914\u0915\5<\37\2\u0915\u0095"+
		"\3\2\2\2\u0916\u0918\5\u034e\u01a8\2\u0917\u0919\5\u027c\u013f\2\u0918"+
		"\u0917\3\2\2\2\u0918\u0919\3\2\2\2\u0919\u091a\3\2\2\2\u091a\u091b\7\u00f0"+
		"\2\2\u091b\u091e\5\u00a8U\2\u091c\u091d\7\u00ec\2\2\u091d\u091f\5\u00a8"+
		"U\2\u091e\u091c\3\2\2\2\u091e\u091f\3\2\2\2\u091f\u0920\3\2\2\2\u0920"+
		"\u0926\7\u00ef\2\2\u0921\u0922\5\u0356\u01ac\2\u0922\u0923\7\u00f0\2\2"+
		"\u0923\u0924\5\u00aaV\2\u0924\u0925\7\u00ef\2\2\u0925\u0927\3\2\2\2\u0926"+
		"\u0921\3\2\2\2\u0926\u0927\3\2\2\2\u0927\u0097\3\2\2\2\u0928\u0939\5\u0322"+
		"\u0192\2\u0929\u092a\7\u00f0\2\2\u092a\u092b\5\u00b8]\2\u092b\u092c\7"+
		"\u00ef\2\2\u092c\u093a\3\2\2\2\u092d\u092e\5\u01cc\u00e7\2\u092e\u092f"+
		"\7\u00f0\2\2\u092f\u0934\5\u00ba^\2\u0930\u0931\7\u00ec\2\2\u0931\u0933"+
		"\5\u00ba^\2\u0932\u0930\3\2\2\2\u0933\u0936\3\2\2\2\u0934\u0932\3\2\2"+
		"\2\u0934\u0935\3\2\2\2\u0935\u0937\3\2\2\2\u0936\u0934\3\2\2\2\u0937\u0938"+
		"\7\u00ef\2\2\u0938\u093a\3\2\2\2\u0939\u0929\3\2\2\2\u0939\u092d\3\2\2"+
		"\2\u093a\u094f\3\2\2\2\u093b\u094c\5\u036a\u01b6\2\u093c\u093d\7\u00f0"+
		"\2\2\u093d\u093e\5\u00b8]\2\u093e\u093f\7\u00ef\2\2\u093f\u094d\3\2\2"+
		"\2\u0940\u0941\5\u01cc\u00e7\2\u0941\u0942\7\u00f0\2\2\u0942\u0947\5\u00bc"+
		"_\2\u0943\u0944\7\u00ec\2\2\u0944\u0946\5\u00bc_\2\u0945\u0943\3\2\2\2"+
		"\u0946\u0949\3\2\2\2\u0947\u0945\3\2\2\2\u0947\u0948\3\2\2\2\u0948\u094a"+
		"\3\2\2\2\u0949\u0947\3\2\2\2\u094a\u094b\7\u00ef\2\2\u094b\u094d\3\2\2"+
		"\2\u094c\u093c\3\2\2\2\u094c\u0940\3\2\2\2\u094d\u094f\3\2\2\2\u094e\u0928"+
		"\3\2\2\2\u094e\u093b\3\2\2\2\u094f\u0099\3\2\2\2\u0950\u095b\5\u026a\u0136"+
		"\2\u0951\u0952\5\u0338\u019d\2\u0952\u0953\5\u031c\u018f\2\u0953\u095c"+
		"\3\2\2\2\u0954\u0955\5\u01a2\u00d2\2\u0955\u0959\5\u0212\u010a\2\u0956"+
		"\u0957\5\u0290\u0149\2\u0957\u0958\5\u00be`\2\u0958\u095a\3\2\2\2\u0959"+
		"\u0956\3\2\2\2\u0959\u095a\3\2\2\2\u095a\u095c\3\2\2\2\u095b\u0951\3\2"+
		"\2\2\u095b\u0954\3\2\2\2\u095c\u009b\3\2\2\2\u095d\u0960\5\u0248\u0125"+
		"\2\u095e\u0960\5\u036c\u01b7\2\u095f\u095d\3\2\2\2\u095f\u095e\3\2\2\2"+
		"\u0960\u0961\3\2\2\2\u0961\u0963\5\u00c0a\2\u0962\u0964\5\u00acW\2\u0963"+
		"\u0962\3\2\2\2\u0963\u0964\3\2\2\2\u0964\u009d\3\2\2\2\u0965\u0966\7\u00f0"+
		"\2\2\u0966\u0967\5\u009eP\2\u0967\u0968\7\u00ef\2\2\u0968\u096b\3\2\2"+
		"\2\u0969\u096b\5\u0090I\2\u096a\u0965\3\2\2\2\u096a\u0969\3\2\2\2\u096b"+
		"\u096e\3\2\2\2\u096c\u096f\5\u00a0Q\2\u096d\u096f\5\u00a2R\2\u096e\u096c"+
		"\3\2\2\2\u096e\u096d\3\2\2\2\u096f\u0970\3\2\2\2\u0970\u096e\3\2\2\2\u0970"+
		"\u0971\3\2\2\2\u0971\u0977\3\2\2\2\u0972\u0973\7\u00f0\2\2\u0973\u0974"+
		"\5\u009eP\2\u0974\u0975\7\u00ef\2\2\u0975\u0977\3\2\2\2\u0976\u096a\3"+
		"\2\2\2\u0976\u0972\3\2\2\2\u0977\u009f\3\2\2\2\u0978\u097a\5\u02ca\u0166"+
		"\2\u0979\u0978\3\2\2\2\u0979\u097a\3\2\2\2\u097a\u097b\3\2\2\2\u097b\u097c"+
		"\5\u02d2\u016a\2\u097c\u0987\5\u0090I\2\u097d\u097e\5\u020e\u0108\2\u097e"+
		"\u097f\5\u00d4k\2\u097f\u0986\3\2\2\2\u0980\u0981\5\u0392\u01ca\2\u0981"+
		"\u0982\7\u00f0\2\2\u0982\u0983\5\u00b6\\\2\u0983\u0984\7\u00ef\2\2\u0984"+
		"\u0986\3\2\2\2\u0985\u097d\3\2\2\2\u0985\u0980\3\2\2\2\u0986\u0989\3\2"+
		"\2\2\u0987\u0985\3\2\2\2\u0987\u0988\3\2\2\2\u0988\u0995\3\2\2\2\u0989"+
		"\u0987\3\2\2\2\u098a\u0990\5\u0294\u014b\2\u098b\u098d\5\u030a\u0186\2"+
		"\u098c\u098e\5\u02ca\u0166\2\u098d\u098c\3\2\2\2\u098d\u098e\3\2\2\2\u098e"+
		"\u0990\3\2\2\2\u098f\u098a\3\2\2\2\u098f\u098b\3\2\2\2\u0990\u0991\3\2"+
		"\2\2\u0991\u0992\5\u02d2\u016a\2\u0992\u0993\5\u0090I\2\u0993\u0995\3"+
		"\2\2\2\u0994\u0979\3\2\2\2\u0994\u098f\3\2\2\2\u0995\u00a1\3\2\2\2\u0996"+
		"\u0998\5\u00a4S\2\u0997\u0996\3\2\2\2\u0997\u0998\3\2\2\2\u0998\u09a2"+
		"\3\2\2\2\u0999\u099a\5\u00a6T\2\u099a\u099b\5\u02d2\u016a\2\u099b\u09a3"+
		"\3\2\2\2\u099c\u099e\5\u030a\u0186\2\u099d\u099f\5\u00a6T\2\u099e\u099d"+
		"\3\2\2\2\u099e\u099f\3\2\2\2\u099f\u09a0\3\2\2\2\u09a0\u09a1\5\u02d2\u016a"+
		"\2\u09a1\u09a3\3\2\2\2\u09a2\u0999\3\2\2\2\u09a2\u099c\3\2\2\2\u09a3\u09a4"+
		"\3\2\2\2\u09a4\u09a6\5\u0090I\2\u09a5\u09a7\5\u00a4S\2\u09a6\u09a5\3\2"+
		"\2\2\u09a6\u09a7\3\2\2\2\u09a7\u09b0\3\2\2\2\u09a8\u09a9\5\u020e\u0108"+
		"\2\u09a9\u09aa\5\u00d4k\2\u09aa\u09b1\3\2\2\2\u09ab\u09ac\5\u0392\u01ca"+
		"\2\u09ac\u09ad\7\u00f0\2\2\u09ad\u09ae\5\u00b6\\\2\u09ae\u09af\7\u00ef"+
		"\2\2\u09af\u09b1\3\2\2\2\u09b0\u09a8\3\2\2\2\u09b0\u09ab\3\2\2\2\u09b0"+
		"\u09b1\3\2\2\2\u09b1\u00a3\3\2\2\2\u09b2\u09b3\5\u0322\u0192\2\u09b3\u09b4"+
		"\5\u019c\u00cf\2\u09b4\u09b5\5\u0116\u008c\2\u09b5\u00a5\3\2\2\2\u09b6"+
		"\u09ba\5\u02be\u0160\2\u09b7\u09ba\5\u02da\u016e\2\u09b8\u09ba\5\u0348"+
		"\u01a5\2\u09b9\u09b6\3\2\2\2\u09b9\u09b7\3\2\2\2\u09b9\u09b8\3\2\2\2\u09ba"+
		"\u09bc\3\2\2\2\u09bb\u09bd\5\u031e\u0190\2\u09bc\u09bb\3\2\2\2\u09bc\u09bd"+
		"\3\2\2\2\u09bd\u00a7\3\2\2\2\u09be\u09c1\7\u0103\2\2\u09bf\u09c1\5\u008a"+
		"F\2\u09c0\u09be\3\2\2\2\u09c0\u09bf\3\2\2\2\u09c1\u00a9\3\2\2\2\u09c2"+
		"\u09c5\7\u0103\2\2\u09c3\u09c5\5\u008aF\2\u09c4\u09c2\3\2\2\2\u09c4\u09c3"+
		"\3\2\2\2\u09c5\u00ab\3\2\2\2\u09c6\u09c7\7\u00f0\2\2\u09c7\u09c8\7\u00f3"+
		"\2\2\u09c8\u09c9\7\u00ef\2\2\u09c9\u00ad\3\2\2\2\u09ca\u09cb\5\u008cG"+
		"\2\u09cb\u00af\3\2\2\2\u09cc\u09cd\5\u008cG\2\u09cd\u00b1\3\2\2\2\u09ce"+
		"\u09cf\5\u008cG\2\u09cf\u00b3\3\2\2\2\u09d0\u09d1\5\u008cG\2\u09d1\u00b5"+
		"\3\2\2\2\u09d2\u09d7\5\u0080A\2\u09d3\u09d4\7\u00ec\2\2\u09d4\u09d6\5"+
		"\u0080A\2\u09d5\u09d3\3\2\2\2\u09d6\u09d9\3\2\2\2\u09d7\u09d5\3\2\2\2"+
		"\u09d7\u09d8\3\2\2\2\u09d8\u00b7\3\2\2\2\u09d9\u09d7\3\2\2\2\u09da\u09db"+
		"\5\u0088E\2\u09db\u00b9\3\2\2\2\u09dc\u09df\5\u0088E\2\u09dd\u09df\7\u0103"+
		"\2\2\u09de\u09dc\3\2\2\2\u09de\u09dd\3\2\2\2\u09df\u00bb\3\2\2\2\u09e0"+
		"\u09e3\5\u0088E\2\u09e1\u09e3\7\u0103\2\2\u09e2\u09e0\3\2\2\2\u09e2\u09e1"+
		"\3\2\2\2\u09e3\u00bd\3\2\2\2\u09e4\u09e5\5\u008cG\2\u09e5\u00bf\3\2\2"+
		"\2\u09e6\u09f3\5d\63\2\u09e7\u09ea\7\u00f0\2\2\u09e8\u09eb\5v<\2\u09e9"+
		"\u09eb\5J&\2\u09ea\u09e8\3\2\2\2\u09ea\u09e9\3\2\2\2\u09eb\u09ec\3\2\2"+
		"\2\u09ec\u09ed\7\u00ef\2\2\u09ed\u09f3\3\2\2\2\u09ee\u09ef\7\u00f0\2\2"+
		"\u09ef\u09f0\5\u0080A\2\u09f0\u09f1\7\u00ef\2\2\u09f1\u09f3\3\2\2\2\u09f2"+
		"\u09e6\3\2\2\2\u09f2\u09e7\3\2\2\2\u09f2\u09ee\3\2\2\2\u09f3\u00c1\3\2"+
		"\2\2\u09f4\u09f5\5\u0268\u0135\2\u09f5\u09f6\5\u00d4k\2\u09f6\u00c3\3"+
		"\2\2\2\u09f7\u09f8\5\u01ac\u00d7\2\u09f8\u09fa\5\u019c\u00cf\2\u09f9\u09fb"+
		"\5\u0312\u018a\2\u09fa\u09f9\3\2\2\2\u09fa\u09fb\3\2\2\2\u09fb\u09fc\3"+
		"\2\2\2\u09fc\u0a01\5\u00d4k\2\u09fd\u09fe\5\u0240\u0121\2\u09fe\u09ff"+
		"\5\u026a\u0136\2\u09ff\u0a00\5\u00d4k\2\u0a00\u0a02\3\2\2\2\u0a01\u09fd"+
		"\3\2\2\2\u0a01\u0a02\3\2\2\2\u0a02\u0a0f\3\2\2\2\u0a03\u0a04\5\u0240\u0121"+
		"\2\u0a04\u0a05\5\u026a\u0136\2\u0a05\u0a06\5\u00d4k\2\u0a06\u0a07\3\2"+
		"\2\2\u0a07\u0a08\5\u01ac\u00d7\2\u0a08\u0a0a\5\u019c\u00cf\2\u0a09\u0a0b"+
		"\5\u0312\u018a\2\u0a0a\u0a09\3\2\2\2\u0a0a\u0a0b\3\2\2\2\u0a0b\u0a0c\3"+
		"\2\2\2\u0a0c\u0a0d\5\u00d4k\2\u0a0d\u0a0f\3\2\2\2\u0a0e\u09f7\3\2\2\2"+
		"\u0a0e\u0a03\3\2\2\2\u0a0f\u00c5\3\2\2\2\u0a10\u0a11\5\u01d4\u00eb\2\u0a11"+
		"\u0a16\5\u00d4k\2\u0a12\u0a13\5\u01d2\u00ea\2\u0a13\u0a14\5\u019c\u00cf"+
		"\2\u0a14\u0a15\5\u00c8e\2\u0a15\u0a17\3\2\2\2\u0a16\u0a12\3\2\2\2\u0a16"+
		"\u0a17\3\2\2\2\u0a17\u0a21\3\2\2\2\u0a18\u0a19\5\u01d2\u00ea\2\u0a19\u0a1a"+
		"\5\u019c\u00cf\2\u0a1a\u0a1e\5\u00c8e\2\u0a1b\u0a1c\5\u01d4\u00eb\2\u0a1c"+
		"\u0a1d\5\u00d4k\2\u0a1d\u0a1f\3\2\2\2\u0a1e\u0a1b\3\2\2\2\u0a1e\u0a1f"+
		"\3\2\2\2\u0a1f\u0a21\3\2\2\2\u0a20\u0a10\3\2\2\2\u0a20\u0a18\3\2\2\2\u0a21"+
		"\u00c7\3\2\2\2\u0a22\u0a27\5\u00caf\2\u0a23\u0a24\7\u00ec\2\2\u0a24\u0a26"+
		"\5\u00caf\2\u0a25\u0a23\3\2\2\2\u0a26\u0a29\3\2\2\2\u0a27\u0a25\3\2\2"+
		"\2\u0a27\u0a28\3\2\2\2\u0a28\u00c9\3\2\2\2\u0a29\u0a27\3\2\2\2\u0a2a\u0a2e"+
		"\5\u00ccg\2\u0a2b\u0a2e\5\u00ceh\2\u0a2c\u0a2e\5\u0114\u008b\2\u0a2d\u0a2a"+
		"\3\2\2\2\u0a2d\u0a2b\3\2\2\2\u0a2d\u0a2c\3\2\2\2\u0a2e\u00cb\3\2\2\2\u0a2f"+
		"\u0a32\5\u034a\u01a6\2\u0a30\u0a32\5\u0296\u014c\2\u0a31\u0a2f\3\2\2\2"+
		"\u0a31\u0a30\3\2\2\2\u0a32\u0a33\3\2\2\2\u0a33\u0a34\7\u00f0\2\2\u0a34"+
		"\u0a35\5\u0114\u008b\2\u0a35\u0a36\7\u00ef\2\2\u0a36\u00cd\3\2\2\2\u0a37"+
		"\u0a38\5\u02c0\u0161\2\u0a38\u0a39\5\u035c\u01af\2\u0a39\u0a3a\7\u00f0"+
		"\2\2\u0a3a\u0a3b\5\u0112\u008a\2\u0a3b\u0a3c\7\u00ef\2\2\u0a3c\u00cf\3"+
		"\2\2\2\u0a3d\u0a42\5\u00d2j\2\u0a3e\u0a3f\7\u00ec\2\2\u0a3f\u0a41\5\u00d2"+
		"j\2\u0a40\u0a3e\3\2\2\2\u0a41\u0a44\3\2\2\2\u0a42\u0a40\3\2\2\2\u0a42"+
		"\u0a43\3\2\2\2\u0a43\u00d1\3\2\2\2\u0a44\u0a42\3\2\2\2\u0a45\u0a48\5\u00cc"+
		"g\2\u0a46\u0a48\5\u0114\u008b\2\u0a47\u0a45\3\2\2\2\u0a47\u0a46\3\2\2"+
		"\2\u0a48\u00d3\3\2\2\2\u0a49\u0a4a\5\u00d6l\2\u0a4a\u00d5\3\2\2\2\u0a4b"+
		"\u0a51\5\u00d8m\2\u0a4c\u0a4d\5\u0214\u010b\2\u0a4d\u0a4e\5\u00d8m\2\u0a4e"+
		"\u0a50\3\2\2\2\u0a4f\u0a4c\3\2\2\2\u0a50\u0a53\3\2\2\2\u0a51\u0a4f\3\2"+
		"\2\2\u0a51\u0a52\3\2\2\2\u0a52\u00d7\3\2\2\2\u0a53\u0a51\3\2\2\2\u0a54"+
		"\u0a5a\5\u00dan\2\u0a55\u0a56\5\u018e\u00c8\2\u0a56\u0a57\5\u00dan\2\u0a57"+
		"\u0a59\3\2\2\2\u0a58\u0a55\3\2\2\2\u0a59\u0a5c\3\2\2\2\u0a5a\u0a58\3\2"+
		"\2\2\u0a5a\u0a5b\3\2\2\2\u0a5b\u00d9\3\2\2\2\u0a5c\u0a5a\3\2\2\2\u0a5d"+
		"\u0a5e\5\u0200\u0101\2\u0a5e\u0a5f\5\u00dco\2\u0a5f\u0a62\3\2\2\2\u0a60"+
		"\u0a62\5\u00dco\2\u0a61\u0a5d\3\2\2\2\u0a61\u0a60\3\2\2\2\u0a62\u00db"+
		"\3\2\2\2\u0a63\u0a77\5\u00dep\2\u0a64\u0a77\5\u011a\u008e\2\u0a65\u0a77"+
		"\5\u00e0q\2\u0a66\u0a77\5\u00e2r\2\u0a67\u0a77\5\u00e4s\2\u0a68\u0a77"+
		"\5\u00e6t\2\u0a69\u0a77\5\u00e8u\2\u0a6a\u0a77\5\u00eav\2\u0a6b\u0a77"+
		"\5\u00ecw\2\u0a6c\u0a77\5\u00eex\2\u0a6d\u0a77\5\u00f0y\2\u0a6e\u0a77"+
		"\5\u00f2z\2\u0a6f\u0a77\5\u00f4{\2\u0a70\u0a77\5\u00f6|\2\u0a71\u0a77"+
		"\5\u00f8}\2\u0a72\u0a77\5\u00fa~\2\u0a73\u0a77\5\u00fc\177\2\u0a74\u0a77"+
		"\5\u00fe\u0080\2\u0a75\u0a77\5\u011a\u008e\2\u0a76\u0a63\3\2\2\2\u0a76"+
		"\u0a64\3\2\2\2\u0a76\u0a65\3\2\2\2\u0a76\u0a66\3\2\2\2\u0a76\u0a67\3\2"+
		"\2\2\u0a76\u0a68\3\2\2\2\u0a76\u0a69\3\2\2\2\u0a76\u0a6a\3\2\2\2\u0a76"+
		"\u0a6b\3\2\2\2\u0a76\u0a6c\3\2\2\2\u0a76\u0a6d\3\2\2\2\u0a76\u0a6e\3\2"+
		"\2\2\u0a76\u0a6f\3\2\2\2\u0a76\u0a70\3\2\2\2\u0a76\u0a71\3\2\2\2\u0a76"+
		"\u0a72\3\2\2\2\u0a76\u0a73\3\2\2\2\u0a76\u0a74\3\2\2\2\u0a76\u0a75\3\2"+
		"\2\2\u0a77\u00dd\3\2\2\2\u0a78\u0a79\5\u01c4\u00e3\2\u0a79\u0a7a\5d\63"+
		"\2\u0a7a\u00df\3\2\2\2\u0a7b\u0a7d\5\u0080A\2\u0a7c\u0a7e\5\u00acW\2\u0a7d"+
		"\u0a7c\3\2\2\2\u0a7d\u0a7e\3\2\2\2\u0a7e\u0a7f\3\2\2\2\u0a7f\u0a81\5\u01ea"+
		"\u00f6\2\u0a80\u0a82\5\u0200\u0101\2\u0a81\u0a80\3\2\2\2\u0a81\u0a82\3"+
		"\2\2\2\u0a82\u0a86\3\2\2\2\u0a83\u0a87\5\u0306\u0184\2\u0a84\u0a87\5\u02c8"+
		"\u0165\2\u0a85\u0a87\5\u0206\u0104\2\u0a86\u0a83\3\2\2\2\u0a86\u0a84\3"+
		"\2\2\2\u0a86\u0a85\3\2\2\2\u0a87\u0a93\3\2\2\2\u0a88\u0a89\5<\37\2\u0a89"+
		"\u0a8b\5\u01ea\u00f6\2\u0a8a\u0a8c\5\u0200\u0101\2\u0a8b\u0a8a\3\2\2\2"+
		"\u0a8b\u0a8c\3\2\2\2\u0a8c\u0a90\3\2\2\2\u0a8d\u0a91\5\u0306\u0184\2\u0a8e"+
		"\u0a91\5\u02c8\u0165\2\u0a8f\u0a91\5\u0206\u0104\2\u0a90\u0a8d\3\2\2\2"+
		"\u0a90\u0a8e\3\2\2\2\u0a90\u0a8f\3\2\2\2\u0a91\u0a93\3\2\2\2\u0a92\u0a7b"+
		"\3\2\2\2\u0a92\u0a88\3\2\2\2\u0a93\u00e1\3\2\2\2\u0a94\u0a95\7\u00f0\2"+
		"\2\u0a95\u0a96\5\u0110\u0089\2\u0a96\u0a98\7\u00ef\2\2\u0a97\u0a99\5\u00ac"+
		"W\2\u0a98\u0a97\3\2\2\2\u0a98\u0a99\3\2\2\2\u0a99\u0a9c\3\2\2\2\u0a9a"+
		"\u0a9d\7\u00f6\2\2\u0a9b\u0a9d\5\u03ac\u01d7\2\u0a9c\u0a9a\3\2\2\2\u0a9c"+
		"\u0a9b\3\2\2\2\u0a9d\u0a9e\3\2\2\2\u0a9e\u0aa0\5d\63\2\u0a9f\u0aa1\5\u00ac"+
		"W\2\u0aa0\u0a9f\3\2\2\2\u0aa0\u0aa1\3\2\2\2\u0aa1\u0abf\3\2\2\2\u0aa2"+
		"\u0aa4\5\u021a\u010e\2\u0aa3\u0aa2\3\2\2\2\u0aa3\u0aa4\3\2\2\2\u0aa4\u0aa5"+
		"\3\2\2\2\u0aa5\u0aa7\5<\37\2\u0aa6\u0aa8\5\u00acW\2\u0aa7\u0aa6\3\2\2"+
		"\2\u0aa7\u0aa8\3\2\2\2\u0aa8\u0aaf\3\2\2\2\u0aa9\u0ab0\7\u00f6\2\2\u0aaa"+
		"\u0ab0\5\u03ac\u01d7\2\u0aab\u0ab0\7\u0101\2\2\u0aac\u0ab0\5\u03b0\u01d9"+
		"\2\u0aad\u0ab0\7\u00ff\2\2\u0aae\u0ab0\5\u03ae\u01d8\2\u0aaf\u0aa9\3\2"+
		"\2\2\u0aaf\u0aaa\3\2\2\2\u0aaf\u0aab\3\2\2\2\u0aaf\u0aac\3\2\2\2\u0aaf"+
		"\u0aad\3\2\2\2\u0aaf\u0aae\3\2\2\2\u0ab0\u0ab2\3\2\2\2\u0ab1\u0ab3\5\u021a"+
		"\u010e\2\u0ab2\u0ab1\3\2\2\2\u0ab2\u0ab3\3\2\2\2\u0ab3\u0ab9\3\2\2\2\u0ab4"+
		"\u0aba\5<\37\2\u0ab5\u0ab6\7\u00f0\2\2\u0ab6\u0ab7\5(\25\2\u0ab7\u0ab8"+
		"\7\u00ef\2\2\u0ab8\u0aba\3\2\2\2\u0ab9\u0ab4\3\2\2\2\u0ab9\u0ab5\3\2\2"+
		"\2\u0aba\u0abc\3\2\2\2\u0abb\u0abd\5\u00acW\2\u0abc\u0abb\3\2\2\2\u0abc"+
		"\u0abd\3\2\2\2\u0abd\u0abf\3\2\2\2\u0abe\u0a94\3\2\2\2\u0abe\u0aa3\3\2"+
		"\2\2\u0abf\u00e3\3\2\2\2\u0ac0\u0ac1\7\u00f0\2\2\u0ac1\u0ac2\5\u0110\u0089"+
		"\2\u0ac2\u0ac5\7\u00ef\2\2\u0ac3\u0ac6\7\u00f6\2\2\u0ac4\u0ac6\5\u03ac"+
		"\u01d7\2\u0ac5\u0ac3\3\2\2\2\u0ac5\u0ac4\3\2\2\2\u0ac6\u0aca\3\2\2\2\u0ac7"+
		"\u0acb\5\u0190\u00c9\2\u0ac8\u0acb\5\u0364\u01b3\2\u0ac9\u0acb\5\u018a"+
		"\u00c6\2\u0aca\u0ac7\3\2\2\2\u0aca\u0ac8\3\2\2\2\u0aca\u0ac9\3\2\2\2\u0acb"+
		"\u0acc\3\2\2\2\u0acc\u0acf\7\u00f0\2\2\u0acd\u0ad0\5\u0114\u008b\2\u0ace"+
		"\u0ad0\5(\25\2\u0acf\u0acd\3\2\2\2\u0acf\u0ace\3\2\2\2\u0ad0\u0ad1\3\2"+
		"\2\2\u0ad1\u0ad2\7\u00ef\2\2\u0ad2\u0ae9\3\2\2\2\u0ad3\u0ada\5<\37\2\u0ad4"+
		"\u0adb\7\u00f6\2\2\u0ad5\u0adb\5\u03ac\u01d7\2\u0ad6\u0adb\7\u0101\2\2"+
		"\u0ad7\u0adb\5\u03b0\u01d9\2\u0ad8\u0adb\7\u00ff\2\2\u0ad9\u0adb\5\u03ae"+
		"\u01d8\2\u0ada\u0ad4\3\2\2\2\u0ada\u0ad5\3\2\2\2\u0ada\u0ad6\3\2\2\2\u0ada"+
		"\u0ad7\3\2\2\2\u0ada\u0ad8\3\2\2\2\u0ada\u0ad9\3\2\2\2\u0adb\u0adf\3\2"+
		"\2\2\u0adc\u0ae0\5\u0190\u00c9\2\u0add\u0ae0\5\u0364\u01b3\2\u0ade\u0ae0"+
		"\5\u018a\u00c6\2\u0adf\u0adc\3\2\2\2\u0adf\u0add\3\2\2\2\u0adf\u0ade\3"+
		"\2\2\2\u0ae0\u0ae1\3\2\2\2\u0ae1\u0ae4\7\u00f0\2\2\u0ae2\u0ae5\5\u0110"+
		"\u0089\2\u0ae3\u0ae5\5(\25\2\u0ae4\u0ae2\3\2\2\2\u0ae4\u0ae3\3\2\2\2\u0ae5"+
		"\u0ae6\3\2\2\2\u0ae6\u0ae7\7\u00ef\2\2\u0ae7\u0ae9\3\2\2\2\u0ae8\u0ac0"+
		"\3\2\2\2\u0ae8\u0ad3\3\2\2\2\u0ae9\u00e5\3\2\2\2\u0aea\u0aeb\7\u00f0\2"+
		"\2\u0aeb\u0aec\5\u0110\u0089\2\u0aec\u0aee\7\u00ef\2\2\u0aed\u0aef\5\u0200"+
		"\u0101\2\u0aee\u0aed\3\2\2\2\u0aee\u0aef\3\2\2\2\u0aef\u0af0\3\2\2\2\u0af0"+
		"\u0af1\5\u01da\u00ee\2\u0af1\u0af4\7\u00f0\2\2\u0af2\u0af5\5\u0114\u008b"+
		"\2\u0af3\u0af5\5(\25\2\u0af4\u0af2\3\2\2\2\u0af4\u0af3\3\2\2\2\u0af5\u0af6"+
		"\3\2\2\2\u0af6\u0af7\7\u00ef\2\2\u0af7\u0b0c\3\2\2\2\u0af8\u0afa\5<\37"+
		"\2\u0af9\u0afb\5\u0200\u0101\2\u0afa\u0af9\3\2\2\2\u0afa\u0afb\3\2\2\2"+
		"\u0afb\u0afc\3\2\2\2\u0afc\u0afd\5\u01da\u00ee\2\u0afd\u0b00\7\u00f0\2"+
		"\2\u0afe\u0b01\5\u0116\u008c\2\u0aff\u0b01\5(\25\2\u0b00\u0afe\3\2\2\2"+
		"\u0b00\u0aff\3\2\2\2\u0b01\u0b02\3\2\2\2\u0b02\u0b03\7\u00ef\2\2\u0b03"+
		"\u0b0c\3\2\2\2\u0b04\u0b06\5<\37\2\u0b05\u0b07\5\u0200\u0101\2\u0b06\u0b05"+
		"\3\2\2\2\u0b06\u0b07\3\2\2\2\u0b07\u0b08\3\2\2\2\u0b08\u0b09\5\u01da\u00ee"+
		"\2\u0b09\u0b0a\5<\37\2\u0b0a\u0b0c\3\2\2\2\u0b0b\u0aea\3\2\2\2\u0b0b\u0af8"+
		"\3\2\2\2\u0b0b\u0b04\3\2\2\2\u0b0c\u00e7\3\2\2\2\u0b0d\u0b0e\5\u010e\u0088"+
		"\2\u0b0e\u0b10\5\u01ea\u00f6\2\u0b0f\u0b11\5\u0200\u0101\2\u0b10\u0b0f"+
		"\3\2\2\2\u0b10\u0b11\3\2\2\2\u0b11\u0b12\3\2\2\2\u0b12\u0b13\5\u026c\u0137"+
		"\2\u0b13\u0b14\5\u0236\u011c\2\u0b14\u00e9\3\2\2\2\u0b15\u0b16\5\u010a"+
		"\u0086\2\u0b16\u0b17\5\u01ea\u00f6\2\u0b17\u0b19\3\2\2\2\u0b18\u0b15\3"+
		"\2\2\2\u0b18\u0b19\3\2\2\2\u0b19\u0b1a\3\2\2\2\u0b1a\u0b1b\5\u0190\u00c9"+
		"\2\u0b1b\u00eb\3\2\2\2\u0b1c\u0b1d\5\u010e\u0088\2\u0b1d\u0b1f\5\u01ea"+
		"\u00f6\2\u0b1e\u0b20\5\u0200\u0101\2\u0b1f\u0b1e\3\2\2\2\u0b1f\u0b20\3"+
		"\2\2\2\u0b20\u0b21\3\2\2\2\u0b21\u0b22\5\u02ac\u0157\2\u0b22\u00ed\3\2"+
		"\2\2\u0b23\u0b24\5<\37\2\u0b24\u0b26\5\u01ea\u00f6\2\u0b25\u0b27\5\u0200"+
		"\u0101\2\u0b26\u0b25\3\2\2\2\u0b26\u0b27\3\2\2\2\u0b27\u0b28\3\2\2\2\u0b28"+
		"\u0b2a\5\u020a\u0106\2\u0b29\u0b2b\5\u0380\u01c1\2\u0b2a\u0b29\3\2\2\2"+
		"\u0b2a\u0b2b\3\2\2\2\u0b2b\u0b2c\3\2\2\2\u0b2c\u0b2d\7\u00f0\2\2\u0b2d"+
		"\u0b2e\5\u0106\u0084\2\u0b2e\u0b2f\7\u00ef\2\2\u0b2f\u00ef\3\2\2\2\u0b30"+
		"\u0b31\5\u0118\u008d\2\u0b31\u0b32\5\u01ea\u00f6\2\u0b32\u0b33\5\u0334"+
		"\u019b\2\u0b33\u00f1\3\2\2\2\u0b34\u0b36\5<\37\2\u0b35\u0b37\5\u0200\u0101"+
		"\2\u0b36\u0b35\3\2\2\2\u0b36\u0b37\3\2\2\2\u0b37\u0b3c\3\2\2\2\u0b38\u0b3d"+
		"\5\u01ee\u00f8\2\u0b39\u0b3d\5\u02e0\u0171\2\u0b3a\u0b3d\5\u02dc\u016f"+
		"\2\u0b3b\u0b3d\5\u02de\u0170\2\u0b3c\u0b38\3\2\2\2\u0b3c\u0b39\3\2\2\2"+
		"\u0b3c\u0b3a\3\2\2\2\u0b3c\u0b3b\3\2\2\2\u0b3d\u0b3e\3\2\2\2\u0b3e\u0b42"+
		"\5<\37\2\u0b3f\u0b40\5\u02b4\u015b\2\u0b40\u0b41\5<\37\2\u0b41\u0b43\3"+
		"\2\2\2\u0b42\u0b3f\3\2\2\2\u0b42\u0b43\3\2\2\2\u0b43\u00f3\3\2\2\2\u0b44"+
		"\u0b46\5<\37\2\u0b45\u0b47\5\u0200\u0101\2\u0b46\u0b45\3\2\2\2\u0b46\u0b47"+
		"\3\2\2\2\u0b47\u0b48\3\2\2\2\u0b48\u0b4a\5\u02f6\u017c\2\u0b49\u0b4b\5"+
		"\u020a\u0106\2\u0b4a\u0b49\3\2\2\2\u0b4a\u0b4b\3\2\2\2\u0b4b\u0b4e\3\2"+
		"\2\2\u0b4c\u0b4f\5J&\2\u0b4d\u0b4f\5\u010e\u0088\2\u0b4e\u0b4c\3\2\2\2"+
		"\u0b4e\u0b4d\3\2\2\2\u0b4f\u00f5\3\2\2\2\u0b50\u0b52\5<\37\2\u0b51\u0b53"+
		"\5\u0200\u0101\2\u0b52\u0b51\3\2\2\2\u0b52\u0b53\3\2\2\2\u0b53\u0b54\3"+
		"\2\2\2\u0b54\u0b55\5\u019a\u00ce\2\u0b55\u0b56\5<\37\2\u0b56\u0b57\5\u018e"+
		"\u00c8\2\u0b57\u0b58\5<\37\2\u0b58\u00f7\3\2\2\2\u0b59\u0b5a\5\u033e\u01a0"+
		"\2\u0b5a\u0b5b\7\u00f0\2\2\u0b5b\u0b5c\5L\'\2\u0b5c\u0b5d\7\u00ef\2\2"+
		"\u0b5d\u00f9\3\2\2\2\u0b5e\u0b60\5\u010e\u0088\2\u0b5f\u0b61\5\u0200\u0101"+
		"\2\u0b60\u0b5f\3\2\2\2\u0b60\u0b61\3\2\2\2\u0b61\u0b62\3\2\2\2\u0b62\u0b64"+
		"\5\u0368\u01b5\2\u0b63\u0b65\5\u020a\u0106\2\u0b64\u0b63\3\2\2\2\u0b64"+
		"\u0b65\3\2\2\2\u0b65\u0b66\3\2\2\2\u0b66\u0b67\5\u010e\u0088\2\u0b67\u00fb"+
		"\3\2\2\2\u0b68\u0b69\5\u02b0\u0159\2\u0b69\u0b6a\7\u00f0\2\2\u0b6a\u0b6b"+
		"\5\u010a\u0086\2\u0b6b\u0b6c\7\u00ec\2\2\u0b6c\u0b6f\5\u0104\u0083\2\u0b6d"+
		"\u0b6e\7\u00ec\2\2\u0b6e\u0b70\5\u0102\u0082\2\u0b6f\u0b6d\3\2\2\2\u0b6f"+
		"\u0b70\3\2\2\2\u0b70\u0b71\3\2\2\2\u0b71\u0b72\7\u00ef\2\2\u0b72\u00fd"+
		"\3\2\2\2\u0b73\u0b74\5\u0384\u01c3\2\u0b74\u0b75\7\u00f0\2\2\u0b75\u0b78"+
		"\5\u010a\u0086\2\u0b76\u0b77\7\u00ec\2\2\u0b77\u0b79\5\u0100\u0081\2\u0b78"+
		"\u0b76\3\2\2\2\u0b78\u0b79\3\2\2\2\u0b79\u0b7a\3\2\2\2\u0b7a\u0b7b\7\u00ec"+
		"\2\2\u0b7b\u0b7e\5\u0104\u0083\2\u0b7c\u0b7d\7\u00ec\2\2\u0b7d\u0b7f\5"+
		"\u0102\u0082\2\u0b7e\u0b7c\3\2\2\2\u0b7e\u0b7f\3\2\2\2\u0b7f\u0b80\3\2"+
		"\2\2\u0b80\u0b81\7\u00ef\2\2\u0b81\u00ff\3\2\2\2\u0b82\u0b83\5\u0108\u0085"+
		"\2\u0b83\u0101\3\2\2\2\u0b84\u0b85\5\u0108\u0085\2\u0b85\u0103\3\2\2\2"+
		"\u0b86\u0b87\5\u03a8\u01d5\2\u0b87\u0105\3\2\2\2\u0b88\u0b8a\5\u031c\u018f"+
		"\2\u0b89\u0b88\3\2\2\2\u0b89\u0b8a\3\2\2\2\u0b8a\u0b8e\3\2\2\2\u0b8b\u0b8c"+
		"\5\u00b0Y\2\u0b8c\u0b8d\7\u00eb\2\2\u0b8d\u0b8f\3\2\2\2\u0b8e\u0b8b\3"+
		"\2\2\2\u0b8e\u0b8f\3\2\2\2\u0b8f\u0b90\3\2\2\2\u0b90\u0b9c\5\u0088E\2"+
		"\u0b91\u0b93\5\u031c\u018f\2\u0b92\u0b91\3\2\2\2\u0b92\u0b93\3\2\2\2\u0b93"+
		"\u0b97\3\2\2\2\u0b94\u0b95\5\u00b0Y\2\u0b95\u0b96\7\u00eb\2\2\u0b96\u0b98"+
		"\3\2\2\2\u0b97\u0b94\3\2\2\2\u0b97\u0b98\3\2\2\2\u0b98\u0b99\3\2\2\2\u0b99"+
		"\u0b9b\5\u0088E\2\u0b9a\u0b92\3\2\2\2\u0b9b\u0b9e\3\2\2\2\u0b9c\u0b9a"+
		"\3\2\2\2\u0b9c\u0b9d\3\2\2\2\u0b9d\u0107\3\2\2\2\u0b9e\u0b9c\3\2\2\2\u0b9f"+
		"\u0ba0\7\u0103\2\2\u0ba0\u0109\3\2\2\2\u0ba1\u0ba2\5\u008cG\2\u0ba2\u010b"+
		"\3\2\2\2\u0ba3\u0ba4\5\u008cG\2\u0ba4\u010d\3\2\2\2\u0ba5\u0ba6\5\u00b0"+
		"Y\2\u0ba6\u0ba7\7\u00eb\2\2\u0ba7\u0ba9\3\2\2\2\u0ba8\u0ba5\3\2\2\2\u0ba8"+
		"\u0ba9\3\2\2\2\u0ba9\u0bad\3\2\2\2\u0baa\u0bab\5\u00aeX\2\u0bab\u0bac"+
		"\7\u00eb\2\2\u0bac\u0bae\3\2\2\2\u0bad\u0baa\3\2\2\2\u0bad\u0bae\3\2\2"+
		"\2\u0bae\u0bb2\3\2\2\2\u0baf\u0bb0\5\u010c\u0087\2\u0bb0\u0bb1\7\u00eb"+
		"\2\2\u0bb1\u0bb3\3\2\2\2\u0bb2\u0baf\3\2\2\2\u0bb2\u0bb3\3\2\2\2\u0bb3"+
		"\u0bb4\3\2\2\2\u0bb4\u0bb5\5\u010a\u0086\2\u0bb5\u010f\3\2\2\2\u0bb6\u0bbb"+
		"\5<\37\2\u0bb7\u0bb8\7\u00ec\2\2\u0bb8\u0bba\5<\37\2\u0bb9\u0bb7\3\2\2"+
		"\2\u0bba\u0bbd\3\2\2\2\u0bbb\u0bb9\3\2\2\2\u0bbb\u0bbc\3\2\2\2\u0bbc\u0111"+
		"\3\2\2\2\u0bbd\u0bbb\3\2\2\2\u0bbe\u0bbf\7\u00f0\2\2\u0bbf\u0bc6\7\u00ef"+
		"\2\2\u0bc0\u0bc1\7\u00f0\2\2\u0bc1\u0bc2\5\u0110\u0089\2\u0bc2\u0bc3\7"+
		"\u00ef\2\2\u0bc3\u0bc6\3\2\2\2\u0bc4\u0bc6\5<\37\2\u0bc5\u0bbe\3\2\2\2"+
		"\u0bc5\u0bc0\3\2\2\2\u0bc5\u0bc4\3\2\2\2\u0bc6\u0bd3\3\2\2\2\u0bc7\u0bcf"+
		"\7\u00ec\2\2\u0bc8\u0bc9\7\u00f0\2\2\u0bc9\u0bd0\7\u00ef\2\2\u0bca\u0bcb"+
		"\7\u00f0\2\2\u0bcb\u0bcc\5\u0110\u0089\2\u0bcc\u0bcd\7\u00ef\2\2\u0bcd"+
		"\u0bd0\3\2\2\2\u0bce\u0bd0\5<\37\2\u0bcf\u0bc8\3\2\2\2\u0bcf\u0bca\3\2"+
		"\2\2\u0bcf\u0bce\3\2\2\2\u0bd0\u0bd2\3\2\2\2\u0bd1\u0bc7\3\2\2\2\u0bd2"+
		"\u0bd5\3\2\2\2\u0bd3\u0bd1\3\2\2\2\u0bd3\u0bd4\3\2\2\2\u0bd4\u0113\3\2"+
		"\2\2\u0bd5\u0bd3\3\2\2\2\u0bd6\u0bdb\5\u0116\u008c\2\u0bd7\u0bd8\7\u00ec"+
		"\2\2\u0bd8\u0bda\5\u0116\u008c\2\u0bd9\u0bd7\3\2\2\2\u0bda\u0bdd\3\2\2"+
		"\2\u0bdb\u0bd9\3\2\2\2\u0bdb\u0bdc\3\2\2\2\u0bdc\u0115\3\2\2\2\u0bdd\u0bdb"+
		"\3\2\2\2\u0bde\u0bdf\7\u00f0\2\2\u0bdf\u0be0\5\u0110\u0089\2\u0be0\u0be1"+
		"\7\u00ef\2\2\u0be1\u0be4\3\2\2\2\u0be2\u0be4\5\u0110\u0089\2\u0be3\u0bde"+
		"\3\2\2\2\u0be3\u0be2\3\2\2\2\u0be4\u0117\3\2\2\2\u0be5\u0be6\5\u008cG"+
		"\2\u0be6\u0119\3\2\2\2\u0be7\u0be8\7\u00f0\2\2\u0be8\u0be9\5\u00d4k\2"+
		"\u0be9\u0bea\7\u00ef\2\2\u0bea\u011b\3\2\2\2\u0beb\u0bec\5\u0300\u0181"+
		"\2\u0bec\u0bed\5\u0126\u0094\2\u0bed\u0bef\5\u011e\u0090\2\u0bee\u0bf0"+
		"\5\u0120\u0091\2\u0bef\u0bee\3\2\2\2\u0bef\u0bf0\3\2\2\2\u0bf0\u0bf4\3"+
		"\2\2\2\u0bf1\u0bf3\5\u0122\u0092\2\u0bf2\u0bf1\3\2\2\2\u0bf3\u0bf6\3\2"+
		"\2\2\u0bf4\u0bf2\3\2\2\2\u0bf4\u0bf5\3\2\2\2\u0bf5\u011d\3\2\2\2\u0bf6"+
		"\u0bf4\3\2\2\2\u0bf7\u0bfa\5\u02c4\u0163\2\u0bf8\u0bfa\5\u02d4\u016b\2"+
		"\u0bf9\u0bf7\3\2\2\2\u0bf9\u0bf8\3\2\2\2\u0bfa\u0bfb\3\2\2\2\u0bfb\u0bfc"+
		"\5\u030c\u0187\2\u0bfc\u0bfe\3\2\2\2\u0bfd\u0bf9\3\2\2\2\u0bfd\u0bfe\3"+
		"\2\2\2\u0bfe\u0c06\3\2\2\2\u0bff\u0c04\5\u0256\u012c\2\u0c00\u0c05\5\u02a8"+
		"\u0155\2\u0c01\u0c02\5\u0360\u01b1\2\u0c02\u0c03\5\u033c\u019f\2\u0c03"+
		"\u0c05\3\2\2\2\u0c04\u0c00\3\2\2\2\u0c04\u0c01\3\2\2\2\u0c05\u0c07\3\2"+
		"\2\2\u0c06\u0bff\3\2\2\2\u0c06\u0c07\3\2\2\2\u0c07\u011f\3\2\2\2\u0c08"+
		"\u0c0b\5\u0344\u01a3\2\u0c09\u0c0c\5\u038c\u01c7\2\u0c0a\u0c0c\5\u018a"+
		"\u00c6\2\u0c0b\u0c09\3\2\2\2\u0c0b\u0c0a\3\2\2\2\u0c0c\u0c0d\3\2\2\2\u0c0d"+
		"\u0c0e\5\u0230\u0119\2\u0c0e\u0121\3\2\2\2\u0c0f\u0c10\5\u033c\u019f\2"+
		"\u0c10\u0c11\5\u0124\u0093\2\u0c11\u0c12\5\u020e\u0108\2\u0c12\u0c13\7"+
		"\u00f0\2\2\u0c13\u0c14\5d\63\2\u0c14\u0c15\7\u00ef\2\2\u0c15\u0c16\5\u012a"+
		"\u0096\2\u0c16\u0c17\5\u011e\u0090\2\u0c17\u0123\3\2\2\2\u0c18\u0c19\5"+
		"\u0088E\2\u0c19\u0125\3\2\2\2\u0c1a\u0c1b\5\u02ee\u0178\2\u0c1b\u0c1c"+
		"\5\u0128\u0095\2\u0c1c\u0c1e\3\2\2\2\u0c1d\u0c1a\3\2\2\2\u0c1d\u0c1e\3"+
		"\2\2\2\u0c1e\u0c1f\3\2\2\2\u0c1f\u0c20\5\u012a\u0096\2\u0c20\u0c21\5\u011e"+
		"\u0090\2\u0c21\u0c22\5\u0130\u0099\2\u0c22\u0127\3\2\2\2\u0c23\u0c24\5"+
		"\u0088E\2\u0c24\u0129\3\2\2\2\u0c25\u0c27\5\u00a4S\2\u0c26\u0c28\5\u0080"+
		"A\2\u0c27\u0c26\3\2\2\2\u0c27\u0c28\3\2\2\2\u0c28\u0c2a\3\2\2\2\u0c29"+
		"\u0c25\3\2\2\2\u0c29\u0c2a\3\2\2\2\u0c2a\u0c2b\3\2\2\2\u0c2b\u0c2c\5\u02a8"+
		"\u0155\2\u0c2c\u0c2d\5\u019c\u00cf\2\u0c2d\u0c2e\7\u00f0\2\2\u0c2e\u0c2f"+
		"\5\u012c\u0097\2\u0c2f\u0c30\7\u00ef\2\2\u0c30\u0c31\5\u02f4\u017b\2\u0c31"+
		"\u0c32\7\u00f0\2\2\u0c32\u0c33\5\u012c\u0097\2\u0c33\u0c34\7\u00ef\2\2"+
		"\u0c34\u012b\3\2\2\2\u0c35\u0c3a\5\u012e\u0098\2\u0c36\u0c37\7\u00ec\2"+
		"\2\u0c37\u0c39\5\u012e\u0098\2\u0c38\u0c36\3\2\2\2\u0c39\u0c3c\3\2\2\2"+
		"\u0c3a\u0c38\3\2\2\2\u0c3a\u0c3b\3\2\2\2\u0c3b\u012d\3\2\2\2\u0c3c\u0c3a"+
		"\3\2\2\2\u0c3d\u0c42\5<\37\2\u0c3e\u0c40\5\u0194\u00cb\2\u0c3f\u0c3e\3"+
		"\2\2\2\u0c3f\u0c40\3\2\2\2\u0c40\u0c41\3\2\2\2\u0c41\u0c43\5\u0080A\2"+
		"\u0c42\u0c3f\3\2\2\2\u0c42\u0c43\3\2\2\2\u0c43\u012f\3\2\2\2\u0c44\u0c4a"+
		"\5\u034c\u01a7\2\u0c45\u0c4b\5\u0258\u012d\2\u0c46\u0c48\5\u038e\u01c8"+
		"\2\u0c47\u0c49\5\u018a\u00c6\2\u0c48\u0c47\3\2\2\2\u0c48\u0c49\3\2\2\2"+
		"\u0c49\u0c4b\3\2\2\2\u0c4a\u0c45\3\2\2\2\u0c4a\u0c46\3\2\2\2\u0c4a\u0c4b"+
		"\3\2\2\2\u0c4b\u0c52\3\2\2\2\u0c4c\u0c4f\5\u0270\u0139\2\u0c4d\u0c4f\5"+
		"\u0358\u01ad\2\u0c4e\u0c4c\3\2\2\2\u0c4e\u0c4d\3\2\2\2\u0c4f\u0c50\3\2"+
		"\2\2\u0c50\u0c51\5\u0216\u010c\2\u0c51\u0c53\3\2\2\2\u0c52\u0c4e\3\2\2"+
		"\2\u0c52\u0c53\3\2\2\2\u0c53\u0c55\3\2\2\2\u0c54\u0c44\3\2\2\2\u0c54\u0c55"+
		"\3\2\2\2\u0c55\u0c61\3\2\2\2\u0c56\u0c57\5\u02d0\u0169\2\u0c57\u0c58\7"+
		"\u00f0\2\2\u0c58\u0c59\7\u0103\2\2\u0c59\u0c5f\7\u00ef\2\2\u0c5a\u0c5b"+
		"\5\u038a\u01c6\2\u0c5b\u0c5c\7\u00f0\2\2\u0c5c\u0c5d\5\u00d4k\2\u0c5d"+
		"\u0c5e\7\u00ef\2\2\u0c5e\u0c60\3\2\2\2\u0c5f\u0c5a\3\2\2\2\u0c5f\u0c60"+
		"\3\2\2\2\u0c60\u0c62\3\2\2\2\u0c61\u0c56\3\2\2\2\u0c61\u0c62\3\2\2\2\u0c62"+
		"\u0c63\3\2\2\2\u0c63\u0c64\7\u00f0\2\2\u0c64\u0c65\5\u0132\u009a\2\u0c65"+
		"\u0c66\7\u00ef\2\2\u0c66\u0131\3\2\2\2\u0c67\u0c6c\5\u0134\u009b\2\u0c68"+
		"\u0c69\7\u00ec\2\2\u0c69\u0c6b\5\u0134\u009b\2\u0c6a\u0c68\3\2\2\2\u0c6b"+
		"\u0c6e\3\2\2\2\u0c6c\u0c6a\3\2\2\2\u0c6c\u0c6d\3\2\2\2\u0c6d\u0133\3\2"+
		"\2\2\u0c6e\u0c6c\3\2\2\2\u0c6f\u0c75\5\u0258\u012d\2\u0c70\u0c72\5\u038e"+
		"\u01c8\2\u0c71\u0c73\5\u018a\u00c6\2\u0c72\u0c71\3\2\2\2\u0c72\u0c73\3"+
		"\2\2\2\u0c73\u0c75\3\2\2\2\u0c74\u0c6f\3\2\2\2\u0c74\u0c70\3\2\2\2\u0c74"+
		"\u0c75\3\2\2\2\u0c75\u0c76\3\2\2\2\u0c76\u0c78\5\u0136\u009c\2\u0c77\u0c79"+
		"\5\u014e\u00a8\2\u0c78\u0c77\3\2\2\2\u0c78\u0c79\3\2\2\2\u0c79\u0c7a\3"+
		"\2\2\2\u0c7a\u0c7b\7\u00f6\2\2\u0c7b\u0c7c\5<\37\2\u0c7c\u0135\3\2\2\2"+
		"\u0c7d\u0c7e\5\u013c\u009f\2\u0c7e\u0c81\7\u00f2\2\2\u0c7f\u0c82\5\u0146"+
		"\u00a4\2\u0c80\u0c82\5\u0138\u009d\2\u0c81\u0c7f\3\2\2\2\u0c81\u0c80\3"+
		"\2\2\2\u0c82\u0c83\3\2\2\2\u0c83\u0c84\7\u00f1\2\2\u0c84\u0137\3\2\2\2"+
		"\u0c85\u0c8a\5\u013a\u009e\2\u0c86\u0c87\7\u00ec\2\2\u0c87\u0c89\5\u013a"+
		"\u009e\2\u0c88\u0c86\3\2\2\2\u0c89\u0c8c\3\2\2\2\u0c8a\u0c88\3\2\2\2\u0c8a"+
		"\u0c8b\3\2\2\2\u0c8b\u0139\3\2\2\2\u0c8c\u0c8a\3\2\2\2\u0c8d\u0c91\5\u00d4"+
		"k\2\u0c8e\u0c91\5<\37\2\u0c8f\u0c91\5\u013e\u00a0\2\u0c90\u0c8d\3\2\2"+
		"\2\u0c90\u0c8e\3\2\2\2\u0c90\u0c8f\3\2\2\2\u0c91\u013b\3\2\2\2\u0c92\u0c93"+
		"\5\u010a\u0086\2\u0c93\u013d\3\2\2\2\u0c94\u0c95\5\u01cc\u00e7\2\u0c95"+
		"\u0cad\5\u010a\u0086\2\u0c96\u0c97\5\u01da\u00ee\2\u0c97\u0c9a\7\u00f0"+
		"\2\2\u0c98\u0c9b\5\u0144\u00a3\2\u0c99\u0c9b\5d\63\2\u0c9a\u0c98\3\2\2"+
		"\2\u0c9a\u0c99\3\2\2\2\u0c9b\u0c9c\3\2\2\2\u0c9c\u0c9d\7\u00ef\2\2\u0c9d"+
		"\u0cae\3\2\2\2\u0c9e\u0c9f\5\u01ee\u00f8\2\u0c9f\u0ca0\5\u0140\u00a1\2"+
		"\u0ca0\u0ca2\3\2\2\2\u0ca1\u0c9e\3\2\2\2\u0ca1\u0ca2\3\2\2\2\u0ca2\u0ca3"+
		"\3\2\2\2\u0ca3\u0ca4\5\u01ce\u00e8\2\u0ca4\u0ca5\5\u0142\u00a2\2\u0ca5"+
		"\u0ca6\5\u024c\u0127\2\u0ca6\u0ca9\5\u0142\u00a2\2\u0ca7\u0caa\5\u01dc"+
		"\u00ef\2\u0ca8\u0caa\5\u02a2\u0152\2\u0ca9\u0ca7\3\2\2\2\u0ca9\u0ca8\3"+
		"\2\2\2\u0caa\u0cab\3\2\2\2\u0cab\u0cac\5\u0142\u00a2\2\u0cac\u0cae\3\2"+
		"\2\2\u0cad\u0c96\3\2\2\2\u0cad\u0ca1\3\2\2\2\u0cae\u013f\3\2\2\2\u0caf"+
		"\u0cb0\5\u03a8\u01d5\2\u0cb0\u0141\3\2\2\2\u0cb1\u0cb3\t\5\2\2\u0cb2\u0cb1"+
		"\3\2\2\2\u0cb2\u0cb3\3\2\2\2\u0cb3\u0cb4\3\2\2\2\u0cb4\u0cb7\7\u0103\2"+
		"\2\u0cb5\u0cb7\5\u03a8\u01d5\2\u0cb6\u0cb2\3\2\2\2\u0cb6\u0cb5\3\2\2\2"+
		"\u0cb7\u0143\3\2\2\2\u0cb8\u0cbd\5\u0142\u00a2\2\u0cb9\u0cba\7\u00ec\2"+
		"\2\u0cba\u0cbc\5\u0142\u00a2\2\u0cbb\u0cb9\3\2\2\2\u0cbc\u0cbf\3\2\2\2"+
		"\u0cbd\u0cbb\3\2\2\2\u0cbd\u0cbe\3\2\2\2\u0cbe\u0145\3\2\2\2\u0cbf\u0cbd"+
		"\3\2\2\2\u0cc0\u0cc1\5\u01cc\u00e7\2\u0cc1\u0cc2\7\u00f0\2\2\u0cc2\u0cc3"+
		"\5\u00b6\\\2\u0cc3\u0cc4\7\u00ef\2\2\u0cc4\u0cc5\5\u01da\u00ee\2\u0cc5"+
		"\u0cc8\7\u00f0\2\2\u0cc6\u0cc9\5\u014a\u00a6\2\u0cc7\u0cc9\5d\63\2\u0cc8"+
		"\u0cc6\3\2\2\2\u0cc8\u0cc7\3\2\2\2\u0cc9\u0cca\3\2\2\2\u0cca\u0ccb\7\u00ef"+
		"\2\2\u0ccb\u0147\3\2\2\2\u0ccc\u0ccd\7\u00f0\2\2\u0ccd\u0cce\5\u0144\u00a3"+
		"\2\u0cce\u0ccf\7\u00ef\2\2\u0ccf\u0149\3\2\2\2\u0cd0\u0cd5\5\u0148\u00a5"+
		"\2\u0cd1\u0cd2\7\u00ec\2\2\u0cd2\u0cd4\5\u0148\u00a5\2\u0cd3\u0cd1\3\2"+
		"\2\2\u0cd4\u0cd7\3\2\2\2\u0cd5\u0cd3\3\2\2\2\u0cd5\u0cd6\3\2\2\2\u0cd6"+
		"\u014b\3\2\2\2\u0cd7\u0cd5\3\2\2\2\u0cd8\u0cda\5\u0254\u012b\2\u0cd9\u0cdb"+
		"\5\u018a\u00c6\2\u0cda\u0cd9\3\2\2\2\u0cda\u0cdb\3\2\2\2\u0cdb\u0cdf\3"+
		"\2\2\2\u0cdc\u0cdf\5\u01e6\u00f4\2\u0cdd\u0cdf\5\u01f6\u00fc\2\u0cde\u0cd8"+
		"\3\2\2\2\u0cde\u0cdc\3\2\2\2\u0cde\u0cdd\3\2\2\2\u0cdf\u0ce2\3\2\2\2\u0ce0"+
		"\u0ce3\5(\25\2\u0ce1\u0ce3\5d\63\2\u0ce2\u0ce0\3\2\2\2\u0ce2\u0ce1\3\2"+
		"\2\2\u0ce3\u014d\3\2\2\2\u0ce4\u0ce6\5\u0216\u010c\2\u0ce5\u0ce7\5\u035e"+
		"\u01b0\2\u0ce6\u0ce5\3\2\2\2\u0ce6\u0ce7\3\2\2\2\u0ce7\u0ce8\3\2\2\2\u0ce8"+
		"\u0ce9\5\u019c\u00cf\2\u0ce9\u0ced\5\u0150\u00a9\2\u0cea\u0cec\5\u0152"+
		"\u00aa\2\u0ceb\u0cea\3\2\2\2\u0cec\u0cef\3\2\2\2\u0ced\u0ceb\3\2\2\2\u0ced"+
		"\u0cee\3\2\2\2\u0cee\u014f\3\2\2\2\u0cef\u0ced\3\2\2\2\u0cf0\u0cf2\5<"+
		"\37\2\u0cf1\u0cf3\5\u0196\u00cc\2\u0cf2\u0cf1\3\2\2\2\u0cf2\u0cf3\3\2"+
		"\2\2\u0cf3\u0cf5\3\2\2\2\u0cf4\u0cf6\5\u01ba\u00de\2\u0cf5\u0cf4\3\2\2"+
		"\2\u0cf5\u0cf6\3\2\2\2\u0cf6\u0cfa\3\2\2\2\u0cf7\u0cf8\5\u0314\u018b\2"+
		"\u0cf8\u0cf9\5\u02ba\u015e\2\u0cf9\u0cfb\3\2\2\2\u0cfa\u0cf7\3\2\2\2\u0cfa"+
		"\u0cfb\3\2\2\2\u0cfb\u0cff\3\2\2\2\u0cfc\u0cfd\5\u0314\u018b\2\u0cfd\u0cfe"+
		"\5\u02d6\u016c\2\u0cfe\u0d00\3\2\2\2\u0cff\u0cfc\3\2\2\2\u0cff\u0d00\3"+
		"\2\2\2\u0d00\u0151\3\2\2\2\u0d01\u0d02\7\u00ec\2\2\u0d02\u0d04\5<\37\2"+
		"\u0d03\u0d05\5\u0196\u00cc\2\u0d04\u0d03\3\2\2\2\u0d04\u0d05\3\2\2\2\u0d05"+
		"\u0d07\3\2\2\2\u0d06\u0d08\5\u01ba\u00de\2\u0d07\u0d06\3\2\2\2\u0d07\u0d08"+
		"\3\2\2\2\u0d08\u0d0c\3\2\2\2\u0d09\u0d0a\5\u0314\u018b\2\u0d0a\u0d0b\5"+
		"\u02ba\u015e\2\u0d0b\u0d0d\3\2\2\2\u0d0c\u0d09\3\2\2\2\u0d0c\u0d0d\3\2"+
		"\2\2\u0d0d\u0d11\3\2\2\2\u0d0e\u0d0f\5\u0314\u018b\2\u0d0f\u0d10\5\u02d6"+
		"\u016c\2\u0d10\u0d12\3\2\2\2\u0d11\u0d0e\3\2\2\2\u0d11\u0d12\3\2\2\2\u0d12"+
		"\u0153\3\2\2\2\u0d13\u0d14\5\u0084C\2\u0d14\u0155\3\2\2\2\u0d15\u0d16"+
		"\5\u0154\u00ab\2\u0d16\u0d1a\7\u00f0\2\2\u0d17\u0d1b\5\u01bc\u00df\2\u0d18"+
		"\u0d1b\5\u0256\u012c\2\u0d19\u0d1b\5\u018a\u00c6\2\u0d1a\u0d17\3\2\2\2"+
		"\u0d1a\u0d18\3\2\2\2\u0d1a\u0d19\3\2\2\2\u0d1a\u0d1b\3\2\2\2\u0d1b\u0d1d"+
		"\3\2\2\2\u0d1c\u0d1e\5<\37\2\u0d1d\u0d1c\3\2\2\2\u0d1d\u0d1e\3\2\2\2\u0d1e"+
		"\u0d23\3\2\2\2\u0d1f\u0d20\7\u00ec\2\2\u0d20\u0d22\5<\37\2\u0d21\u0d1f"+
		"\3\2\2\2\u0d22\u0d25\3\2\2\2\u0d23\u0d21\3\2\2\2\u0d23\u0d24\3\2\2\2\u0d24"+
		"\u0d2c\3\2\2\2\u0d25\u0d23\3\2\2\2\u0d26\u0d29\5\u0342\u01a2\2\u0d27\u0d29"+
		"\5\u02c4\u0163\2\u0d28\u0d26\3\2\2\2\u0d28\u0d27\3\2\2\2\u0d29\u0d2a\3"+
		"\2\2\2\u0d2a\u0d2b\5\u0314\u018b\2\u0d2b\u0d2d\3\2\2\2\u0d2c\u0d28\3\2"+
		"\2\2\u0d2c\u0d2d\3\2\2\2\u0d2d\u0d2e\3\2\2\2\u0d2e\u0d2f\7\u00ef\2\2\u0d2f"+
		"\u0157\3\2\2\2\u0d30\u0d44\5\u016e\u00b8\2\u0d31\u0d44\5\u016a\u00b6\2"+
		"\u0d32\u0d44\5\u016c\u00b7\2\u0d33\u0d44\5\u0170\u00b9\2\u0d34\u0d44\5"+
		"\u0172\u00ba\2\u0d35\u0d3c\5\u0156\u00ac\2\u0d36\u0d39\5\u0342\u01a2\2"+
		"\u0d37\u0d39\5\u02c4\u0163\2\u0d38\u0d36\3\2\2\2\u0d38\u0d37\3\2\2\2\u0d39"+
		"\u0d3a\3\2\2\2\u0d3a\u0d3b\5\u0314\u018b\2\u0d3b\u0d3d\3\2\2\2\u0d3c\u0d38"+
		"\3\2\2\2\u0d3c\u0d3d\3\2\2\2\u0d3d\u0d3e\3\2\2\2\u0d3e\u0d3f\5\u0320\u0191"+
		"\2\u0d3f\u0d40\7\u00f0\2\2\u0d40\u0d41\5\u015c\u00af\2\u0d41\u0d42\7\u00ef"+
		"\2\2\u0d42\u0d44\3\2\2\2\u0d43\u0d30\3\2\2\2\u0d43\u0d31\3\2\2\2\u0d43"+
		"\u0d32\3\2\2\2\u0d43\u0d33\3\2\2\2\u0d43\u0d34\3\2\2\2\u0d43\u0d35\3\2"+
		"\2\2\u0d44\u0159\3\2\2\2\u0d45\u0d46\5\u0292\u014a\2\u0d46\u0d4e\7\u00f0"+
		"\2\2\u0d47\u0d4f\7\u00ed\2\2\u0d48\u0d4c\5\u01bc\u00df\2\u0d49\u0d4c\5"+
		"\u0256\u012c\2\u0d4a\u0d4c\5\u018a\u00c6\2\u0d4b\u0d48\3\2\2\2\u0d4b\u0d49"+
		"\3\2\2\2\u0d4b\u0d4a\3\2\2\2\u0d4b\u0d4c\3\2\2\2\u0d4c\u0d4d\3\2\2\2\u0d4d"+
		"\u0d4f\5<\37\2\u0d4e\u0d47\3\2\2\2\u0d4e\u0d4b\3\2\2\2\u0d4f\u0d50\3\2"+
		"\2\2\u0d50\u0d56\7\u00ef\2\2\u0d51\u0d52\5\u0320\u0191\2\u0d52\u0d53\7"+
		"\u00f0\2\2\u0d53\u0d54\5\u015c\u00af\2\u0d54\u0d55\7\u00ef\2\2\u0d55\u0d57"+
		"\3\2\2\2\u0d56\u0d51\3\2\2\2\u0d56\u0d57\3\2\2\2\u0d57\u015b\3\2\2\2\u0d58"+
		"\u0d5a\5\u00a4S\2\u0d59\u0d58\3\2\2\2\u0d59\u0d5a\3\2\2\2\u0d5a\u0d5f"+
		"\3\2\2\2\u0d5b\u0d5d\5\u014e\u00a8\2\u0d5c\u0d5e\5\u0160\u00b1\2\u0d5d"+
		"\u0d5c\3\2\2\2\u0d5d\u0d5e\3\2\2\2\u0d5e\u0d60\3\2\2\2\u0d5f\u0d5b\3\2"+
		"\2\2\u0d5f\u0d60\3\2\2\2\u0d60\u015d\3\2\2\2\u0d61\u0d64\5\u0382\u01c2"+
		"\2\u0d62\u0d65\5\u0330\u0199\2\u0d63\u0d65\5\u02bc\u015f\2\u0d64\u0d62"+
		"\3\2\2\2\u0d64\u0d63\3\2\2\2\u0d65\u0d6f\3\2\2\2\u0d66\u0d67\5\u01b0\u00d9"+
		"\2\u0d67\u0d68\5\u0228\u0115\2\u0d68\u0d6f\3\2\2\2\u0d69\u0d6c\5<\37\2"+
		"\u0d6a\u0d6d\5\u0330\u0199\2\u0d6b\u0d6d\5\u02bc\u015f\2\u0d6c\u0d6a\3"+
		"\2\2\2\u0d6c\u0d6b\3\2\2\2\u0d6d\u0d6f\3\2\2\2\u0d6e\u0d61\3\2\2\2\u0d6e"+
		"\u0d66\3\2\2\2\u0d6e\u0d69\3\2\2\2\u0d6f\u015f\3\2\2\2\u0d70\u0d73\5\u0230"+
		"\u0119\2\u0d71\u0d73\5\u0336\u019c\2\u0d72\u0d70\3\2\2\2\u0d72\u0d71\3"+
		"\2\2\2\u0d73\u0d7a\3\2\2\2\u0d74\u0d7b\5\u015e\u00b0\2\u0d75\u0d76\5\u019a"+
		"\u00ce\2\u0d76\u0d77\5\u015e\u00b0\2\u0d77\u0d78\5\u018e\u00c8\2\u0d78"+
		"\u0d79\5\u015e\u00b0\2\u0d79\u0d7b\3\2\2\2\u0d7a\u0d74\3\2\2\2\u0d7a\u0d75"+
		"\3\2\2\2\u0d7b\u0161\3\2\2\2\u0d7c\u0d7f\5\u0292\u014a\2\u0d7d\u0d7f\5"+
		"\u0086D\2\u0d7e\u0d7c\3\2\2\2\u0d7e\u0d7d\3\2\2\2\u0d7f\u0163\3\2\2\2"+
		"\u0d80\u0d98\5\u0168\u00b5\2\u0d81\u0d98\5\u0166\u00b4\2\u0d82\u0d98\5"+
		"\u0170\u00b9\2\u0d83\u0d98\5\u0172\u00ba\2\u0d84\u0d85\5\u0162\u00b2\2"+
		"\u0d85\u0d8d\7\u00f0\2\2\u0d86\u0d8e\7\u00ed\2\2\u0d87\u0d8b\5\u01bc\u00df"+
		"\2\u0d88\u0d8b\5\u0256\u012c\2\u0d89\u0d8b\5\u018a\u00c6\2\u0d8a\u0d87"+
		"\3\2\2\2\u0d8a\u0d88\3\2\2\2\u0d8a\u0d89\3\2\2\2\u0d8a\u0d8b\3\2\2\2\u0d8b"+
		"\u0d8c\3\2\2\2\u0d8c\u0d8e\5<\37\2\u0d8d\u0d86\3\2\2\2\u0d8d\u0d8a\3\2"+
		"\2\2\u0d8e\u0d8f\3\2\2\2\u0d8f\u0d95\7\u00ef\2\2\u0d90\u0d91\5\u0320\u0191"+
		"\2\u0d91\u0d92\7\u00f0\2\2\u0d92\u0d93\5\u015c\u00af\2\u0d93\u0d94\7\u00ef"+
		"\2\2\u0d94\u0d96\3\2\2\2\u0d95\u0d90\3\2\2\2\u0d95\u0d96\3\2\2\2\u0d96"+
		"\u0d98\3\2\2\2\u0d97\u0d80\3\2\2\2\u0d97\u0d81\3\2\2\2\u0d97\u0d82\3\2"+
		"\2\2\u0d97\u0d83\3\2\2\2\u0d97\u0d84\3\2\2\2\u0d98\u0165\3\2\2\2\u0d99"+
		"\u0d9a\5\u0324\u0193\2\u0d9a\u0d9b\7\u00f0\2\2\u0d9b\u0d9c\5\u0116\u008c"+
		"\2\u0d9c\u0d9d\7\u00ef\2\2\u0d9d\u0d9e\5\u039e\u01d0\2\u0d9e\u0d9f\5\u01d2"+
		"\u00ea\2\u0d9f\u0da0\7\u00f0\2\2\u0da0\u0da1\5\u0216\u010c\2\u0da1\u0da2"+
		"\5\u019c\u00cf\2\u0da2\u0da5\5<\37\2\u0da3\u0da6\5\u0196\u00cc\2\u0da4"+
		"\u0da6\5\u01ba\u00de\2\u0da5\u0da3\3\2\2\2\u0da5\u0da4\3\2\2\2\u0da5\u0da6"+
		"\3\2\2\2\u0da6\u0dac\3\2\2\2\u0da7\u0daa\5\u0314\u018b\2\u0da8\u0dab\5"+
		"\u02ba\u015e\2\u0da9\u0dab\5\u02d6\u016c\2\u0daa\u0da8\3\2\2\2\u0daa\u0da9"+
		"\3\2\2\2\u0dab\u0dad\3\2\2\2\u0dac\u0da7\3\2\2\2\u0dac\u0dad\3\2\2\2\u0dad"+
		"\u0dbd\3\2\2\2\u0dae\u0daf\7\u00ec\2\2\u0daf\u0db2\5<\37\2\u0db0\u0db3"+
		"\5\u0196\u00cc\2\u0db1\u0db3\5\u01ba\u00de\2\u0db2\u0db0\3\2\2\2\u0db2"+
		"\u0db1\3\2\2\2\u0db2\u0db3\3\2\2\2\u0db3\u0db9\3\2\2\2\u0db4\u0db7\5\u0314"+
		"\u018b\2\u0db5\u0db8\5\u02ba\u015e\2\u0db6\u0db8\5\u02d6\u016c\2\u0db7"+
		"\u0db5\3\2\2\2\u0db7\u0db6\3\2\2\2\u0db8\u0dba\3\2\2\2\u0db9\u0db4\3\2"+
		"\2\2\u0db9\u0dba\3\2\2\2\u0dba\u0dbc\3\2\2\2\u0dbb\u0dae\3\2\2\2\u0dbc"+
		"\u0dbf\3\2\2\2\u0dbd\u0dbb\3\2\2\2\u0dbd\u0dbe\3\2\2\2\u0dbe\u0167\3\2"+
		"\2\2\u0dbf\u0dbd\3\2\2\2\u0dc0\u0dc1\5\u02a4\u0153\2\u0dc1\u0dc2\7\u00f0"+
		"\2\2\u0dc2\u0dc3\5\u0116\u008c\2\u0dc3\u0dc4\7\u00ef\2\2\u0dc4\u0dc5\5"+
		"\u039e\u01d0\2\u0dc5\u0dc6\5\u01d2\u00ea\2\u0dc6\u0dc7\7\u00f0\2\2\u0dc7"+
		"\u0dc8\5\u0216\u010c\2\u0dc8\u0dc9\5\u019c\u00cf\2\u0dc9\u0dcc\5<\37\2"+
		"\u0dca\u0dcd\5\u0196\u00cc\2\u0dcb\u0dcd\5\u01ba\u00de\2\u0dcc\u0dca\3"+
		"\2\2\2\u0dcc\u0dcb\3\2\2\2\u0dcc\u0dcd\3\2\2\2\u0dcd\u0dd3\3\2\2\2\u0dce"+
		"\u0dd1\5\u0314\u018b\2\u0dcf\u0dd2\5\u02ba\u015e\2\u0dd0\u0dd2\5\u02d6"+
		"\u016c\2\u0dd1\u0dcf\3\2\2\2\u0dd1\u0dd0\3\2\2\2\u0dd2\u0dd4\3\2\2\2\u0dd3"+
		"\u0dce\3\2\2\2\u0dd3\u0dd4\3\2\2\2\u0dd4\u0de4\3\2\2\2\u0dd5\u0dd6\7\u00ec"+
		"\2\2\u0dd6\u0dd9\5<\37\2\u0dd7\u0dda\5\u0196\u00cc\2\u0dd8\u0dda\5\u01ba"+
		"\u00de\2\u0dd9\u0dd7\3\2\2\2\u0dd9\u0dd8\3\2\2\2\u0dd9\u0dda\3\2\2\2\u0dda"+
		"\u0de0\3\2\2\2\u0ddb\u0dde\5\u0314\u018b\2\u0ddc\u0ddf\5\u02ba\u015e\2"+
		"\u0ddd\u0ddf\5\u02d6\u016c\2\u0dde\u0ddc\3\2\2\2\u0dde\u0ddd\3\2\2\2\u0ddf"+
		"\u0de1\3\2\2\2\u0de0\u0ddb\3\2\2\2\u0de0\u0de1\3\2\2\2\u0de1\u0de3\3\2"+
		"\2\2\u0de2\u0dd5\3\2\2\2\u0de3\u0de6\3\2\2\2\u0de4\u0de2\3\2\2\2\u0de4"+
		"\u0de5\3\2\2\2\u0de5\u0169\3\2\2\2\u0de6\u0de4\3\2\2\2\u0de7\u0de8\5\u0324"+
		"\u0193\2\u0de8\u0de9\7\u00f0\2\2\u0de9\u0dea\7\u00ef\2\2\u0dea\u0deb\5"+
		"\u0320\u0191\2\u0deb\u0dec\7\u00f0\2\2\u0dec\u0ded\5\u00a4S\2\u0ded\u0dee"+
		"\7\u00ef\2\2\u0dee\u016b\3\2\2\2\u0def\u0df2\5\u0328\u0195\2\u0df0\u0df2"+
		"\5\u0326\u0194\2\u0df1\u0def\3\2\2\2\u0df1\u0df0\3\2\2\2\u0df2\u0df3\3"+
		"\2\2\2\u0df3\u0df4\7\u00f0\2\2\u0df4\u0df5\5<\37\2\u0df5\u0df6\7\u00ef"+
		"\2\2\u0df6\u0df7\5\u039e\u01d0\2\u0df7\u0df8\5\u01d2\u00ea\2\u0df8\u0df9"+
		"\7\u00f0\2\2\u0df9\u0dfa\5\u014e\u00a8\2\u0dfa\u0e00\7\u00ef\2\2\u0dfb"+
		"\u0dfc\5\u0320\u0191\2\u0dfc\u0dfd\7\u00f0\2\2\u0dfd\u0dfe\5\u00a4S\2"+
		"\u0dfe\u0dff\7\u00ef\2\2\u0dff\u0e01\3\2\2\2\u0e00\u0dfb\3\2\2\2\u0e00"+
		"\u0e01\3\2\2\2\u0e01\u016d\3\2\2\2\u0e02\u0e03\5\u02a4\u0153\2\u0e03\u0e04"+
		"\7\u00f0\2\2\u0e04\u0e05\7\u00ef\2\2\u0e05\u0e06\5\u0320\u0191\2\u0e06"+
		"\u0e07\7\u00f0\2\2\u0e07\u0e08\5\u00a4S\2\u0e08\u0e09\7\u00ef\2\2\u0e09"+
		"\u016f\3\2\2\2\u0e0a\u0e0b\5\u0162\u00b2\2\u0e0b\u0e13\7\u00f0\2\2\u0e0c"+
		"\u0e14\7\u00ed\2\2\u0e0d\u0e11\5\u01bc\u00df\2\u0e0e\u0e11\5\u0256\u012c"+
		"\2\u0e0f\u0e11\5\u018a\u00c6\2\u0e10\u0e0d\3\2\2\2\u0e10\u0e0e\3\2\2\2"+
		"\u0e10\u0e0f\3\2\2\2\u0e10\u0e11\3\2\2\2\u0e11\u0e12\3\2\2\2\u0e12\u0e14"+
		"\5<\37\2\u0e13\u0e0c\3\2\2\2\u0e13\u0e10\3\2\2\2\u0e14\u0e15\3\2\2\2\u0e15"+
		"\u0e16\7\u00ef\2\2\u0e16\u0e17\5\u02d4\u016b\2\u0e17\u0e18\7\u00f0\2\2"+
		"\u0e18\u0e1b\5\u02a4\u0153\2\u0e19\u0e1c\5\u02ba\u015e\2\u0e1a\u0e1c\5"+
		"\u02d6\u016c\2\u0e1b\u0e19\3\2\2\2\u0e1b\u0e1a\3\2\2\2\u0e1c\u0e1d\3\2"+
		"\2\2\u0e1d\u0e1e\5\u014e\u00a8\2\u0e1e\u0e24\7\u00ef\2\2\u0e1f\u0e20\5"+
		"\u0320\u0191\2\u0e20\u0e21\7\u00f0\2\2\u0e21\u0e22\5\u015c\u00af\2\u0e22"+
		"\u0e23\7\u00ef\2\2\u0e23\u0e25\3\2\2\2\u0e24\u0e1f\3\2\2\2\u0e24\u0e25"+
		"\3\2\2\2\u0e25\u0171\3\2\2\2\u0e26\u0e27\5\u02e4\u0173\2\u0e27\u0e28\7"+
		"\u00f0\2\2\u0e28\u0e2b\5<\37\2\u0e29\u0e2a\7\u00ec\2\2\u0e2a\u0e2c\5\u03a8"+
		"\u01d5\2\u0e2b\u0e29\3\2\2\2\u0e2b\u0e2c\3\2\2\2\u0e2c\u0e2d\3\2\2\2\u0e2d"+
		"\u0e2e\7\u00ef\2\2\u0e2e\u0e2f\5\u039e\u01d0\2\u0e2f\u0e30\5\u01d2\u00ea"+
		"\2\u0e30\u0e31\7\u00f0\2\2\u0e31\u0e32\5\u014e\u00a8\2\u0e32\u0e38\7\u00ef"+
		"\2\2\u0e33\u0e34\5\u0320\u0191\2\u0e34\u0e35\7\u00f0\2\2\u0e35\u0e36\5"+
		"\u00a4S\2\u0e36\u0e37\7\u00ef\2\2\u0e37\u0e39\3\2\2\2\u0e38\u0e33\3\2"+
		"\2\2\u0e38\u0e39\3\2\2\2\u0e39\u0173\3\2\2\2\u0e3a\u0e3b\5\u01cc\u00e7"+
		"\2\u0e3b\u0e44\5\u0258\u012d\2\u0e3c\u0e3d\5\u020a\u0106\2\u0e3d\u0e41"+
		"\5\u0176\u00bc\2\u0e3e\u0e40\5\u0178\u00bd\2\u0e3f\u0e3e\3\2\2\2\u0e40"+
		"\u0e43\3\2\2\2\u0e41\u0e3f\3\2\2\2\u0e41\u0e42\3\2\2\2\u0e42\u0e45\3\2"+
		"\2\2\u0e43\u0e41\3\2\2\2\u0e44\u0e3c\3\2\2\2\u0e44\u0e45\3\2\2\2\u0e45"+
		"\u0e4d\3\2\2\2\u0e46\u0e4e\5\u0204\u0103\2\u0e47\u0e48\5\u039a\u01ce\2"+
		"\u0e48\u0e49\7\u0103\2\2\u0e49\u0e4e\3\2\2\2\u0e4a\u0e4b\5\u0362\u01b2"+
		"\2\u0e4b\u0e4c\5\u02ea\u0176\2\u0e4c\u0e4e\3\2\2\2\u0e4d\u0e46\3\2\2\2"+
		"\u0e4d\u0e47\3\2\2\2\u0e4d\u0e4a\3\2\2\2\u0e4d\u0e4e\3\2\2\2\u0e4e\u0175"+
		"\3\2\2\2\u0e4f\u0e50\5\u00b0Y\2\u0e50\u0e51\7\u00eb\2\2\u0e51\u0e53\3"+
		"\2\2\2\u0e52\u0e4f\3\2\2\2\u0e52\u0e53\3\2\2\2\u0e53\u0e57\3\2\2\2\u0e54"+
		"\u0e55\5\u00aeX\2\u0e55\u0e56\7\u00eb\2\2\u0e56\u0e58\3\2\2\2\u0e57\u0e54"+
		"\3\2\2\2\u0e57\u0e58\3\2\2\2\u0e58\u0e59\3\2\2\2\u0e59\u0e5a\5\u010a\u0086"+
		"\2\u0e5a\u0177\3\2\2\2\u0e5b\u0e5f\7\u00ec\2\2\u0e5c\u0e5d\5\u00b0Y\2"+
		"\u0e5d\u0e5e\7\u00eb\2\2\u0e5e\u0e60\3\2\2\2\u0e5f\u0e5c\3\2\2\2\u0e5f"+
		"\u0e60\3\2\2\2\u0e60\u0e64\3\2\2\2\u0e61\u0e62\5\u00aeX\2\u0e62\u0e63"+
		"\7\u00eb\2\2\u0e63\u0e65\3\2\2\2\u0e64\u0e61\3\2\2\2\u0e64\u0e65\3\2\2"+
		"\2\u0e65\u0e66\3\2\2\2\u0e66\u0e67\5\u010a\u0086\2\u0e67\u0179\3\2\2\2"+
		"\u0e68\u0e6a\5\u032a\u0196\2\u0e69\u0e6b\5\u03a0\u01d1\2\u0e6a\u0e69\3"+
		"\2\2\2\u0e6a\u0e6b\3\2\2\2\u0e6b\u0e6c\3\2\2\2\u0e6c\u0e6d\7\u00f0\2\2"+
		"\u0e6d\u0e6f\5\u0164\u00b3\2\u0e6e\u0e70\5~@\2\u0e6f\u0e6e\3\2\2\2\u0e6f"+
		"\u0e70\3\2\2\2\u0e70\u0e78\3\2\2\2\u0e71\u0e72\7\u00ec\2\2\u0e72\u0e74"+
		"\5\u0164\u00b3\2\u0e73\u0e75\5~@\2\u0e74\u0e73\3\2\2\2\u0e74\u0e75\3\2"+
		"\2\2\u0e75\u0e77\3\2\2\2\u0e76\u0e71\3\2\2\2\u0e77\u0e7a\3\2\2\2\u0e78"+
		"\u0e76\3\2\2\2\u0e78\u0e79\3\2\2\2\u0e79\u0e7b\3\2\2\2\u0e7a\u0e78\3\2"+
		"\2\2\u0e7b\u0e7c\5\u017c\u00bf\2\u0e7c\u0e7d\5\u017e\u00c0\2\u0e7d\u0e7e"+
		"\7\u00ef\2\2\u0e7e\u017b\3\2\2\2\u0e7f\u0e80\5\u01cc\u00e7\2\u0e80\u0e81"+
		"\5\u0080A\2\u0e81\u0e87\3\2\2\2\u0e82\u0e83\7\u00f0\2\2\u0e83\u0e84\5"+
		"\u00b6\\\2\u0e84\u0e85\7\u00ef\2\2\u0e85\u0e87\3\2\2\2\u0e86\u0e7f\3\2"+
		"\2\2\u0e86\u0e82\3\2\2\2\u0e87\u017d\3\2\2\2\u0e88\u0e89\5\u01da\u00ee"+
		"\2\u0e89\u0e9c\7\u00f0\2\2\u0e8a\u0e9d\5(\25\2\u0e8b\u0e90\5\u0190\u00c9"+
		"\2\u0e8c\u0e8d\7\u00ec\2\2\u0e8d\u0e8f\5\u0190\u00c9\2\u0e8e\u0e8c\3\2"+
		"\2\2\u0e8f\u0e92\3\2\2\2\u0e90\u0e8e\3\2\2\2\u0e90\u0e91\3\2\2\2\u0e91"+
		"\u0e9d\3\2\2\2\u0e92\u0e90\3\2\2\2\u0e93\u0e95\5\u0116\u008c\2\u0e94\u0e96"+
		"\5~@\2\u0e95\u0e94\3\2\2\2\u0e95\u0e96\3\2\2\2\u0e96\u0e97\3\2\2\2\u0e97"+
		"\u0e98\7\u00ec\2\2\u0e98\u0e9a\5\u0116\u008c\2\u0e99\u0e9b\5~@\2\u0e9a"+
		"\u0e99\3\2\2\2\u0e9a\u0e9b\3\2\2\2\u0e9b\u0e9d\3\2\2\2\u0e9c\u0e8a\3\2"+
		"\2\2\u0e9c\u0e8b\3\2\2\2\u0e9c\u0e93\3\2\2\2\u0e9d\u0e9e\3\2\2\2\u0e9e"+
		"\u0e9f\7\u00ef\2\2\u0e9f\u017f\3\2\2\2\u0ea0\u0ea7\5\u0388\u01c5\2\u0ea1"+
		"\u0ea4\5\u02b6\u015c\2\u0ea2\u0ea4\5\u02c6\u0164\2\u0ea3\u0ea1\3\2\2\2"+
		"\u0ea3\u0ea2\3\2\2\2\u0ea4\u0ea5\3\2\2\2\u0ea5\u0ea6\5\u0314\u018b\2\u0ea6"+
		"\u0ea8\3\2\2\2\u0ea7\u0ea3\3\2\2\2\u0ea7\u0ea8\3\2\2\2\u0ea8\u0ea9\3\2"+
		"\2\2\u0ea9\u0eaf\7\u00f0\2\2\u0eaa\u0eb0\5\u0080A\2\u0eab\u0eac\7\u00f0"+
		"\2\2\u0eac\u0ead\5\u00b6\\\2\u0ead\u0eae\7\u00ef\2\2\u0eae\u0eb0\3\2\2"+
		"\2\u0eaf\u0eaa\3\2\2\2\u0eaf\u0eab\3\2\2\2\u0eb0\u0eb1\3\2\2\2\u0eb1\u0eb2"+
		"\5\u017c\u00bf\2\u0eb2\u0eb3\5\u0182\u00c2\2\u0eb3\u0eb4\7\u00ef\2\2\u0eb4"+
		"\u0181\3\2\2\2\u0eb5\u0eb6\5\u01da\u00ee\2\u0eb6\u0ebc\7\u00f0\2\2\u0eb7"+
		"\u0ebd\5\u0080A\2\u0eb8\u0eb9\7\u00f0\2\2\u0eb9\u0eba\5\u00b6\\\2\u0eba"+
		"\u0ebb\7\u00ef\2\2\u0ebb\u0ebd\3\2\2\2\u0ebc\u0eb7\3\2\2\2\u0ebc\u0eb8"+
		"\3\2\2\2\u0ebd\u0ec6\3\2\2\2\u0ebe\u0ec4\5\u0194\u00cb\2\u0ebf\u0ec5\5"+
		"\u0184\u00c3\2\u0ec0\u0ec1\7\u00f0\2\2\u0ec1\u0ec2\5\u0184\u00c3\2\u0ec2"+
		"\u0ec3\7\u00ef\2\2\u0ec3\u0ec5\3\2\2\2\u0ec4\u0ebf\3\2\2\2\u0ec4\u0ec0"+
		"\3\2\2\2\u0ec5\u0ec7\3\2\2\2\u0ec6\u0ebe\3\2\2\2\u0ec6\u0ec7\3\2\2\2\u0ec7"+
		"\u0edc\3\2\2\2\u0ec8\u0ece\7\u00ec\2\2\u0ec9\u0ecf\5\u0080A\2\u0eca\u0ecb"+
		"\7\u00f0\2\2\u0ecb\u0ecc\5\u00b6\\\2\u0ecc\u0ecd\7\u00ef\2\2\u0ecd\u0ecf"+
		"\3\2\2\2\u0ece\u0ec9\3\2\2\2\u0ece\u0eca\3\2\2\2\u0ecf\u0ed8\3\2\2\2\u0ed0"+
		"\u0ed6\5\u0194\u00cb\2\u0ed1\u0ed7\5\u0184\u00c3\2\u0ed2\u0ed3\7\u00f0"+
		"\2\2\u0ed3\u0ed4\5\u0184\u00c3\2\u0ed4\u0ed5\7\u00ef\2\2\u0ed5\u0ed7\3"+
		"\2\2\2\u0ed6\u0ed1\3\2\2\2\u0ed6\u0ed2\3\2\2\2\u0ed7\u0ed9\3\2\2\2\u0ed8"+
		"\u0ed0\3\2\2\2\u0ed8\u0ed9\3\2\2\2\u0ed9\u0edb\3\2\2\2\u0eda\u0ec8\3\2"+
		"\2\2\u0edb\u0ede\3\2\2\2\u0edc\u0eda\3\2\2\2\u0edc\u0edd\3\2\2\2\u0edd"+
		"\u0edf\3\2\2\2\u0ede\u0edc\3\2\2\2\u0edf\u0ee0\7\u00ef\2\2\u0ee0\u0183"+
		"\3\2\2\2\u0ee1\u0ee4\7\u0103\2\2\u0ee2\u0ee4\5\u03a8\u01d5\2\u0ee3\u0ee1"+
		"\3\2\2\2\u0ee3\u0ee2\3\2\2\2\u0ee4\u0185\3\2\2\2\u0ee5\u0ee6\7\3\2\2\u0ee6"+
		"\u0ee7\b\u00c4\1\2\u0ee7\u0187\3\2\2\2\u0ee8\u0ee9\7\4\2\2\u0ee9\u0eea"+
		"\b\u00c5\1\2\u0eea\u0189\3\2\2\2\u0eeb\u0eec\7\5\2\2\u0eec\u0eed\b\u00c6"+
		"\1\2\u0eed\u018b\3\2\2\2\u0eee\u0eef\7\6\2\2\u0eef\u0ef0\b\u00c7\1\2\u0ef0"+
		"\u018d\3\2\2\2\u0ef1\u0ef2\7\7\2\2\u0ef2\u0ef3\b\u00c8\1\2\u0ef3\u018f"+
		"\3\2\2\2\u0ef4\u0ef5\7\b\2\2\u0ef5\u0ef6\b\u00c9\1\2\u0ef6\u0191\3\2\2"+
		"\2\u0ef7\u0ef8\7\t\2\2\u0ef8\u0ef9\b\u00ca\1\2\u0ef9\u0193\3\2\2\2\u0efa"+
		"\u0efb\7\n\2\2\u0efb\u0efc\b\u00cb\1\2\u0efc\u0195\3\2\2\2\u0efd\u0efe"+
		"\7\13\2\2\u0efe\u0eff\b\u00cc\1\2\u0eff\u0197\3\2\2\2\u0f00\u0f01\7\f"+
		"\2\2\u0f01\u0f02\b\u00cd\1\2\u0f02\u0199\3\2\2\2\u0f03\u0f04\7\r\2\2\u0f04"+
		"\u0f05\b\u00ce\1\2\u0f05\u019b\3\2\2\2\u0f06\u0f07\7\16\2\2\u0f07\u0f08"+
		"\b\u00cf\1\2\u0f08\u019d\3\2\2\2\u0f09\u0f0a\7\17\2\2\u0f0a\u0f0b\b\u00d0"+
		"\1\2\u0f0b\u019f\3\2\2\2\u0f0c\u0f0d\7\20\2\2\u0f0d\u0f0e\b\u00d1\1\2"+
		"\u0f0e\u01a1\3\2\2\2\u0f0f\u0f10\7\21\2\2\u0f10\u0f11\b\u00d2\1\2\u0f11"+
		"\u01a3\3\2\2\2\u0f12\u0f13\7\22\2\2\u0f13\u0f14\b\u00d3\1\2\u0f14\u01a5"+
		"\3\2\2\2\u0f15\u0f16\7\23\2\2\u0f16\u0f17\b\u00d4\1\2\u0f17\u01a7\3\2"+
		"\2\2\u0f18\u0f19\7\24\2\2\u0f19\u0f1a\b\u00d5\1\2\u0f1a\u01a9\3\2\2\2"+
		"\u0f1b\u0f1c\7\25\2\2\u0f1c\u0f1d\b\u00d6\1\2\u0f1d\u01ab\3\2\2\2\u0f1e"+
		"\u0f1f\7\26\2\2\u0f1f\u0f20\b\u00d7\1\2\u0f20\u01ad\3\2\2\2\u0f21\u0f22"+
		"\7\27\2\2\u0f22\u0f23\b\u00d8\1\2\u0f23\u01af\3\2\2\2\u0f24\u0f25\7\30"+
		"\2\2\u0f25\u0f26\b\u00d9\1\2\u0f26\u01b1\3\2\2\2\u0f27\u0f28\7\31\2\2"+
		"\u0f28\u0f29\b\u00da\1\2\u0f29\u01b3\3\2\2\2\u0f2a\u0f2b\7\32\2\2\u0f2b"+
		"\u0f2c\b\u00db\1\2\u0f2c\u01b5\3\2\2\2\u0f2d\u0f2e\7\33\2\2\u0f2e\u0f2f"+
		"\b\u00dc\1\2\u0f2f\u01b7\3\2\2\2\u0f30\u0f31\7\34\2\2\u0f31\u0f32\b\u00dd"+
		"\1\2\u0f32\u01b9\3\2\2\2\u0f33\u0f34\7\35\2\2\u0f34\u0f35\b\u00de\1\2"+
		"\u0f35\u01bb\3\2\2\2\u0f36\u0f37\7\36\2\2\u0f37\u0f38\b\u00df\1\2\u0f38"+
		"\u01bd\3\2\2\2\u0f39\u0f3a\7\37\2\2\u0f3a\u0f3b\b\u00e0\1\2\u0f3b\u01bf"+
		"\3\2\2\2\u0f3c\u0f3d\7 \2\2\u0f3d\u0f3e\b\u00e1\1\2\u0f3e\u01c1\3\2\2"+
		"\2\u0f3f\u0f40\7!\2\2\u0f40\u0f41\b\u00e2\1\2\u0f41\u01c3\3\2\2\2\u0f42"+
		"\u0f43\7\"\2\2\u0f43\u0f44\b\u00e3\1\2\u0f44\u01c5\3\2\2\2\u0f45\u0f46"+
		"\7#\2\2\u0f46\u0f47\b\u00e4\1\2\u0f47\u01c7\3\2\2\2\u0f48\u0f49\7$\2\2"+
		"\u0f49\u0f4a\b\u00e5\1\2\u0f4a\u01c9\3\2\2\2\u0f4b\u0f4c\7%\2\2\u0f4c"+
		"\u0f4d\b\u00e6\1\2\u0f4d\u01cb\3\2\2\2\u0f4e\u0f4f\7&\2\2\u0f4f\u0f50"+
		"\b\u00e7\1\2\u0f50\u01cd\3\2\2\2\u0f51\u0f52\7\'\2\2\u0f52\u0f53\b\u00e8"+
		"\1\2\u0f53\u01cf\3\2\2\2\u0f54\u0f55\7(\2\2\u0f55\u0f56\b\u00e9\1\2\u0f56"+
		"\u01d1\3\2\2\2\u0f57\u0f58\7)\2\2\u0f58\u0f59\b\u00ea\1\2\u0f59\u01d3"+
		"\3\2\2\2\u0f5a\u0f5b\7*\2\2\u0f5b\u0f5c\b\u00eb\1\2\u0f5c\u01d5\3\2\2"+
		"\2\u0f5d\u0f5e\7+\2\2\u0f5e\u0f5f\b\u00ec\1\2\u0f5f\u01d7\3\2\2\2\u0f60"+
		"\u0f61\7,\2\2\u0f61\u0f62\b\u00ed\1\2\u0f62\u01d9\3\2\2\2\u0f63\u0f64"+
		"\7-\2\2\u0f64\u0f65\b\u00ee\1\2\u0f65\u01db\3\2\2\2\u0f66\u0f67\7.\2\2"+
		"\u0f67\u0f68\b\u00ef\1\2\u0f68\u01dd\3\2\2\2\u0f69\u0f6a\7/\2\2\u0f6a"+
		"\u0f6b\b\u00f0\1\2\u0f6b\u01df\3\2\2\2\u0f6c\u0f6d\7\60\2\2\u0f6d\u0f6e"+
		"\b\u00f1\1\2\u0f6e\u01e1\3\2\2\2\u0f6f\u0f70\7\61\2\2\u0f70\u0f71\b\u00f2"+
		"\1\2\u0f71\u01e3\3\2\2\2\u0f72\u0f73\7\62\2\2\u0f73\u0f74\b\u00f3\1\2"+
		"\u0f74\u01e5\3\2\2\2\u0f75\u0f76\7\63\2\2\u0f76\u0f77\b\u00f4\1\2\u0f77"+
		"\u01e7\3\2\2\2\u0f78\u0f79\7\64\2\2\u0f79\u0f7a\b\u00f5\1\2\u0f7a\u01e9"+
		"\3\2\2\2\u0f7b\u0f7c\7\65\2\2\u0f7c\u0f7d\b\u00f6\1\2\u0f7d\u01eb\3\2"+
		"\2\2\u0f7e\u0f7f\7\66\2\2\u0f7f\u0f80\b\u00f7\1\2\u0f80\u01ed\3\2\2\2"+
		"\u0f81\u0f82\7\67\2\2\u0f82\u0f83\b\u00f8\1\2\u0f83\u01ef\3\2\2\2\u0f84"+
		"\u0f85\78\2\2\u0f85\u0f86\b\u00f9\1\2\u0f86\u01f1\3\2\2\2\u0f87\u0f88"+
		"\79\2\2\u0f88\u0f89\b\u00fa\1\2\u0f89\u01f3\3\2\2\2\u0f8a\u0f8b\7:\2\2"+
		"\u0f8b\u0f8c\b\u00fb\1\2\u0f8c\u01f5\3\2\2\2\u0f8d\u0f8e\7;\2\2\u0f8e"+
		"\u0f8f\b\u00fc\1\2\u0f8f\u01f7\3\2\2\2\u0f90\u0f91\7<\2\2\u0f91\u0f92"+
		"\b\u00fd\1\2\u0f92\u01f9\3\2\2\2\u0f93\u0f94\7=\2\2\u0f94\u0f95\b\u00fe"+
		"\1\2\u0f95\u01fb\3\2\2\2\u0f96\u0f97\7>\2\2\u0f97\u0f98\b\u00ff\1\2\u0f98"+
		"\u01fd\3\2\2\2\u0f99\u0f9a\7?\2\2\u0f9a\u0f9b\b\u0100\1\2\u0f9b\u01ff"+
		"\3\2\2\2\u0f9c\u0f9d\7@\2\2\u0f9d\u0f9e\b\u0101\1\2\u0f9e\u0201\3\2\2"+
		"\2\u0f9f\u0fa0\7A\2\2\u0fa0\u0fa1\b\u0102\1\2\u0fa1\u0203\3\2\2\2\u0fa2"+
		"\u0fa3\7B\2\2\u0fa3\u0fa4\b\u0103\1\2\u0fa4\u0205\3\2\2\2\u0fa5\u0fa6"+
		"\7C\2\2\u0fa6\u0fa7\b\u0104\1\2\u0fa7\u0207\3\2\2\2\u0fa8\u0fa9\7D\2\2"+
		"\u0fa9\u0faa\b\u0105\1\2\u0faa\u0209\3\2\2\2\u0fab\u0fac\7E\2\2\u0fac"+
		"\u0fad\b\u0106\1\2\u0fad\u020b\3\2\2\2\u0fae\u0faf\7F\2\2\u0faf\u0fb0"+
		"\b\u0107\1\2\u0fb0\u020d\3\2\2\2\u0fb1\u0fb2\7G\2\2\u0fb2\u0fb3\b\u0108"+
		"\1\2\u0fb3\u020f\3\2\2\2\u0fb4\u0fb5\7H\2\2\u0fb5\u0fb6\b\u0109\1\2\u0fb6"+
		"\u0211\3\2\2\2\u0fb7\u0fb8\7I\2\2\u0fb8\u0fb9\b\u010a\1\2\u0fb9\u0213"+
		"\3\2\2\2\u0fba\u0fbb\7J\2\2\u0fbb\u0fbc\b\u010b\1\2\u0fbc\u0215\3\2\2"+
		"\2\u0fbd\u0fbe\7K\2\2\u0fbe\u0fbf\b\u010c\1\2\u0fbf\u0217\3\2\2\2\u0fc0"+
		"\u0fc1\7L\2\2\u0fc1\u0fc2\b\u010d\1\2\u0fc2\u0219\3\2\2\2\u0fc3\u0fc4"+
		"\7M\2\2\u0fc4\u0fc5\b\u010e\1\2\u0fc5\u021b\3\2\2\2\u0fc6\u0fc7\7N\2\2"+
		"\u0fc7\u0fc8\b\u010f\1\2\u0fc8\u021d\3\2\2\2\u0fc9\u0fca\7O\2\2\u0fca"+
		"\u0fcb\b\u0110\1\2\u0fcb\u021f\3\2\2\2\u0fcc\u0fcd\7P\2\2\u0fcd\u0fce"+
		"\b\u0111\1\2\u0fce\u0221\3\2\2\2\u0fcf\u0fd0\7Q\2\2\u0fd0\u0fd1\b\u0112"+
		"\1\2\u0fd1\u0223\3\2\2\2\u0fd2\u0fd3\7R\2\2\u0fd3\u0fd4\b\u0113\1\2\u0fd4"+
		"\u0225\3\2\2\2\u0fd5\u0fd6\7S\2\2\u0fd6\u0fd7\b\u0114\1\2\u0fd7\u0227"+
		"\3\2\2\2\u0fd8\u0fd9\7T\2\2\u0fd9\u0fda\b\u0115\1\2\u0fda\u0229\3\2\2"+
		"\2\u0fdb\u0fdc\7U\2\2\u0fdc\u0fdd\b\u0116\1\2\u0fdd\u022b\3\2\2\2\u0fde"+
		"\u0fdf\7V\2\2\u0fdf\u0fe0\b\u0117\1\2\u0fe0\u022d\3\2\2\2\u0fe1\u0fe2"+
		"\7W\2\2\u0fe2\u0fe3\b\u0118\1\2\u0fe3\u022f\3\2\2\2\u0fe4\u0fe5\7X\2\2"+
		"\u0fe5\u0fe6\b\u0119\1\2\u0fe6\u0231\3\2\2\2\u0fe7\u0fe8\7Y\2\2\u0fe8"+
		"\u0fe9\b\u011a\1\2\u0fe9\u0233\3\2\2\2\u0fea\u0feb\7Z\2\2\u0feb\u0fec"+
		"\b\u011b\1\2\u0fec\u0235\3\2\2\2\u0fed\u0fee\7[\2\2\u0fee\u0fef\b\u011c"+
		"\1\2\u0fef\u0237\3\2\2\2\u0ff0\u0ff1\7\\\2\2\u0ff1\u0ff2\b\u011d\1\2\u0ff2"+
		"\u0239\3\2\2\2\u0ff3\u0ff4\7]\2\2\u0ff4\u0ff5\b\u011e\1\2\u0ff5\u023b"+
		"\3\2\2\2\u0ff6\u0ff7\7^\2\2\u0ff7\u0ff8\b\u011f\1\2\u0ff8\u023d\3\2\2"+
		"\2\u0ff9\u0ffa\7_\2\2\u0ffa\u0ffb\b\u0120\1\2\u0ffb\u023f\3\2\2\2\u0ffc"+
		"\u0ffd\7`\2\2\u0ffd\u0ffe\b\u0121\1\2\u0ffe\u0241\3\2\2\2\u0fff\u1000"+
		"\7a\2\2\u1000\u1001\b\u0122\1\2\u1001\u0243\3\2\2\2\u1002\u1003\7b\2\2"+
		"\u1003\u1004\b\u0123\1\2\u1004\u0245\3\2\2\2\u1005\u1006\7c\2\2\u1006"+
		"\u1007\b\u0124\1\2\u1007\u0247\3\2\2\2\u1008\u1009\7d\2\2\u1009\u100a"+
		"\b\u0125\1\2\u100a\u0249\3\2\2\2\u100b\u100c\7e\2\2\u100c\u100d\b\u0126"+
		"\1\2\u100d\u024b\3\2\2\2\u100e\u100f\7f\2\2\u100f\u1010\b\u0127\1\2\u1010"+
		"\u024d\3\2\2\2\u1011\u1012\7g\2\2\u1012\u1013\b\u0128\1\2\u1013\u024f"+
		"\3\2\2\2\u1014\u1015\7h\2\2\u1015\u1016\b\u0129\1\2\u1016\u0251\3\2\2"+
		"\2\u1017\u1018\7i\2\2\u1018\u1019\b\u012a\1\2\u1019\u0253\3\2\2\2\u101a"+
		"\u101b\7j\2\2\u101b\u101c\b\u012b\1\2\u101c\u0255\3\2\2\2\u101d\u101e"+
		"\7k\2\2\u101e\u101f\b\u012c\1\2\u101f\u0257\3\2\2\2\u1020\u1021\7l\2\2"+
		"\u1021\u1022\b\u012d\1\2\u1022\u0259\3\2\2\2\u1023\u1024\7m\2\2\u1024"+
		"\u1025\b\u012e\1\2\u1025\u025b\3\2\2\2\u1026\u1027\7n\2\2\u1027\u1028"+
		"\b\u012f\1\2\u1028\u025d\3\2\2\2\u1029\u102a\7o\2\2\u102a\u102b\b\u0130"+
		"\1\2\u102b\u025f\3\2\2\2\u102c\u102d\7p\2\2\u102d\u102e\b\u0131\1\2\u102e"+
		"\u0261\3\2\2\2\u102f\u1030\7q\2\2\u1030\u1031\b\u0132\1\2\u1031\u0263"+
		"\3\2\2\2\u1032\u1033\7r\2\2\u1033\u1034\b\u0133\1\2\u1034\u0265\3\2\2"+
		"\2\u1035\u1036\7s\2\2\u1036\u1037\b\u0134\1\2\u1037\u0267\3\2\2\2\u1038"+
		"\u1039\7t\2\2\u1039\u103a\b\u0135\1\2\u103a\u0269\3\2\2\2\u103b\u103c"+
		"\7u\2\2\u103c\u103d\b\u0136\1\2\u103d\u026b\3\2\2\2\u103e\u103f\6\u0137"+
		"\2\2\u103f\u1040\7\u00e7\2\2\u1040\u1041\b\u0137\1\2\u1041\u026d\3\2\2"+
		"\2\u1042\u1043\7v\2\2\u1043\u1044\b\u0138\1\2\u1044\u026f\3\2\2\2\u1045"+
		"\u1046\6\u0139\3\2\u1046\u1047\7\u00e7\2\2\u1047\u1048\b\u0139\1\2\u1048"+
		"\u0271\3\2\2\2\u1049\u104a\6\u013a\4\2\u104a\u104b\7\u00e7\2\2\u104b\u104c"+
		"\b\u013a\1\2\u104c\u0273\3\2\2\2\u104d\u104e\6\u013b\5\2\u104e\u104f\7"+
		"\u00e7\2\2\u104f\u1050\b\u013b\1\2\u1050\u0275\3\2\2\2\u1051\u1052\6\u013c"+
		"\6\2\u1052\u1053\7\u00e7\2\2\u1053\u1054\b\u013c\1\2\u1054\u0277\3\2\2"+
		"\2\u1055\u1056\6\u013d\7\2\u1056\u1057\7\u00e7\2\2\u1057\u1058\b\u013d"+
		"\1\2\u1058\u0279\3\2\2\2\u1059\u105a\6\u013e\b\2\u105a\u105b\7\u00e7\2"+
		"\2\u105b\u105c\b\u013e\1\2\u105c\u027b\3\2\2\2\u105d\u105e\6\u013f\t\2"+
		"\u105e\u105f\7\u00e7\2\2\u105f\u1060\b\u013f\1\2\u1060\u027d\3\2\2\2\u1061"+
		"\u1062\6\u0140\n\2\u1062\u1063\7\u00e7\2\2\u1063\u1064\b\u0140\1\2\u1064"+
		"\u027f\3\2\2\2\u1065\u1066\6\u0141\13\2\u1066\u1067\7\u00e7\2\2\u1067"+
		"\u1068\b\u0141\1\2\u1068\u0281\3\2\2\2\u1069\u106a\6\u0142\f\2\u106a\u106b"+
		"\7\u00e7\2\2\u106b\u106c\b\u0142\1\2\u106c\u0283\3\2\2\2\u106d\u106e\6"+
		"\u0143\r\2\u106e\u106f\7\u00e7\2\2\u106f\u1070\b\u0143\1\2\u1070\u0285"+
		"\3\2\2\2\u1071\u1072\7w\2\2\u1072\u1073\b\u0144\1\2\u1073\u0287\3\2\2"+
		"\2\u1074\u1075\6\u0145\16\2\u1075\u1076\7\u00e7\2\2\u1076\u1077\b\u0145"+
		"\1\2\u1077\u0289\3\2\2\2\u1078\u1079\6\u0146\17\2\u1079\u107a\7\u00e7"+
		"\2\2\u107a\u107b\b\u0146\1\2\u107b\u028b\3\2\2\2\u107c\u107d\7x\2\2\u107d"+
		"\u107e\b\u0147\1\2\u107e\u028d\3\2\2\2\u107f\u1080\7y\2\2\u1080\u1081"+
		"\b\u0148\1\2\u1081\u028f\3\2\2\2\u1082\u1083\6\u0149\20\2\u1083\u1084"+
		"\7\u00e7\2\2\u1084\u1085\b\u0149\1\2\u1085\u0291\3\2\2\2\u1086\u1087\7"+
		"z\2\2\u1087\u1088\b\u014a\1\2\u1088\u0293\3\2\2\2\u1089\u108a\6\u014b"+
		"\21\2\u108a\u108b\7\u00e7\2\2\u108b\u108c\b\u014b\1\2\u108c\u0295\3\2"+
		"\2\2\u108d\u108e\7{\2\2\u108e\u108f\b\u014c\1\2\u108f\u0297\3\2\2\2\u1090"+
		"\u1091\7|\2\2\u1091\u1092\b\u014d\1\2\u1092\u0299\3\2\2\2\u1093\u1094"+
		"\7}\2\2\u1094\u1095\b\u014e\1\2\u1095\u029b\3\2\2\2\u1096\u1097\6\u014f"+
		"\22\2\u1097\u1098\7\u00e7\2\2\u1098\u1099\b\u014f\1\2\u1099\u029d\3\2"+
		"\2\2\u109a\u109b\6\u0150\23\2\u109b\u109c\7\u00e7\2\2\u109c\u109d\b\u0150"+
		"\1\2\u109d\u029f\3\2\2\2\u109e\u109f\6\u0151\24\2\u109f\u10a0\7\u00e7"+
		"\2\2\u10a0\u10a1\b\u0151\1\2\u10a1\u02a1\3\2\2\2\u10a2\u10a3\6\u0152\25"+
		"\2\u10a3\u10a4\7\u00e7\2\2\u10a4\u10a5\b\u0152\1\2\u10a5\u02a3\3\2\2\2"+
		"\u10a6\u10a7\6\u0153\26\2\u10a7\u10a8\7\u00e7\2\2\u10a8\u10a9\b\u0153"+
		"\1\2\u10a9\u02a5\3\2\2\2\u10aa\u10ab\6\u0154\27\2\u10ab\u10ac\7\u00e7"+
		"\2\2\u10ac\u10ad\b\u0154\1\2\u10ad\u02a7\3\2\2\2\u10ae\u10af\7~\2\2\u10af"+
		"\u10b0\b\u0155\1\2\u10b0\u02a9\3\2\2\2\u10b1\u10b2\6\u0156\30\2\u10b2"+
		"\u10b3\7\u00e7\2\2\u10b3\u10b4\b\u0156\1\2\u10b4\u02ab\3\2\2\2\u10b5\u10b6"+
		"\6\u0157\31\2\u10b6\u10b7\7\u00e7\2\2\u10b7\u10b8\b\u0157\1\2\u10b8\u02ad"+
		"\3\2\2\2\u10b9\u10ba\7\177\2\2\u10ba\u10bb\b\u0158\1\2\u10bb\u02af\3\2"+
		"\2\2\u10bc\u10bd\6\u0159\32\2\u10bd\u10be\7\u00e7\2\2\u10be\u10bf\b\u0159"+
		"\1\2\u10bf\u02b1\3\2\2\2\u10c0\u10c1\6\u015a\33\2\u10c1\u10c2\7\u00e7"+
		"\2\2\u10c2\u10c3\b\u015a\1\2\u10c3\u02b3\3\2\2\2\u10c4\u10c5\7\u0080\2"+
		"\2\u10c5\u10c6\b\u015b\1\2\u10c6\u02b5\3\2\2\2\u10c7\u10c8\6\u015c\34"+
		"\2\u10c8\u10c9\7\u00e7\2\2\u10c9\u10ca\b\u015c\1\2\u10ca\u02b7\3\2\2\2"+
		"\u10cb\u10cc\7\u0081\2\2\u10cc\u10cd\b\u015d\1\2\u10cd\u02b9\3\2\2\2\u10ce"+
		"\u10cf\7\u0082\2\2\u10cf\u10d0\b\u015e\1\2\u10d0\u02bb\3\2\2\2\u10d1\u10d2"+
		"\7\u0083\2\2\u10d2\u10d3\b\u015f\1\2\u10d3\u02bd\3\2\2\2\u10d4\u10d5\7"+
		"\u0084\2\2\u10d5\u10d6\b\u0160\1\2\u10d6\u02bf\3\2\2\2\u10d7\u10d8\7\u0085"+
		"\2\2\u10d8\u10d9\b\u0161\1\2\u10d9\u02c1\3\2\2\2\u10da\u10db\6\u0162\35"+
		"\2\u10db\u10dc\7\u00e7\2\2\u10dc\u10dd\b\u0162\1\2\u10dd\u02c3\3\2\2\2"+
		"\u10de\u10df\7\u0086\2\2\u10df\u10e0\b\u0163\1\2\u10e0\u02c5\3\2\2\2\u10e1"+
		"\u10e2\6\u0164\36\2\u10e2\u10e3\7\u00e7\2\2\u10e3\u10e4\b\u0164\1\2\u10e4"+
		"\u02c7\3\2\2\2\u10e5\u10e6\7\u0087\2\2\u10e6\u10e7\b\u0165\1\2\u10e7\u02c9"+
		"\3\2\2\2\u10e8\u10e9\6\u0166\37\2\u10e9\u10ea\7\u00e7\2\2\u10ea\u10eb"+
		"\b\u0166\1\2\u10eb\u02cb\3\2\2\2\u10ec\u10ed\6\u0167 \2\u10ed\u10ee\7"+
		"\u00e7\2\2\u10ee\u10ef\b\u0167\1\2\u10ef\u02cd\3\2\2\2\u10f0\u10f1\7\u0088"+
		"\2\2\u10f1\u10f2\b\u0168\1\2\u10f2\u02cf\3\2\2\2\u10f3\u10f4\6\u0169!"+
		"\2\u10f4\u10f5\7\u00e7\2\2\u10f5\u10f6\b\u0169\1\2\u10f6\u02d1\3\2\2\2"+
		"\u10f7\u10f8\7\u0089\2\2\u10f8\u10f9\b\u016a\1\2\u10f9\u02d3\3\2\2\2\u10fa"+
		"\u10fb\6\u016b\"\2\u10fb\u10fc\7\u00e7\2\2\u10fc\u10fd\b\u016b\1\2\u10fd"+
		"\u02d5\3\2\2\2\u10fe\u10ff\7\u008a\2\2\u10ff\u1100\b\u016c\1\2\u1100\u02d7"+
		"\3\2\2\2\u1101\u1102\6\u016d#\2\u1102\u1103\7\u00e7\2\2\u1103\u1104\b"+
		"\u016d\1\2\u1104\u02d9\3\2\2\2\u1105\u1106\7\u008b\2\2\u1106\u1107\b\u016e"+
		"\1\2\u1107\u02db\3\2\2\2\u1108\u1109\7\u008c\2\2\u1109\u110a\b\u016f\1"+
		"\2\u110a\u02dd\3\2\2\2\u110b\u110c\7\u008d\2\2\u110c\u110d\b\u0170\1\2"+
		"\u110d\u02df\3\2\2\2\u110e\u110f\7\u008e\2\2\u110f\u1110\b\u0171\1\2\u1110"+
		"\u02e1\3\2\2\2\u1111\u1112\6\u0172$\2\u1112\u1113\7\u00e7\2\2\u1113\u1114"+
		"\b\u0172\1\2\u1114\u02e3\3\2\2\2\u1115\u1116\6\u0173%\2\u1116\u1117\7"+
		"\u00e7\2\2\u1117\u1118\b\u0173\1\2\u1118\u02e5\3\2\2\2\u1119\u111a\6\u0174"+
		"&\2\u111a\u111b\7\u00e7\2\2\u111b\u111c\b\u0174\1\2\u111c\u02e7\3\2\2"+
		"\2\u111d\u111e\6\u0175\'\2\u111e\u111f\7\u00e7\2\2\u111f\u1120\b\u0175"+
		"\1\2\u1120\u02e9\3\2\2\2\u1121\u1122\6\u0176(\2\u1122\u1123\7\u00e7\2"+
		"\2\u1123\u1124\b\u0176\1\2\u1124\u02eb\3\2\2\2\u1125\u1126\6\u0177)\2"+
		"\u1126\u1127\7\u00e7\2\2\u1127\u1128\b\u0177\1\2\u1128\u02ed\3\2\2\2\u1129"+
		"\u112a\7\u008f\2\2\u112a\u112b\b\u0178\1\2\u112b\u02ef\3\2\2\2\u112c\u112d"+
		"\6\u0179*\2\u112d\u112e\7\u00e7\2\2\u112e\u112f\b\u0179\1\2\u112f\u02f1"+
		"\3\2\2\2\u1130\u1131\6\u017a+\2\u1131\u1132\7\u00e7\2\2\u1132\u1133\b"+
		"\u017a\1\2\u1133\u02f3\3\2\2\2\u1134\u1135\6\u017b,\2\u1135\u1136\7\u00e7"+
		"\2\2\u1136\u1137\b\u017b\1\2\u1137\u02f5\3\2\2\2\u1138\u1139\7\u0090\2"+
		"\2\u1139\u113a\b\u017c\1\2\u113a\u02f7\3\2\2\2\u113b\u113c\6\u017d-\2"+
		"\u113c\u113d\7\u00e7\2\2\u113d\u113e\b\u017d\1\2\u113e\u02f9\3\2\2\2\u113f"+
		"\u1140\6\u017e.\2\u1140\u1141\7\u00e7\2\2\u1141\u1142\b\u017e\1\2\u1142"+
		"\u02fb\3\2\2\2\u1143\u1144\6\u017f/\2\u1144\u1145\7\u00e7\2\2\u1145\u1146"+
		"\b\u017f\1\2\u1146\u02fd\3\2\2\2\u1147\u1148\6\u0180\60\2\u1148\u1149"+
		"\7\u00e7\2\2\u1149\u114a\b\u0180\1\2\u114a\u02ff\3\2\2\2\u114b\u114c\6"+
		"\u0181\61\2\u114c\u114d\7\u0091\2\2\u114d\u114e\b\u0181\1\2\u114e\u0301"+
		"\3\2\2\2\u114f\u1150\6\u0182\62\2\u1150\u1151\7\u00e7\2\2\u1151\u1152"+
		"\b\u0182\1\2\u1152\u0303\3\2\2\2\u1153\u1154\7\u0092\2\2\u1154\u1155\b"+
		"\u0183\1\2\u1155\u0305\3\2\2\2\u1156\u1157\7\u0093\2\2\u1157\u1158\b\u0184"+
		"\1\2\u1158\u0307\3\2\2\2\u1159\u115a\6\u0185\63\2\u115a\u115b\7\u00e7"+
		"\2\2\u115b\u115c\b\u0185\1\2\u115c\u0309\3\2\2\2\u115d\u115e\6\u0186\64"+
		"\2\u115e\u115f\7\u00e7\2\2\u115f\u1160\b\u0186\1\2\u1160\u030b\3\2\2\2"+
		"\u1161\u1162\7\u0094\2\2\u1162\u1163\b\u0187\1\2\u1163\u030d\3\2\2\2\u1164"+
		"\u1165\6\u0188\65\2\u1165\u1166\7\u00e7\2\2\u1166\u1167\b\u0188\1\2\u1167"+
		"\u030f\3\2\2\2\u1168\u1169\6\u0189\66\2\u1169\u116a\7\u00e7\2\2\u116a"+
		"\u116b\b\u0189\1\2\u116b\u0311\3\2\2\2\u116c\u116d\6\u018a\67\2\u116d"+
		"\u116e\7\u00e7\2\2\u116e\u116f\b\u018a\1\2\u116f\u0313\3\2\2\2\u1170\u1171"+
		"\7\u0095\2\2\u1171\u1172\b\u018b\1\2\u1172\u0315\3\2\2\2\u1173\u1174\6"+
		"\u018c8\2\u1174\u1175\7\u00e7\2\2\u1175\u1176\b\u018c\1\2\u1176\u0317"+
		"\3\2\2\2\u1177\u1178\6\u018d9\2\u1178\u1179\7\u00e7\2\2\u1179\u117a\b"+
		"\u018d\1\2\u117a\u0319\3\2\2\2\u117b\u117c\6\u018e:\2\u117c\u117d\7\u00e7"+
		"\2\2\u117d\u117e\b\u018e\1\2\u117e\u031b\3\2\2\2\u117f\u1180\6\u018f;"+
		"\2\u1180\u1181\7\u00e7\2\2\u1181\u1182\b\u018f\1\2\u1182\u031d\3\2\2\2"+
		"\u1183\u1184\7\u0096\2\2\u1184\u1185\b\u0190\1\2\u1185\u031f\3\2\2\2\u1186"+
		"\u1187\6\u0191<\2\u1187\u1188\7\u00e7\2\2\u1188\u1189\b\u0191\1\2\u1189"+
		"\u0321\3\2\2\2\u118a\u118b\7\u0097\2\2\u118b\u118c\b\u0192\1\2\u118c\u0323"+
		"\3\2\2\2\u118d\u118e\6\u0193=\2\u118e\u118f\7\u00e7\2\2\u118f\u1190\b"+
		"\u0193\1\2\u1190\u0325\3\2\2\2\u1191\u1192\6\u0194>\2\u1192\u1193\7\u00e7"+
		"\2\2\u1193\u1194\b\u0194\1\2\u1194\u0327\3\2\2\2\u1195\u1196\6\u0195?"+
		"\2\u1196\u1197\7\u00e7\2\2\u1197\u1198\b\u0195\1\2\u1198\u0329\3\2\2\2"+
		"\u1199\u119a\7\u0098\2\2\u119a\u119b\b\u0196\1\2\u119b\u032b\3\2\2\2\u119c"+
		"\u119d\6\u0197@\2\u119d\u119e\7\u00e7\2\2\u119e\u119f\b\u0197\1\2\u119f"+
		"\u032d\3\2\2\2\u11a0\u11a1\6\u0198A\2\u11a1\u11a2\7\u00e7\2\2\u11a2\u11a3"+
		"\b\u0198\1\2\u11a3\u032f\3\2\2\2\u11a4\u11a5\7\u0099\2\2\u11a5\u11a6\b"+
		"\u0199\1\2\u11a6\u0331\3\2\2\2\u11a7\u11a8\6\u019aB\2\u11a8\u11a9\7\u00e7"+
		"\2\2\u11a9\u11aa\b\u019a\1\2\u11aa\u0333\3\2\2\2\u11ab\u11ac\6\u019bC"+
		"\2\u11ac\u11ad\7\u00e7\2\2\u11ad\u11ae\b\u019b\1\2\u11ae\u0335\3\2\2\2"+
		"\u11af\u11b0\7\u009a\2\2\u11b0\u11b1\b\u019c\1\2\u11b1\u0337\3\2\2\2\u11b2"+
		"\u11b3\6\u019dD\2\u11b3\u11b4\7\u00e7\2\2\u11b4\u11b5\b\u019d\1\2\u11b5"+
		"\u0339\3\2\2\2\u11b6\u11b7\6\u019eE\2\u11b7\u11b8\7\u00e7\2\2\u11b8\u11b9"+
		"\b\u019e\1\2\u11b9\u033b\3\2\2\2\u11ba\u11bb\7\u009b\2\2\u11bb\u11bc\b"+
		"\u019f\1\2\u11bc\u033d\3\2\2\2\u11bd\u11be\6\u01a0F\2\u11be\u11bf\7\u00e7"+
		"\2\2\u11bf\u11c0\b\u01a0\1\2\u11c0\u033f\3\2\2\2\u11c1\u11c2\6\u01a1G"+
		"\2\u11c2\u11c3\7\u00e7\2\2\u11c3\u11c4\b\u01a1\1\2\u11c4\u0341\3\2\2\2"+
		"\u11c5\u11c6\7\u009c\2\2\u11c6\u11c7\b\u01a2\1\2\u11c7\u0343\3\2\2\2\u11c8"+
		"\u11c9\7\u009d\2\2\u11c9\u11ca\b\u01a3\1\2\u11ca\u0345\3\2\2\2\u11cb\u11cc"+
		"\7\u009e\2\2\u11cc\u11cd\b\u01a4\1\2\u11cd\u0347\3\2\2\2\u11ce\u11cf\7"+
		"\u009f\2\2\u11cf\u11d0\b\u01a5\1\2\u11d0\u0349\3\2\2\2\u11d1\u11d2\7\u00a0"+
		"\2\2\u11d2\u11d3\b\u01a6\1\2\u11d3\u034b\3\2\2\2\u11d4\u11d5\6\u01a7H"+
		"\2\u11d5\u11d6\7\u00e7\2\2\u11d6\u11d7\b\u01a7\1\2\u11d7\u034d\3\2\2\2"+
		"\u11d8\u11d9\6\u01a8I\2\u11d9\u11da\7\u00e7\2\2\u11da\u11db\b\u01a8\1"+
		"\2\u11db\u034f\3\2\2\2\u11dc\u11dd\6\u01a9J\2\u11dd\u11de\7\u00e7\2\2"+
		"\u11de\u11df\b\u01a9\1\2\u11df\u0351\3\2\2\2\u11e0\u11e1\7\u00a1\2\2\u11e1"+
		"\u11e2\b\u01aa\1\2\u11e2\u0353\3\2\2\2\u11e3\u11e4\6\u01abK\2\u11e4\u11e5"+
		"\7\u00e7\2\2\u11e5\u11e6\b\u01ab\1\2\u11e6\u0355\3\2\2\2\u11e7\u11e8\6"+
		"\u01acL\2\u11e8\u11e9\7\u00e7\2\2\u11e9\u11ea\b\u01ac\1\2\u11ea\u0357"+
		"\3\2\2\2\u11eb\u11ec\6\u01adM\2\u11ec\u11ed\7\u00e7\2\2\u11ed\u11ee\b"+
		"\u01ad\1\2\u11ee\u0359\3\2\2\2\u11ef\u11f0\6\u01aeN\2\u11f0\u11f1\7\u00e7"+
		"\2\2\u11f1\u11f2\b\u01ae\1\2\u11f2\u035b\3\2\2\2\u11f3\u11f4\7\u00a2\2"+
		"\2\u11f4\u11f5\b\u01af\1\2\u11f5\u035d\3\2\2\2\u11f6\u11f7\6\u01b0O\2"+
		"\u11f7\u11f8\7\u00e7\2\2\u11f8\u11f9\b\u01b0\1\2\u11f9\u035f\3\2\2\2\u11fa"+
		"\u11fb\6\u01b1P\2\u11fb\u11fc\7\u00e7\2\2\u11fc\u11fd\b\u01b1\1\2\u11fd"+
		"\u0361\3\2\2\2\u11fe\u11ff\6\u01b2Q\2\u11ff\u1200\7\u00e7\2\2\u1200\u1201"+
		"\b\u01b2\1\2\u1201\u0363\3\2\2\2\u1202\u1203\7\u00a3\2\2\u1203\u1204\b"+
		"\u01b3\1\2\u1204\u0365\3\2\2\2\u1205\u1206\7\u00a4\2\2\u1206\u1207\b\u01b4"+
		"\1\2\u1207\u0367\3\2\2\2\u1208\u1209\7\u00a5\2\2\u1209\u120a\b\u01b5\1"+
		"\2\u120a\u0369\3\2\2\2\u120b\u120c\6\u01b6R\2\u120c\u120d\7\u00e7\2\2"+
		"\u120d\u120e\b\u01b6\1\2\u120e\u036b\3\2\2\2\u120f\u1210\7\u00a6\2\2\u1210"+
		"\u1211\b\u01b7\1\2\u1211\u036d\3\2\2\2\u1212\u1213\6\u01b8S\2\u1213\u1214"+
		"\7\u00e7\2\2\u1214\u1215\b\u01b8\1\2\u1215\u036f\3\2\2\2\u1216\u1217\7"+
		"\u00a7\2\2\u1217\u1218\b\u01b9\1\2\u1218\u0371\3\2\2\2\u1219\u121a\6\u01ba"+
		"T\2\u121a\u121b\7\u00e7\2\2\u121b\u121c\b\u01ba\1\2\u121c\u0373\3\2\2"+
		"\2\u121d\u121e\6\u01bbU\2\u121e\u121f\7\u00e7\2\2\u121f\u1220\b\u01bb"+
		"\1\2\u1220\u0375\3\2\2\2\u1221\u1222\6\u01bcV\2\u1222\u1223\7\u00e7\2"+
		"\2\u1223\u1224\b\u01bc\1\2\u1224\u0377\3\2\2\2\u1225\u1226\6\u01bdW\2"+
		"\u1226\u1227\7\u00e7\2\2\u1227\u1228\b\u01bd\1\2\u1228\u0379\3\2\2\2\u1229"+
		"\u122a\7f\2\2\u122a\u122b\b\u01be\1\2\u122b\u037b\3\2\2\2\u122c\u122d"+
		"\6\u01bfX\2\u122d\u122e\7\u00e7\2\2\u122e\u122f\b\u01bf\1\2\u122f\u037d"+
		"\3\2\2\2\u1230\u1231\6\u01c0Y\2\u1231\u1232\7\u00e7\2\2\u1232\u1233\b"+
		"\u01c0\1\2\u1233\u037f\3\2\2\2\u1234\u1235\6\u01c1Z\2\u1235\u1236\7\u00e7"+
		"\2\2\u1236\u1237\b\u01c1\1\2\u1237\u0381\3\2\2\2\u1238\u1239\7\u00a8\2"+
		"\2\u1239\u123a\b\u01c2\1\2\u123a\u0383\3\2\2\2\u123b\u123c\6\u01c3[\2"+
		"\u123c\u123d\7\u00e7\2\2\u123d\u123e\b\u01c3\1\2\u123e\u0385\3\2\2\2\u123f"+
		"\u1240\6\u01c4\\\2\u1240\u1241\7\u00e7\2\2\u1241\u1242\b\u01c4\1\2\u1242"+
		"\u0387\3\2\2\2\u1243\u1244\7\u00a9\2\2\u1244\u1245\b\u01c5\1\2\u1245\u0389"+
		"\3\2\2\2\u1246\u1247\6\u01c6]\2\u1247\u1248\7\u00e7\2\2\u1248\u1249\b"+
		"\u01c6\1\2\u1249\u038b\3\2\2\2\u124a\u124b\6\u01c7^\2\u124b\u124c\7\u00e7"+
		"\2\2\u124c\u124d\b\u01c7\1\2\u124d\u038d\3\2\2\2\u124e\u124f\6\u01c8_"+
		"\2\u124f\u1250\7\u00e7\2\2\u1250\u1251\b\u01c8\1\2\u1251\u038f\3\2\2\2"+
		"\u1252\u1253\6\u01c9`\2\u1253\u1254\7\u00e7\2\2\u1254\u1255\b\u01c9\1"+
		"\2\u1255\u0391\3\2\2\2\u1256\u1257\7\u00aa\2\2\u1257\u1258\b\u01ca\1\2"+
		"\u1258\u0393\3\2\2\2\u1259\u125a\6\u01cba\2\u125a\u125b\7\u00e7\2\2\u125b"+
		"\u125c\b\u01cb\1\2\u125c\u0395\3\2\2\2\u125d\u125e\6\u01ccb\2\u125e\u125f"+
		"\7\u00e7\2\2\u125f\u1260\b\u01cc\1\2\u1260\u0397\3\2\2\2\u1261\u1262\7"+
		"\u00ab\2\2\u1262\u1263\b\u01cd\1\2\u1263\u0399\3\2\2\2\u1264\u1265\6\u01ce"+
		"c\2\u1265\u1266\7\u00e7\2\2\u1266\u1267\b\u01ce\1\2\u1267\u039b\3\2\2"+
		"\2\u1268\u1269\7\u00ac\2\2\u1269\u126a\b\u01cf\1\2\u126a\u039d\3\2\2\2"+
		"\u126b\u126c\6\u01d0d\2\u126c\u126d\7\u00e7\2\2\u126d\u126e\b\u01d0\1"+
		"\2\u126e\u039f\3\2\2\2\u126f\u1270\6\u01d1e\2\u1270\u1271\7\u00e7\2\2"+
		"\u1271\u1272\b\u01d1\1\2\u1272\u03a1\3\2\2\2\u1273\u1274\6\u01d2f\2\u1274"+
		"\u1275\7\u00e7\2\2\u1275\u1276\b\u01d2\1\2\u1276\u03a3\3\2\2\2\u1277\u1278"+
		"\6\u01d3g\2\u1278\u1279\7\u00e7\2\2\u1279\u127a\b\u01d3\1\2\u127a\u03a5"+
		"\3\2\2\2\u127b\u127c\t\6\2\2\u127c\u127d\b\u01d4\1\2\u127d\u03a7\3\2\2"+
		"\2\u127e\u127f\t\7\2\2\u127f\u03a9\3\2\2\2\u1280\u1284\7\u00fd\2\2\u1281"+
		"\u1282\7\u00fc\2\2\u1282\u1284\7\u00fc\2\2\u1283\u1280\3\2\2\2\u1283\u1281"+
		"\3\2\2\2\u1284\u03ab\3\2\2\2\u1285\u128d\7\u00fe\2\2\u1286\u1287\7\u00ff"+
		"\2\2\u1287\u128d\7\u0101\2\2\u1288\u1289\7\u00ad\2\2\u1289\u128d\7\u00f6"+
		"\2\2\u128a\u128b\7\u00ae\2\2\u128b\u128d\7\u00f6\2\2\u128c\u1285\3\2\2"+
		"\2\u128c\u1286\3\2\2\2\u128c\u1288\3\2\2\2\u128c\u128a\3\2\2\2\u128d\u03ad"+
		"\3\2\2\2\u128e\u1292\7\u0100\2\2\u128f\u1290\7\u00ff\2\2\u1290\u1292\7"+
		"\u00f6\2\2\u1291\u128e\3\2\2\2\u1291\u128f\3\2\2\2\u1292\u03af\3\2\2\2"+
		"\u1293\u1297\7\u0102\2\2\u1294\u1295\7\u0101\2\2\u1295\u1297\7\u00f6\2"+
		"\2\u1296\u1293\3\2\2\2\u1296\u1294\3\2\2\2\u1297\u03b1\3\2\2\2\u01e6\u03b7"+
		"\u03bd\u03c5\u03c8\u03cb\u03ce\u03d1\u03d8\u03dc\u03e3\u03e6\u03e9\u03f1"+
		"\u03f5\u03f7\u03fa\u0405\u040c\u0410\u0414\u0419\u0424\u042a\u042f\u0433"+
		"\u0438\u043d\u0442\u0446\u0449\u044e\u0454\u045a\u045f\u0463\u046a\u0471"+
		"\u047a\u0480\u0483\u0487\u048a\u0490\u0497\u049b\u049f\u04a4\u04a8\u04ad"+
		"\u04b3\u04b7\u04bb\u04c0\u04c5\u04cd\u04d1\u04d7\u04dd\u04df\u04e3\u04ec"+
		"\u04ef\u04f3\u04f6\u04f9\u0503\u0507\u050c\u0510\u0513\u0520\u0523\u052a"+
		"\u0533\u0536\u053b\u053e\u0541\u0544\u0549\u054d\u0550\u0553\u0556\u055d"+
		"\u0561\u0564\u056b\u0576\u057e\u0584\u0587\u058c\u0591\u0596\u0599\u059e"+
		"\u05a3\u05a7\u05b3\u05c1\u05cd\u05d4\u05d7\u05df\u05e4\u05ec\u05f3\u0607"+
		"\u0611\u0615\u061f\u0622\u0627\u0632\u0635\u0638\u0647\u064c\u064f\u065e"+
		"\u0667\u0677\u067e\u068c\u0692\u0698\u069b\u069e\u06a1\u06a7\u06aa\u06af"+
		"\u06b3\u06b6\u06b9\u06bf\u06c2\u06c7\u06cb\u06ce\u06d1\u06d3\u06d7\u06de"+
		"\u06e2\u06e8\u06ed\u06ef\u06f3\u06f9\u06ff\u0703\u070a\u0710\u0712\u0714"+
		"\u0718\u0726\u072f\u0739\u073b\u0741\u0747\u074e\u0755\u075b\u0762\u0764"+
		"\u076d\u0771\u0776\u0780\u0785\u0792\u0798\u079b\u079f\u07a4\u07aa\u07b3"+
		"\u07ba\u07c1\u07c8\u07cd\u07d1\u07d6\u07df\u07e7\u07ed\u07f0\u07f8\u07fa"+
		"\u0801\u0804\u080c\u080e\u0815\u0818\u0820\u0822\u0826\u082b\u082f\u0834"+
		"\u083a\u0840\u0845\u0848\u084d\u0859\u085b\u0864\u0866\u086a\u086f\u0873"+
		"\u0878\u087d\u0881\u088d\u0893\u08a2\u08ad\u08b3\u08b7\u08bc\u08c0\u08c9"+
		"\u08cc\u08cf\u08d4\u08da\u08dd\u08e1\u08e5\u08e9\u08ee\u08f2\u08f9\u08fb"+
		"\u0901\u0905\u090a\u090c\u0912\u0918\u091e\u0926\u0934\u0939\u0947\u094c"+
		"\u094e\u0959\u095b\u095f\u0963\u096a\u096e\u0970\u0976\u0979\u0985\u0987"+
		"\u098d\u098f\u0994\u0997\u099e\u09a2\u09a6\u09b0\u09b9\u09bc\u09c0\u09c4"+
		"\u09d7\u09de\u09e2\u09ea\u09f2\u09fa\u0a01\u0a0a\u0a0e\u0a16\u0a1e\u0a20"+
		"\u0a27\u0a2d\u0a31\u0a42\u0a47\u0a51\u0a5a\u0a61\u0a76\u0a7d\u0a81\u0a86"+
		"\u0a8b\u0a90\u0a92\u0a98\u0a9c\u0aa0\u0aa3\u0aa7\u0aaf\u0ab2\u0ab9\u0abc"+
		"\u0abe\u0ac5\u0aca\u0acf\u0ada\u0adf\u0ae4\u0ae8\u0aee\u0af4\u0afa\u0b00"+
		"\u0b06\u0b0b\u0b10\u0b18\u0b1f\u0b26\u0b2a\u0b36\u0b3c\u0b42\u0b46\u0b4a"+
		"\u0b4e\u0b52\u0b60\u0b64\u0b6f\u0b78\u0b7e\u0b89\u0b8e\u0b92\u0b97\u0b9c"+
		"\u0ba8\u0bad\u0bb2\u0bbb\u0bc5\u0bcf\u0bd3\u0bdb\u0be3\u0bef\u0bf4\u0bf9"+
		"\u0bfd\u0c04\u0c06\u0c0b\u0c1d\u0c27\u0c29\u0c3a\u0c3f\u0c42\u0c48\u0c4a"+
		"\u0c4e\u0c52\u0c54\u0c5f\u0c61\u0c6c\u0c72\u0c74\u0c78\u0c81\u0c8a\u0c90"+
		"\u0c9a\u0ca1\u0ca9\u0cad\u0cb2\u0cb6\u0cbd\u0cc8\u0cd5\u0cda\u0cde\u0ce2"+
		"\u0ce6\u0ced\u0cf2\u0cf5\u0cfa\u0cff\u0d04\u0d07\u0d0c\u0d11\u0d1a\u0d1d"+
		"\u0d23\u0d28\u0d2c\u0d38\u0d3c\u0d43\u0d4b\u0d4e\u0d56\u0d59\u0d5d\u0d5f"+
		"\u0d64\u0d6c\u0d6e\u0d72\u0d7a\u0d7e\u0d8a\u0d8d\u0d95\u0d97\u0da5\u0daa"+
		"\u0dac\u0db2\u0db7\u0db9\u0dbd\u0dcc\u0dd1\u0dd3\u0dd9\u0dde\u0de0\u0de4"+
		"\u0df1\u0e00\u0e10\u0e13\u0e1b\u0e24\u0e2b\u0e38\u0e41\u0e44\u0e4d\u0e52"+
		"\u0e57\u0e5f\u0e64\u0e6a\u0e6f\u0e74\u0e78\u0e86\u0e90\u0e95\u0e9a\u0e9c"+
		"\u0ea3\u0ea7\u0eaf\u0ebc\u0ec4\u0ec6\u0ece\u0ed6\u0ed8\u0edc\u0ee3\u1283"+
		"\u128c\u1291\u1296";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}